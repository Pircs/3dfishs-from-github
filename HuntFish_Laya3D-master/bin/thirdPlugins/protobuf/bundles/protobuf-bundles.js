var $protobuf = window.protobuf;
$protobuf.roots.default=window;
$protobuf.util.Long = Long;
$protobuf.configure();
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.NetCodeMsg = (function() {

    /**
     * Namespace NetCodeMsg.
     * @exports NetCodeMsg
     * @namespace
     */
    var NetCodeMsg = {};

    /**
     * cmd enum.
     * @name NetCodeMsg.cmd
     * @enum {string}
     * @property {number} msg_base=0 msg_base value
     * @property {number} msg_login=1 msg_login value
     * @property {number} msg_room=21 msg_room value
     * @property {number} msg_rank=22 msg_rank value
     * @property {number} msg_broadcast=24 msg_broadcast value
     * @property {number} msg_winners=25 msg_winners value
     * @property {number} msg_pool=26 msg_pool value
     * @property {number} msg_report=27 msg_report value
     * @property {number} msg_act=30 msg_act value
     * @property {number} msg_mail=31 msg_mail value
     * @property {number} msg_wallet=32 msg_wallet value
     * @property {number} msg_role_info=33 msg_role_info value
     * @property {number} msg_award=34 msg_award value
     * @property {number} msg_extend=38 msg_extend value
     */
    NetCodeMsg.cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "msg_base"] = 0;
        values[valuesById[1] = "msg_login"] = 1;
        values[valuesById[21] = "msg_room"] = 21;
        values[valuesById[22] = "msg_rank"] = 22;
        values[valuesById[24] = "msg_broadcast"] = 24;
        values[valuesById[25] = "msg_winners"] = 25;
        values[valuesById[26] = "msg_pool"] = 26;
        values[valuesById[27] = "msg_report"] = 27;
        values[valuesById[30] = "msg_act"] = 30;
        values[valuesById[31] = "msg_mail"] = 31;
        values[valuesById[32] = "msg_wallet"] = 32;
        values[valuesById[33] = "msg_role_info"] = 33;
        values[valuesById[34] = "msg_award"] = 34;
        values[valuesById[38] = "msg_extend"] = 38;
        return values;
    })();

    return NetCodeMsg;
})();

$root.ActMsg = (function() {

    /**
     * Namespace ActMsg.
     * @exports ActMsg
     * @namespace
     */
    var ActMsg = {};

    /**
     * c_cmd enum.
     * @name ActMsg.c_cmd
     * @enum {string}
     * @property {number} act_list_req=1 act_list_req value
     * @property {number} act_list_resp=2 act_list_resp value
     * @property {number} act_detail_info_req=3 act_detail_info_req value
     * @property {number} act_detail_info_resp=4 act_detail_info_resp value
     * @property {number} red_bag_exchange_info_req=5 red_bag_exchange_info_req value
     * @property {number} red_bag_exchange_info_resp=6 red_bag_exchange_info_resp value
     * @property {number} red_bag_exchange_req=7 red_bag_exchange_req value
     * @property {number} red_bag_exchange_resp=8 red_bag_exchange_resp value
     * @property {number} red_bag_num_resp=9 red_bag_num_resp value
     * @property {number} red_bag_add_resp=10 red_bag_add_resp value
     * @property {number} act_code_resp=11 act_code_resp value
     * @property {number} world_cup_rank_reward_req=12 world_cup_rank_reward_req value
     * @property {number} world_cup_rank_reward_resp=13 world_cup_rank_reward_resp value
     * @property {number} world_cup_reward_notice_resp=14 world_cup_reward_notice_resp value
     * @property {number} world_cup_role_reward_req=15 world_cup_role_reward_req value
     * @property {number} world_cup_role_reward_resp=16 world_cup_role_reward_resp value
     * @property {number} world_cup_notice_resp=17 world_cup_notice_resp value
     * @property {number} valentine_notice_resp=18 valentine_notice_resp value
     * @property {number} nation_race_day_req=19 nation_race_day_req value
     * @property {number} nation_race_day_resp=20 nation_race_day_resp value
     * @property {number} nation_race_info_req=21 nation_race_info_req value
     * @property {number} nation_race_info_resp=22 nation_race_info_resp value
     * @property {number} nation_race_over_req=23 nation_race_over_req value
     * @property {number} nation_race_sign_resp=24 nation_race_sign_resp value
     * @property {number} nation_race_over_resp=25 nation_race_over_resp value
     * @property {number} nation_day_notice_resp=26 nation_day_notice_resp value
     * @property {number} nation_volume_add_resp=27 nation_volume_add_resp value
     * @property {number} nation_day_reward_resp=28 nation_day_reward_resp value
     * @property {number} yuandan_daily_req=29 yuandan_daily_req value
     * @property {number} yuandan_daily_resp=30 yuandan_daily_resp value
     * @property {number} yuandan_daily_reward_req=31 yuandan_daily_reward_req value
     * @property {number} yuandan_daily_reward_resp=32 yuandan_daily_reward_resp value
     * @property {number} yuandan_notice_resp=33 yuandan_notice_resp value
     * @property {number} yuandan_reward_notice_resp=34 yuandan_reward_notice_resp value
     * @property {number} top_12_notice_resp=35 top_12_notice_resp value
     */
    ActMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "act_list_req"] = 1;
        values[valuesById[2] = "act_list_resp"] = 2;
        values[valuesById[3] = "act_detail_info_req"] = 3;
        values[valuesById[4] = "act_detail_info_resp"] = 4;
        values[valuesById[5] = "red_bag_exchange_info_req"] = 5;
        values[valuesById[6] = "red_bag_exchange_info_resp"] = 6;
        values[valuesById[7] = "red_bag_exchange_req"] = 7;
        values[valuesById[8] = "red_bag_exchange_resp"] = 8;
        values[valuesById[9] = "red_bag_num_resp"] = 9;
        values[valuesById[10] = "red_bag_add_resp"] = 10;
        values[valuesById[11] = "act_code_resp"] = 11;
        values[valuesById[12] = "world_cup_rank_reward_req"] = 12;
        values[valuesById[13] = "world_cup_rank_reward_resp"] = 13;
        values[valuesById[14] = "world_cup_reward_notice_resp"] = 14;
        values[valuesById[15] = "world_cup_role_reward_req"] = 15;
        values[valuesById[16] = "world_cup_role_reward_resp"] = 16;
        values[valuesById[17] = "world_cup_notice_resp"] = 17;
        values[valuesById[18] = "valentine_notice_resp"] = 18;
        values[valuesById[19] = "nation_race_day_req"] = 19;
        values[valuesById[20] = "nation_race_day_resp"] = 20;
        values[valuesById[21] = "nation_race_info_req"] = 21;
        values[valuesById[22] = "nation_race_info_resp"] = 22;
        values[valuesById[23] = "nation_race_over_req"] = 23;
        values[valuesById[24] = "nation_race_sign_resp"] = 24;
        values[valuesById[25] = "nation_race_over_resp"] = 25;
        values[valuesById[26] = "nation_day_notice_resp"] = 26;
        values[valuesById[27] = "nation_volume_add_resp"] = 27;
        values[valuesById[28] = "nation_day_reward_resp"] = 28;
        values[valuesById[29] = "yuandan_daily_req"] = 29;
        values[valuesById[30] = "yuandan_daily_resp"] = 30;
        values[valuesById[31] = "yuandan_daily_reward_req"] = 31;
        values[valuesById[32] = "yuandan_daily_reward_resp"] = 32;
        values[valuesById[33] = "yuandan_notice_resp"] = 33;
        values[valuesById[34] = "yuandan_reward_notice_resp"] = 34;
        values[valuesById[35] = "top_12_notice_resp"] = 35;
        return values;
    })();

    ActMsg.msg_act_service = (function() {

        /**
         * Constructs a new msg_act_service service.
         * @memberof ActMsg
         * @classdesc Represents a msg_act_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_act_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_act_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_act_service;

        /**
         * Creates new msg_act_service service using the specified rpc implementation.
         * @function create
         * @memberof ActMsg.msg_act_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_act_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_act_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link ActMsg.msg_act_service#act_list}.
         * @memberof ActMsg.msg_act_service
         * @typedef act_listCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.act_list_resp} [response] act_list_resp
         */

        /**
         * Calls act_list.
         * @function act_list
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iact_list_req} request act_list_req message or plain object
         * @param {ActMsg.msg_act_service.act_listCallback} callback Node-style callback called with the error, if any, and act_list_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.act_list = function act_list(request, callback) {
            return this.rpcCall(act_list, $root.ActMsg.act_list_req, $root.ActMsg.act_list_resp, request, callback);
        }, "name", { value: "act_list" });

        /**
         * Calls act_list.
         * @function act_list
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iact_list_req} request act_list_req message or plain object
         * @returns {Promise<ActMsg.act_list_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#act_detail_info}.
         * @memberof ActMsg.msg_act_service
         * @typedef act_detail_infoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.act_detail_info_resp} [response] act_detail_info_resp
         */

        /**
         * Calls act_detail_info.
         * @function act_detail_info
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iact_detail_info_req} request act_detail_info_req message or plain object
         * @param {ActMsg.msg_act_service.act_detail_infoCallback} callback Node-style callback called with the error, if any, and act_detail_info_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.act_detail_info = function act_detail_info(request, callback) {
            return this.rpcCall(act_detail_info, $root.ActMsg.act_detail_info_req, $root.ActMsg.act_detail_info_resp, request, callback);
        }, "name", { value: "act_detail_info" });

        /**
         * Calls act_detail_info.
         * @function act_detail_info
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iact_detail_info_req} request act_detail_info_req message or plain object
         * @returns {Promise<ActMsg.act_detail_info_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#red_bag_exchange_info}.
         * @memberof ActMsg.msg_act_service
         * @typedef red_bag_exchange_infoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.red_bag_exchange_info_resp} [response] red_bag_exchange_info_resp
         */

        /**
         * Calls red_bag_exchange_info.
         * @function red_bag_exchange_info
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ired_bag_exchange_info_req} request red_bag_exchange_info_req message or plain object
         * @param {ActMsg.msg_act_service.red_bag_exchange_infoCallback} callback Node-style callback called with the error, if any, and red_bag_exchange_info_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.red_bag_exchange_info = function red_bag_exchange_info(request, callback) {
            return this.rpcCall(red_bag_exchange_info, $root.ActMsg.red_bag_exchange_info_req, $root.ActMsg.red_bag_exchange_info_resp, request, callback);
        }, "name", { value: "red_bag_exchange_info" });

        /**
         * Calls red_bag_exchange_info.
         * @function red_bag_exchange_info
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ired_bag_exchange_info_req} request red_bag_exchange_info_req message or plain object
         * @returns {Promise<ActMsg.red_bag_exchange_info_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#red_bag_exchange}.
         * @memberof ActMsg.msg_act_service
         * @typedef red_bag_exchangeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.red_bag_exchange_resp} [response] red_bag_exchange_resp
         */

        /**
         * Calls red_bag_exchange.
         * @function red_bag_exchange
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ired_bag_exchange_req} request red_bag_exchange_req message or plain object
         * @param {ActMsg.msg_act_service.red_bag_exchangeCallback} callback Node-style callback called with the error, if any, and red_bag_exchange_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.red_bag_exchange = function red_bag_exchange(request, callback) {
            return this.rpcCall(red_bag_exchange, $root.ActMsg.red_bag_exchange_req, $root.ActMsg.red_bag_exchange_resp, request, callback);
        }, "name", { value: "red_bag_exchange" });

        /**
         * Calls red_bag_exchange.
         * @function red_bag_exchange
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ired_bag_exchange_req} request red_bag_exchange_req message or plain object
         * @returns {Promise<ActMsg.red_bag_exchange_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#red_bag_num}.
         * @memberof ActMsg.msg_act_service
         * @typedef red_bag_numCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.red_bag_num_resp} [response] red_bag_num_resp
         */

        /**
         * Calls red_bag_num.
         * @function red_bag_num
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.red_bag_numCallback} callback Node-style callback called with the error, if any, and red_bag_num_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.red_bag_num = function red_bag_num(request, callback) {
            return this.rpcCall(red_bag_num, $root.CommonMsg.undefined, $root.ActMsg.red_bag_num_resp, request, callback);
        }, "name", { value: "red_bag_num" });

        /**
         * Calls red_bag_num.
         * @function red_bag_num
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.red_bag_num_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#red_bag_add}.
         * @memberof ActMsg.msg_act_service
         * @typedef red_bag_addCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.red_bag_add_resp} [response] red_bag_add_resp
         */

        /**
         * Calls red_bag_add.
         * @function red_bag_add
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.red_bag_addCallback} callback Node-style callback called with the error, if any, and red_bag_add_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.red_bag_add = function red_bag_add(request, callback) {
            return this.rpcCall(red_bag_add, $root.CommonMsg.undefined, $root.ActMsg.red_bag_add_resp, request, callback);
        }, "name", { value: "red_bag_add" });

        /**
         * Calls red_bag_add.
         * @function red_bag_add
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.red_bag_add_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#world_cup_rank_reward}.
         * @memberof ActMsg.msg_act_service
         * @typedef world_cup_rank_rewardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.world_cup_rank_reward_resp} [response] world_cup_rank_reward_resp
         */

        /**
         * Calls world_cup_rank_reward.
         * @function world_cup_rank_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iworld_cup_rank_reward_req} request world_cup_rank_reward_req message or plain object
         * @param {ActMsg.msg_act_service.world_cup_rank_rewardCallback} callback Node-style callback called with the error, if any, and world_cup_rank_reward_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.world_cup_rank_reward = function world_cup_rank_reward(request, callback) {
            return this.rpcCall(world_cup_rank_reward, $root.ActMsg.world_cup_rank_reward_req, $root.ActMsg.world_cup_rank_reward_resp, request, callback);
        }, "name", { value: "world_cup_rank_reward" });

        /**
         * Calls world_cup_rank_reward.
         * @function world_cup_rank_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iworld_cup_rank_reward_req} request world_cup_rank_reward_req message or plain object
         * @returns {Promise<ActMsg.world_cup_rank_reward_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#world_cup_reward_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef world_cup_reward_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.world_cup_reward_notice_resp} [response] world_cup_reward_notice_resp
         */

        /**
         * Calls world_cup_reward_notice.
         * @function world_cup_reward_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.world_cup_reward_noticeCallback} callback Node-style callback called with the error, if any, and world_cup_reward_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.world_cup_reward_notice = function world_cup_reward_notice(request, callback) {
            return this.rpcCall(world_cup_reward_notice, $root.CommonMsg.undefined, $root.ActMsg.world_cup_reward_notice_resp, request, callback);
        }, "name", { value: "world_cup_reward_notice" });

        /**
         * Calls world_cup_reward_notice.
         * @function world_cup_reward_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.world_cup_reward_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#world_cup_role_reward}.
         * @memberof ActMsg.msg_act_service
         * @typedef world_cup_role_rewardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.world_cup_role_reward_resp} [response] world_cup_role_reward_resp
         */

        /**
         * Calls world_cup_role_reward.
         * @function world_cup_role_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iworld_cup_role_reward_req} request world_cup_role_reward_req message or plain object
         * @param {ActMsg.msg_act_service.world_cup_role_rewardCallback} callback Node-style callback called with the error, if any, and world_cup_role_reward_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.world_cup_role_reward = function world_cup_role_reward(request, callback) {
            return this.rpcCall(world_cup_role_reward, $root.ActMsg.world_cup_role_reward_req, $root.ActMsg.world_cup_role_reward_resp, request, callback);
        }, "name", { value: "world_cup_role_reward" });

        /**
         * Calls world_cup_role_reward.
         * @function world_cup_role_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iworld_cup_role_reward_req} request world_cup_role_reward_req message or plain object
         * @returns {Promise<ActMsg.world_cup_role_reward_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#world_cup_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef world_cup_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.world_cup_notice_resp} [response] world_cup_notice_resp
         */

        /**
         * Calls world_cup_notice.
         * @function world_cup_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.world_cup_noticeCallback} callback Node-style callback called with the error, if any, and world_cup_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.world_cup_notice = function world_cup_notice(request, callback) {
            return this.rpcCall(world_cup_notice, $root.CommonMsg.undefined, $root.ActMsg.world_cup_notice_resp, request, callback);
        }, "name", { value: "world_cup_notice" });

        /**
         * Calls world_cup_notice.
         * @function world_cup_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.world_cup_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#valentine_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef valentine_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.valentine_notice_resp} [response] valentine_notice_resp
         */

        /**
         * Calls valentine_notice.
         * @function valentine_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.valentine_noticeCallback} callback Node-style callback called with the error, if any, and valentine_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.valentine_notice = function valentine_notice(request, callback) {
            return this.rpcCall(valentine_notice, $root.CommonMsg.undefined, $root.ActMsg.valentine_notice_resp, request, callback);
        }, "name", { value: "valentine_notice" });

        /**
         * Calls valentine_notice.
         * @function valentine_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.valentine_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_volume_add}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_volume_addCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_volume_add_resp} [response] nation_volume_add_resp
         */

        /**
         * Calls nation_volume_add.
         * @function nation_volume_add
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.nation_volume_addCallback} callback Node-style callback called with the error, if any, and nation_volume_add_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_volume_add = function nation_volume_add(request, callback) {
            return this.rpcCall(nation_volume_add, $root.CommonMsg.undefined, $root.ActMsg.nation_volume_add_resp, request, callback);
        }, "name", { value: "nation_volume_add" });

        /**
         * Calls nation_volume_add.
         * @function nation_volume_add
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.nation_volume_add_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_race_day}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_race_dayCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_race_day_resp} [response] nation_race_day_resp
         */

        /**
         * Calls nation_race_day.
         * @function nation_race_day
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ination_race_day_req} request nation_race_day_req message or plain object
         * @param {ActMsg.msg_act_service.nation_race_dayCallback} callback Node-style callback called with the error, if any, and nation_race_day_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_race_day = function nation_race_day(request, callback) {
            return this.rpcCall(nation_race_day, $root.ActMsg.nation_race_day_req, $root.ActMsg.nation_race_day_resp, request, callback);
        }, "name", { value: "nation_race_day" });

        /**
         * Calls nation_race_day.
         * @function nation_race_day
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ination_race_day_req} request nation_race_day_req message or plain object
         * @returns {Promise<ActMsg.nation_race_day_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_race_info}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_race_infoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_race_info_resp} [response] nation_race_info_resp
         */

        /**
         * Calls nation_race_info.
         * @function nation_race_info
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ination_race_info_req} request nation_race_info_req message or plain object
         * @param {ActMsg.msg_act_service.nation_race_infoCallback} callback Node-style callback called with the error, if any, and nation_race_info_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_race_info = function nation_race_info(request, callback) {
            return this.rpcCall(nation_race_info, $root.ActMsg.nation_race_info_req, $root.ActMsg.nation_race_info_resp, request, callback);
        }, "name", { value: "nation_race_info" });

        /**
         * Calls nation_race_info.
         * @function nation_race_info
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ination_race_info_req} request nation_race_info_req message or plain object
         * @returns {Promise<ActMsg.nation_race_info_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_race_over}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_race_overCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_race_over_resp} [response] nation_race_over_resp
         */

        /**
         * Calls nation_race_over.
         * @function nation_race_over
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ination_race_over_req} request nation_race_over_req message or plain object
         * @param {ActMsg.msg_act_service.nation_race_overCallback} callback Node-style callback called with the error, if any, and nation_race_over_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_race_over = function nation_race_over(request, callback) {
            return this.rpcCall(nation_race_over, $root.ActMsg.nation_race_over_req, $root.ActMsg.nation_race_over_resp, request, callback);
        }, "name", { value: "nation_race_over" });

        /**
         * Calls nation_race_over.
         * @function nation_race_over
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Ination_race_over_req} request nation_race_over_req message or plain object
         * @returns {Promise<ActMsg.nation_race_over_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_race_over_sign}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_race_over_signCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_race_sign_resp} [response] nation_race_sign_resp
         */

        /**
         * Calls nation_race_over_sign.
         * @function nation_race_over_sign
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.nation_race_over_signCallback} callback Node-style callback called with the error, if any, and nation_race_sign_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_race_over_sign = function nation_race_over_sign(request, callback) {
            return this.rpcCall(nation_race_over_sign, $root.CommonMsg.undefined, $root.ActMsg.nation_race_sign_resp, request, callback);
        }, "name", { value: "nation_race_over_sign" });

        /**
         * Calls nation_race_over_sign.
         * @function nation_race_over_sign
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.nation_race_sign_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_day_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_day_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_day_notice_resp} [response] nation_day_notice_resp
         */

        /**
         * Calls nation_day_notice.
         * @function nation_day_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.nation_day_noticeCallback} callback Node-style callback called with the error, if any, and nation_day_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_day_notice = function nation_day_notice(request, callback) {
            return this.rpcCall(nation_day_notice, $root.CommonMsg.undefined, $root.ActMsg.nation_day_notice_resp, request, callback);
        }, "name", { value: "nation_day_notice" });

        /**
         * Calls nation_day_notice.
         * @function nation_day_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.nation_day_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#nation_role_reward}.
         * @memberof ActMsg.msg_act_service
         * @typedef nation_role_rewardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.nation_day_reward_resp} [response] nation_day_reward_resp
         */

        /**
         * Calls nation_role_reward.
         * @function nation_role_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.nation_role_rewardCallback} callback Node-style callback called with the error, if any, and nation_day_reward_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.nation_role_reward = function nation_role_reward(request, callback) {
            return this.rpcCall(nation_role_reward, $root.CommonMsg.undefined, $root.ActMsg.nation_day_reward_resp, request, callback);
        }, "name", { value: "nation_role_reward" });

        /**
         * Calls nation_role_reward.
         * @function nation_role_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.nation_day_reward_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#yuandan_daily}.
         * @memberof ActMsg.msg_act_service
         * @typedef yuandan_dailyCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.yuandan_daily_resp} [response] yuandan_daily_resp
         */

        /**
         * Calls yuandan_daily.
         * @function yuandan_daily
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iyuandan_daily_req} request yuandan_daily_req message or plain object
         * @param {ActMsg.msg_act_service.yuandan_dailyCallback} callback Node-style callback called with the error, if any, and yuandan_daily_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.yuandan_daily = function yuandan_daily(request, callback) {
            return this.rpcCall(yuandan_daily, $root.ActMsg.yuandan_daily_req, $root.ActMsg.yuandan_daily_resp, request, callback);
        }, "name", { value: "yuandan_daily" });

        /**
         * Calls yuandan_daily.
         * @function yuandan_daily
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iyuandan_daily_req} request yuandan_daily_req message or plain object
         * @returns {Promise<ActMsg.yuandan_daily_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#yuandan_daily_reward}.
         * @memberof ActMsg.msg_act_service
         * @typedef yuandan_daily_rewardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.yuandan_daily_reward_resp} [response] yuandan_daily_reward_resp
         */

        /**
         * Calls yuandan_daily_reward.
         * @function yuandan_daily_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iyuandan_daily_reward_req} request yuandan_daily_reward_req message or plain object
         * @param {ActMsg.msg_act_service.yuandan_daily_rewardCallback} callback Node-style callback called with the error, if any, and yuandan_daily_reward_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.yuandan_daily_reward = function yuandan_daily_reward(request, callback) {
            return this.rpcCall(yuandan_daily_reward, $root.ActMsg.yuandan_daily_reward_req, $root.ActMsg.yuandan_daily_reward_resp, request, callback);
        }, "name", { value: "yuandan_daily_reward" });

        /**
         * Calls yuandan_daily_reward.
         * @function yuandan_daily_reward
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {ActMsg.Iyuandan_daily_reward_req} request yuandan_daily_reward_req message or plain object
         * @returns {Promise<ActMsg.yuandan_daily_reward_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#yuandan_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef yuandan_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.yuandan_notice_resp} [response] yuandan_notice_resp
         */

        /**
         * Calls yuandan_notice.
         * @function yuandan_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.yuandan_noticeCallback} callback Node-style callback called with the error, if any, and yuandan_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.yuandan_notice = function yuandan_notice(request, callback) {
            return this.rpcCall(yuandan_notice, $root.CommonMsg.undefined, $root.ActMsg.yuandan_notice_resp, request, callback);
        }, "name", { value: "yuandan_notice" });

        /**
         * Calls yuandan_notice.
         * @function yuandan_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.yuandan_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#yuandan_reward_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef yuandan_reward_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.yuandan_reward_notice_resp} [response] yuandan_reward_notice_resp
         */

        /**
         * Calls yuandan_reward_notice.
         * @function yuandan_reward_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.yuandan_reward_noticeCallback} callback Node-style callback called with the error, if any, and yuandan_reward_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.yuandan_reward_notice = function yuandan_reward_notice(request, callback) {
            return this.rpcCall(yuandan_reward_notice, $root.CommonMsg.undefined, $root.ActMsg.yuandan_reward_notice_resp, request, callback);
        }, "name", { value: "yuandan_reward_notice" });

        /**
         * Calls yuandan_reward_notice.
         * @function yuandan_reward_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.yuandan_reward_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ActMsg.msg_act_service#top_12_notice}.
         * @memberof ActMsg.msg_act_service
         * @typedef top_12_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ActMsg.top_12_notice_resp} [response] top_12_notice_resp
         */

        /**
         * Calls top_12_notice.
         * @function top_12_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ActMsg.msg_act_service.top_12_noticeCallback} callback Node-style callback called with the error, if any, and top_12_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_act_service.prototype.top_12_notice = function top_12_notice(request, callback) {
            return this.rpcCall(top_12_notice, $root.CommonMsg.undefined, $root.ActMsg.top_12_notice_resp, request, callback);
        }, "name", { value: "top_12_notice" });

        /**
         * Calls top_12_notice.
         * @function top_12_notice
         * @memberof ActMsg.msg_act_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ActMsg.top_12_notice_resp>} Promise
         * @variation 2
         */

        return msg_act_service;
    })();

    /**
     * act_code enum.
     * @name ActMsg.act_code
     * @enum {string}
     * @property {number} SUCCESS=1 SUCCESS value
     * @property {number} FAIL=2 FAIL value
     * @property {number} UNDEFINED=3 UNDEFINED value
     * @property {number} HAS_GET_REWARD=4 HAS_GET_REWARD value
     * @property {number} NO_THIS_REWARD=5 NO_THIS_REWARD value
     * @property {number} CAN_NOT_GET=6 CAN_NOT_GET value
     * @property {number} MAX_TIMES=7 MAX_TIMES value
     * @property {number} TREASURE_NO_NUM=8 TREASURE_NO_NUM value
     * @property {number} NO_ENOUGH_SCORE=9 NO_ENOUGH_SCORE value
     * @property {number} NO_INDEX=10 NO_INDEX value
     * @property {number} NOT_BETWEEN_TIME=11 NOT_BETWEEN_TIME value
     */
    ActMsg.act_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SUCCESS"] = 1;
        values[valuesById[2] = "FAIL"] = 2;
        values[valuesById[3] = "UNDEFINED"] = 3;
        values[valuesById[4] = "HAS_GET_REWARD"] = 4;
        values[valuesById[5] = "NO_THIS_REWARD"] = 5;
        values[valuesById[6] = "CAN_NOT_GET"] = 6;
        values[valuesById[7] = "MAX_TIMES"] = 7;
        values[valuesById[8] = "TREASURE_NO_NUM"] = 8;
        values[valuesById[9] = "NO_ENOUGH_SCORE"] = 9;
        values[valuesById[10] = "NO_INDEX"] = 10;
        values[valuesById[11] = "NOT_BETWEEN_TIME"] = 11;
        return values;
    })();

    ActMsg.act_list_req = (function() {

        /**
         * Properties of an act_list_req.
         * @memberof ActMsg
         * @interface Iact_list_req
         */

        /**
         * Constructs a new act_list_req.
         * @memberof ActMsg
         * @classdesc Represents an act_list_req.
         * @implements Iact_list_req
         * @constructor
         * @param {ActMsg.Iact_list_req=} [properties] Properties to set
         */
        function act_list_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new act_list_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.act_list_req
         * @static
         * @param {ActMsg.Iact_list_req=} [properties] Properties to set
         * @returns {ActMsg.act_list_req} act_list_req instance
         */
        act_list_req.create = function create(properties) {
            return new act_list_req(properties);
        };

        /**
         * Encodes the specified act_list_req message. Does not implicitly {@link ActMsg.act_list_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.act_list_req
         * @static
         * @param {ActMsg.Iact_list_req} message act_list_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_list_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified act_list_req message, length delimited. Does not implicitly {@link ActMsg.act_list_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.act_list_req
         * @static
         * @param {ActMsg.Iact_list_req} message act_list_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_list_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_list_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.act_list_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.act_list_req} act_list_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_list_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.act_list_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an act_list_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.act_list_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.act_list_req} act_list_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_list_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_list_req message.
         * @function verify
         * @memberof ActMsg.act_list_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_list_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return act_list_req;
    })();

    ActMsg.act_list_resp = (function() {

        /**
         * Properties of an act_list_resp.
         * @memberof ActMsg
         * @interface Iact_list_resp
         * @property {Array.<ActMsg.Iact_info>|null} [info] act_list_resp info
         */

        /**
         * Constructs a new act_list_resp.
         * @memberof ActMsg
         * @classdesc Represents an act_list_resp.
         * @implements Iact_list_resp
         * @constructor
         * @param {ActMsg.Iact_list_resp=} [properties] Properties to set
         */
        function act_list_resp(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_list_resp info.
         * @member {Array.<ActMsg.Iact_info>} info
         * @memberof ActMsg.act_list_resp
         * @instance
         */
        act_list_resp.prototype.info = $util.emptyArray;

        /**
         * Creates a new act_list_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.act_list_resp
         * @static
         * @param {ActMsg.Iact_list_resp=} [properties] Properties to set
         * @returns {ActMsg.act_list_resp} act_list_resp instance
         */
        act_list_resp.create = function create(properties) {
            return new act_list_resp(properties);
        };

        /**
         * Encodes the specified act_list_resp message. Does not implicitly {@link ActMsg.act_list_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.act_list_resp
         * @static
         * @param {ActMsg.Iact_list_resp} message act_list_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_list_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.ActMsg.act_info.encode(message.info[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified act_list_resp message, length delimited. Does not implicitly {@link ActMsg.act_list_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.act_list_resp
         * @static
         * @param {ActMsg.Iact_list_resp} message act_list_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_list_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_list_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.act_list_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.act_list_resp} act_list_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_list_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.act_list_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.ActMsg.act_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an act_list_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.act_list_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.act_list_resp} act_list_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_list_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_list_resp message.
         * @function verify
         * @memberof ActMsg.act_list_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_list_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.ActMsg.act_info.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            return null;
        };

        return act_list_resp;
    })();

    ActMsg.act_info = (function() {

        /**
         * Properties of an act_info.
         * @memberof ActMsg
         * @interface Iact_info
         * @property {number|Long} uid act_info uid
         * @property {number} type act_info type
         * @property {number} pos act_info pos
         * @property {number} show_start_time act_info show_start_time
         * @property {number} show_end_time act_info show_end_time
         * @property {number} start_time act_info start_time
         * @property {number} end_time act_info end_time
         * @property {number|null} [real_end_time] act_info real_end_time
         */

        /**
         * Constructs a new act_info.
         * @memberof ActMsg
         * @classdesc Represents an act_info.
         * @implements Iact_info
         * @constructor
         * @param {ActMsg.Iact_info=} [properties] Properties to set
         */
        function act_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_info uid.
         * @member {number|Long} uid
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * act_info type.
         * @member {number} type
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.type = 0;

        /**
         * act_info pos.
         * @member {number} pos
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.pos = 0;

        /**
         * act_info show_start_time.
         * @member {number} show_start_time
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.show_start_time = 0;

        /**
         * act_info show_end_time.
         * @member {number} show_end_time
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.show_end_time = 0;

        /**
         * act_info start_time.
         * @member {number} start_time
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.start_time = 0;

        /**
         * act_info end_time.
         * @member {number} end_time
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.end_time = 0;

        /**
         * act_info real_end_time.
         * @member {number} real_end_time
         * @memberof ActMsg.act_info
         * @instance
         */
        act_info.prototype.real_end_time = 0;

        /**
         * Creates a new act_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.act_info
         * @static
         * @param {ActMsg.Iact_info=} [properties] Properties to set
         * @returns {ActMsg.act_info} act_info instance
         */
        act_info.create = function create(properties) {
            return new act_info(properties);
        };

        /**
         * Encodes the specified act_info message. Does not implicitly {@link ActMsg.act_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.act_info
         * @static
         * @param {ActMsg.Iact_info} message act_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pos);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.show_start_time);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.show_end_time);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.start_time);
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.end_time);
            if (message.real_end_time != null && message.hasOwnProperty("real_end_time"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.real_end_time);
            return writer;
        };

        /**
         * Encodes the specified act_info message, length delimited. Does not implicitly {@link ActMsg.act_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.act_info
         * @static
         * @param {ActMsg.Iact_info} message act_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.act_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.act_info} act_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.act_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.type = reader.uint32();
                    break;
                case 3:
                    message.pos = reader.uint32();
                    break;
                case 4:
                    message.show_start_time = reader.uint32();
                    break;
                case 5:
                    message.show_end_time = reader.uint32();
                    break;
                case 6:
                    message.start_time = reader.uint32();
                    break;
                case 7:
                    message.end_time = reader.uint32();
                    break;
                case 8:
                    message.real_end_time = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("pos"))
                throw $util.ProtocolError("missing required 'pos'", { instance: message });
            if (!message.hasOwnProperty("show_start_time"))
                throw $util.ProtocolError("missing required 'show_start_time'", { instance: message });
            if (!message.hasOwnProperty("show_end_time"))
                throw $util.ProtocolError("missing required 'show_end_time'", { instance: message });
            if (!message.hasOwnProperty("start_time"))
                throw $util.ProtocolError("missing required 'start_time'", { instance: message });
            if (!message.hasOwnProperty("end_time"))
                throw $util.ProtocolError("missing required 'end_time'", { instance: message });
            return message;
        };

        /**
         * Decodes an act_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.act_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.act_info} act_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_info message.
         * @function verify
         * @memberof ActMsg.act_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
            if (!$util.isInteger(message.show_start_time))
                return "show_start_time: integer expected";
            if (!$util.isInteger(message.show_end_time))
                return "show_end_time: integer expected";
            if (!$util.isInteger(message.start_time))
                return "start_time: integer expected";
            if (!$util.isInteger(message.end_time))
                return "end_time: integer expected";
            if (message.real_end_time != null && message.hasOwnProperty("real_end_time"))
                if (!$util.isInteger(message.real_end_time))
                    return "real_end_time: integer expected";
            return null;
        };

        return act_info;
    })();

    ActMsg.act_code_resp = (function() {

        /**
         * Properties of an act_code_resp.
         * @memberof ActMsg
         * @interface Iact_code_resp
         * @property {ActMsg.act_code} code act_code_resp code
         */

        /**
         * Constructs a new act_code_resp.
         * @memberof ActMsg
         * @classdesc Represents an act_code_resp.
         * @implements Iact_code_resp
         * @constructor
         * @param {ActMsg.Iact_code_resp=} [properties] Properties to set
         */
        function act_code_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_code_resp code.
         * @member {ActMsg.act_code} code
         * @memberof ActMsg.act_code_resp
         * @instance
         */
        act_code_resp.prototype.code = 1;

        /**
         * Creates a new act_code_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.act_code_resp
         * @static
         * @param {ActMsg.Iact_code_resp=} [properties] Properties to set
         * @returns {ActMsg.act_code_resp} act_code_resp instance
         */
        act_code_resp.create = function create(properties) {
            return new act_code_resp(properties);
        };

        /**
         * Encodes the specified act_code_resp message. Does not implicitly {@link ActMsg.act_code_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.act_code_resp
         * @static
         * @param {ActMsg.Iact_code_resp} message act_code_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_code_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified act_code_resp message, length delimited. Does not implicitly {@link ActMsg.act_code_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.act_code_resp
         * @static
         * @param {ActMsg.Iact_code_resp} message act_code_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_code_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_code_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.act_code_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.act_code_resp} act_code_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_code_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.act_code_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes an act_code_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.act_code_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.act_code_resp} act_code_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_code_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_code_resp message.
         * @function verify
         * @memberof ActMsg.act_code_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_code_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
                break;
            }
            return null;
        };

        return act_code_resp;
    })();

    ActMsg.act_detail_info_req = (function() {

        /**
         * Properties of an act_detail_info_req.
         * @memberof ActMsg
         * @interface Iact_detail_info_req
         * @property {number|Long} uid act_detail_info_req uid
         */

        /**
         * Constructs a new act_detail_info_req.
         * @memberof ActMsg
         * @classdesc Represents an act_detail_info_req.
         * @implements Iact_detail_info_req
         * @constructor
         * @param {ActMsg.Iact_detail_info_req=} [properties] Properties to set
         */
        function act_detail_info_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_detail_info_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.act_detail_info_req
         * @instance
         */
        act_detail_info_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new act_detail_info_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.act_detail_info_req
         * @static
         * @param {ActMsg.Iact_detail_info_req=} [properties] Properties to set
         * @returns {ActMsg.act_detail_info_req} act_detail_info_req instance
         */
        act_detail_info_req.create = function create(properties) {
            return new act_detail_info_req(properties);
        };

        /**
         * Encodes the specified act_detail_info_req message. Does not implicitly {@link ActMsg.act_detail_info_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.act_detail_info_req
         * @static
         * @param {ActMsg.Iact_detail_info_req} message act_detail_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_detail_info_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified act_detail_info_req message, length delimited. Does not implicitly {@link ActMsg.act_detail_info_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.act_detail_info_req
         * @static
         * @param {ActMsg.Iact_detail_info_req} message act_detail_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_detail_info_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_detail_info_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.act_detail_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.act_detail_info_req} act_detail_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_detail_info_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.act_detail_info_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes an act_detail_info_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.act_detail_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.act_detail_info_req} act_detail_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_detail_info_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_detail_info_req message.
         * @function verify
         * @memberof ActMsg.act_detail_info_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_detail_info_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return act_detail_info_req;
    })();

    ActMsg.act_detail_info_resp = (function() {

        /**
         * Properties of an act_detail_info_resp.
         * @memberof ActMsg
         * @interface Iact_detail_info_resp
         * @property {number|Long} uid act_detail_info_resp uid
         * @property {number} exchange_start_time act_detail_info_resp exchange_start_time
         * @property {number} exchange_end_time act_detail_info_resp exchange_end_time
         * @property {string} name act_detail_info_resp name
         * @property {string} content act_detail_info_resp content
         * @property {string} content2 act_detail_info_resp content2
         * @property {ActMsg.Ired_bag_info|null} [red_bag] act_detail_info_resp red_bag
         * @property {ActMsg.Iworld_cup_info|null} [world_cup] act_detail_info_resp world_cup
         * @property {ActMsg.Ination_day_info|null} [nation_day] act_detail_info_resp nation_day
         * @property {ActMsg.Iyuandan_info|null} [yuandan] act_detail_info_resp yuandan
         */

        /**
         * Constructs a new act_detail_info_resp.
         * @memberof ActMsg
         * @classdesc Represents an act_detail_info_resp.
         * @implements Iact_detail_info_resp
         * @constructor
         * @param {ActMsg.Iact_detail_info_resp=} [properties] Properties to set
         */
        function act_detail_info_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_detail_info_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * act_detail_info_resp exchange_start_time.
         * @member {number} exchange_start_time
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.exchange_start_time = 0;

        /**
         * act_detail_info_resp exchange_end_time.
         * @member {number} exchange_end_time
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.exchange_end_time = 0;

        /**
         * act_detail_info_resp name.
         * @member {string} name
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.name = "";

        /**
         * act_detail_info_resp content.
         * @member {string} content
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.content = "";

        /**
         * act_detail_info_resp content2.
         * @member {string} content2
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.content2 = "";

        /**
         * act_detail_info_resp red_bag.
         * @member {ActMsg.Ired_bag_info|null|undefined} red_bag
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.red_bag = null;

        /**
         * act_detail_info_resp world_cup.
         * @member {ActMsg.Iworld_cup_info|null|undefined} world_cup
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.world_cup = null;

        /**
         * act_detail_info_resp nation_day.
         * @member {ActMsg.Ination_day_info|null|undefined} nation_day
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.nation_day = null;

        /**
         * act_detail_info_resp yuandan.
         * @member {ActMsg.Iyuandan_info|null|undefined} yuandan
         * @memberof ActMsg.act_detail_info_resp
         * @instance
         */
        act_detail_info_resp.prototype.yuandan = null;

        /**
         * Creates a new act_detail_info_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.act_detail_info_resp
         * @static
         * @param {ActMsg.Iact_detail_info_resp=} [properties] Properties to set
         * @returns {ActMsg.act_detail_info_resp} act_detail_info_resp instance
         */
        act_detail_info_resp.create = function create(properties) {
            return new act_detail_info_resp(properties);
        };

        /**
         * Encodes the specified act_detail_info_resp message. Does not implicitly {@link ActMsg.act_detail_info_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.act_detail_info_resp
         * @static
         * @param {ActMsg.Iact_detail_info_resp} message act_detail_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_detail_info_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.exchange_start_time);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.exchange_end_time);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.content);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.content2);
            if (message.red_bag != null && message.hasOwnProperty("red_bag"))
                $root.ActMsg.red_bag_info.encode(message.red_bag, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.world_cup != null && message.hasOwnProperty("world_cup"))
                $root.ActMsg.world_cup_info.encode(message.world_cup, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.nation_day != null && message.hasOwnProperty("nation_day"))
                $root.ActMsg.nation_day_info.encode(message.nation_day, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.yuandan != null && message.hasOwnProperty("yuandan"))
                $root.ActMsg.yuandan_info.encode(message.yuandan, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified act_detail_info_resp message, length delimited. Does not implicitly {@link ActMsg.act_detail_info_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.act_detail_info_resp
         * @static
         * @param {ActMsg.Iact_detail_info_resp} message act_detail_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_detail_info_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_detail_info_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.act_detail_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.act_detail_info_resp} act_detail_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_detail_info_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.act_detail_info_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.exchange_start_time = reader.uint32();
                    break;
                case 3:
                    message.exchange_end_time = reader.uint32();
                    break;
                case 4:
                    message.name = reader.string();
                    break;
                case 5:
                    message.content = reader.string();
                    break;
                case 6:
                    message.content2 = reader.string();
                    break;
                case 7:
                    message.red_bag = $root.ActMsg.red_bag_info.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.world_cup = $root.ActMsg.world_cup_info.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.nation_day = $root.ActMsg.nation_day_info.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.yuandan = $root.ActMsg.yuandan_info.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("exchange_start_time"))
                throw $util.ProtocolError("missing required 'exchange_start_time'", { instance: message });
            if (!message.hasOwnProperty("exchange_end_time"))
                throw $util.ProtocolError("missing required 'exchange_end_time'", { instance: message });
            if (!message.hasOwnProperty("name"))
                throw $util.ProtocolError("missing required 'name'", { instance: message });
            if (!message.hasOwnProperty("content"))
                throw $util.ProtocolError("missing required 'content'", { instance: message });
            if (!message.hasOwnProperty("content2"))
                throw $util.ProtocolError("missing required 'content2'", { instance: message });
            return message;
        };

        /**
         * Decodes an act_detail_info_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.act_detail_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.act_detail_info_resp} act_detail_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_detail_info_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_detail_info_resp message.
         * @function verify
         * @memberof ActMsg.act_detail_info_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_detail_info_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.exchange_start_time))
                return "exchange_start_time: integer expected";
            if (!$util.isInteger(message.exchange_end_time))
                return "exchange_end_time: integer expected";
            if (!$util.isString(message.name))
                return "name: string expected";
            if (!$util.isString(message.content))
                return "content: string expected";
            if (!$util.isString(message.content2))
                return "content2: string expected";
            if (message.red_bag != null && message.hasOwnProperty("red_bag")) {
                var error = $root.ActMsg.red_bag_info.verify(message.red_bag);
                if (error)
                    return "red_bag." + error;
            }
            if (message.world_cup != null && message.hasOwnProperty("world_cup")) {
                var error = $root.ActMsg.world_cup_info.verify(message.world_cup);
                if (error)
                    return "world_cup." + error;
            }
            if (message.nation_day != null && message.hasOwnProperty("nation_day")) {
                var error = $root.ActMsg.nation_day_info.verify(message.nation_day);
                if (error)
                    return "nation_day." + error;
            }
            if (message.yuandan != null && message.hasOwnProperty("yuandan")) {
                var error = $root.ActMsg.yuandan_info.verify(message.yuandan);
                if (error)
                    return "yuandan." + error;
            }
            return null;
        };

        return act_detail_info_resp;
    })();

    ActMsg.red_bag_exchange_info_req = (function() {

        /**
         * Properties of a red_bag_exchange_info_req.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_info_req
         * @property {number|Long} uid red_bag_exchange_info_req uid
         */

        /**
         * Constructs a new red_bag_exchange_info_req.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_info_req.
         * @implements Ired_bag_exchange_info_req
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_info_req=} [properties] Properties to set
         */
        function red_bag_exchange_info_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_info_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.red_bag_exchange_info_req
         * @instance
         */
        red_bag_exchange_info_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new red_bag_exchange_info_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_info_req
         * @static
         * @param {ActMsg.Ired_bag_exchange_info_req=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_info_req} red_bag_exchange_info_req instance
         */
        red_bag_exchange_info_req.create = function create(properties) {
            return new red_bag_exchange_info_req(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_info_req message. Does not implicitly {@link ActMsg.red_bag_exchange_info_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_info_req
         * @static
         * @param {ActMsg.Ired_bag_exchange_info_req} message red_bag_exchange_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_info_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_info_req message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_info_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_info_req
         * @static
         * @param {ActMsg.Ired_bag_exchange_info_req} message red_bag_exchange_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_info_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_info_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_info_req} red_bag_exchange_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_info_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_info_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_info_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_info_req} red_bag_exchange_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_info_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_info_req message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_info_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_info_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return red_bag_exchange_info_req;
    })();

    ActMsg.red_bag_exchange_info_resp = (function() {

        /**
         * Properties of a red_bag_exchange_info_resp.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_info_resp
         * @property {number|Long} uid red_bag_exchange_info_resp uid
         * @property {ActMsg.Ired_bag_exchange_info} info red_bag_exchange_info_resp info
         */

        /**
         * Constructs a new red_bag_exchange_info_resp.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_info_resp.
         * @implements Ired_bag_exchange_info_resp
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_info_resp=} [properties] Properties to set
         */
        function red_bag_exchange_info_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_info_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @instance
         */
        red_bag_exchange_info_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_exchange_info_resp info.
         * @member {ActMsg.Ired_bag_exchange_info} info
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @instance
         */
        red_bag_exchange_info_resp.prototype.info = null;

        /**
         * Creates a new red_bag_exchange_info_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @static
         * @param {ActMsg.Ired_bag_exchange_info_resp=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_info_resp} red_bag_exchange_info_resp instance
         */
        red_bag_exchange_info_resp.create = function create(properties) {
            return new red_bag_exchange_info_resp(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_info_resp message. Does not implicitly {@link ActMsg.red_bag_exchange_info_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @static
         * @param {ActMsg.Ired_bag_exchange_info_resp} message red_bag_exchange_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_info_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            $root.ActMsg.red_bag_exchange_info.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_info_resp message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_info_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @static
         * @param {ActMsg.Ired_bag_exchange_info_resp} message red_bag_exchange_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_info_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_info_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_info_resp} red_bag_exchange_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_info_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_info_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.info = $root.ActMsg.red_bag_exchange_info.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("info"))
                throw $util.ProtocolError("missing required 'info'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_info_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_info_resp} red_bag_exchange_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_info_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_info_resp message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_info_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_info_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            {
                var error = $root.ActMsg.red_bag_exchange_info.verify(message.info);
                if (error)
                    return "info." + error;
            }
            return null;
        };

        return red_bag_exchange_info_resp;
    })();

    ActMsg.red_bag_exchange_req = (function() {

        /**
         * Properties of a red_bag_exchange_req.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_req
         * @property {number|Long} uid red_bag_exchange_req uid
         * @property {number} need red_bag_exchange_req need
         */

        /**
         * Constructs a new red_bag_exchange_req.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_req.
         * @implements Ired_bag_exchange_req
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_req=} [properties] Properties to set
         */
        function red_bag_exchange_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.red_bag_exchange_req
         * @instance
         */
        red_bag_exchange_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_exchange_req need.
         * @member {number} need
         * @memberof ActMsg.red_bag_exchange_req
         * @instance
         */
        red_bag_exchange_req.prototype.need = 0;

        /**
         * Creates a new red_bag_exchange_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_req
         * @static
         * @param {ActMsg.Ired_bag_exchange_req=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_req} red_bag_exchange_req instance
         */
        red_bag_exchange_req.create = function create(properties) {
            return new red_bag_exchange_req(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_req message. Does not implicitly {@link ActMsg.red_bag_exchange_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_req
         * @static
         * @param {ActMsg.Ired_bag_exchange_req} message red_bag_exchange_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.need);
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_req message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_req
         * @static
         * @param {ActMsg.Ired_bag_exchange_req} message red_bag_exchange_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_req} red_bag_exchange_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.need = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("need"))
                throw $util.ProtocolError("missing required 'need'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_req} red_bag_exchange_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_req message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.need))
                return "need: integer expected";
            return null;
        };

        return red_bag_exchange_req;
    })();

    ActMsg.red_bag_exchange_resp = (function() {

        /**
         * Properties of a red_bag_exchange_resp.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_resp
         * @property {number|Long} uid red_bag_exchange_resp uid
         * @property {number|Long} chips red_bag_exchange_resp chips
         * @property {number} red_bag red_bag_exchange_resp red_bag
         * @property {number} red_bag_exist red_bag_exchange_resp red_bag_exist
         * @property {Array.<ActMsg.Ired_bag_exchange_record>|null} [record_list] red_bag_exchange_resp record_list
         */

        /**
         * Constructs a new red_bag_exchange_resp.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_resp.
         * @implements Ired_bag_exchange_resp
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_resp=} [properties] Properties to set
         */
        function red_bag_exchange_resp(properties) {
            this.record_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.red_bag_exchange_resp
         * @instance
         */
        red_bag_exchange_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_exchange_resp chips.
         * @member {number|Long} chips
         * @memberof ActMsg.red_bag_exchange_resp
         * @instance
         */
        red_bag_exchange_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_exchange_resp red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_exchange_resp
         * @instance
         */
        red_bag_exchange_resp.prototype.red_bag = 0;

        /**
         * red_bag_exchange_resp red_bag_exist.
         * @member {number} red_bag_exist
         * @memberof ActMsg.red_bag_exchange_resp
         * @instance
         */
        red_bag_exchange_resp.prototype.red_bag_exist = 0;

        /**
         * red_bag_exchange_resp record_list.
         * @member {Array.<ActMsg.Ired_bag_exchange_record>} record_list
         * @memberof ActMsg.red_bag_exchange_resp
         * @instance
         */
        red_bag_exchange_resp.prototype.record_list = $util.emptyArray;

        /**
         * Creates a new red_bag_exchange_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_resp
         * @static
         * @param {ActMsg.Ired_bag_exchange_resp=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_resp} red_bag_exchange_resp instance
         */
        red_bag_exchange_resp.create = function create(properties) {
            return new red_bag_exchange_resp(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_resp message. Does not implicitly {@link ActMsg.red_bag_exchange_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_resp
         * @static
         * @param {ActMsg.Ired_bag_exchange_resp} message red_bag_exchange_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.chips);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.red_bag);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.red_bag_exist);
            if (message.record_list != null && message.record_list.length)
                for (var i = 0; i < message.record_list.length; ++i)
                    $root.ActMsg.red_bag_exchange_record.encode(message.record_list[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_resp message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_resp
         * @static
         * @param {ActMsg.Ired_bag_exchange_resp} message red_bag_exchange_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_resp} red_bag_exchange_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.chips = reader.uint64();
                    break;
                case 3:
                    message.red_bag = reader.uint32();
                    break;
                case 4:
                    message.red_bag_exist = reader.uint32();
                    break;
                case 5:
                    if (!(message.record_list && message.record_list.length))
                        message.record_list = [];
                    message.record_list.push($root.ActMsg.red_bag_exchange_record.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            if (!message.hasOwnProperty("red_bag_exist"))
                throw $util.ProtocolError("missing required 'red_bag_exist'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_resp} red_bag_exchange_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_resp message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            if (!$util.isInteger(message.red_bag_exist))
                return "red_bag_exist: integer expected";
            if (message.record_list != null && message.hasOwnProperty("record_list")) {
                if (!Array.isArray(message.record_list))
                    return "record_list: array expected";
                for (var i = 0; i < message.record_list.length; ++i) {
                    var error = $root.ActMsg.red_bag_exchange_record.verify(message.record_list[i]);
                    if (error)
                        return "record_list." + error;
                }
            }
            return null;
        };

        return red_bag_exchange_resp;
    })();

    ActMsg.red_bag_num_resp = (function() {

        /**
         * Properties of a red_bag_num_resp.
         * @memberof ActMsg
         * @interface Ired_bag_num_resp
         * @property {number|Long} uid red_bag_num_resp uid
         * @property {number} red_bag red_bag_num_resp red_bag
         * @property {number} red_bag_exist red_bag_num_resp red_bag_exist
         */

        /**
         * Constructs a new red_bag_num_resp.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_num_resp.
         * @implements Ired_bag_num_resp
         * @constructor
         * @param {ActMsg.Ired_bag_num_resp=} [properties] Properties to set
         */
        function red_bag_num_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_num_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.red_bag_num_resp
         * @instance
         */
        red_bag_num_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_num_resp red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_num_resp
         * @instance
         */
        red_bag_num_resp.prototype.red_bag = 0;

        /**
         * red_bag_num_resp red_bag_exist.
         * @member {number} red_bag_exist
         * @memberof ActMsg.red_bag_num_resp
         * @instance
         */
        red_bag_num_resp.prototype.red_bag_exist = 0;

        /**
         * Creates a new red_bag_num_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_num_resp
         * @static
         * @param {ActMsg.Ired_bag_num_resp=} [properties] Properties to set
         * @returns {ActMsg.red_bag_num_resp} red_bag_num_resp instance
         */
        red_bag_num_resp.create = function create(properties) {
            return new red_bag_num_resp(properties);
        };

        /**
         * Encodes the specified red_bag_num_resp message. Does not implicitly {@link ActMsg.red_bag_num_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_num_resp
         * @static
         * @param {ActMsg.Ired_bag_num_resp} message red_bag_num_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_num_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.red_bag);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.red_bag_exist);
            return writer;
        };

        /**
         * Encodes the specified red_bag_num_resp message, length delimited. Does not implicitly {@link ActMsg.red_bag_num_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_num_resp
         * @static
         * @param {ActMsg.Ired_bag_num_resp} message red_bag_num_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_num_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_num_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_num_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_num_resp} red_bag_num_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_num_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_num_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.red_bag = reader.uint32();
                    break;
                case 3:
                    message.red_bag_exist = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            if (!message.hasOwnProperty("red_bag_exist"))
                throw $util.ProtocolError("missing required 'red_bag_exist'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_num_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_num_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_num_resp} red_bag_num_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_num_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_num_resp message.
         * @function verify
         * @memberof ActMsg.red_bag_num_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_num_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            if (!$util.isInteger(message.red_bag_exist))
                return "red_bag_exist: integer expected";
            return null;
        };

        return red_bag_num_resp;
    })();

    ActMsg.red_bag_add_resp = (function() {

        /**
         * Properties of a red_bag_add_resp.
         * @memberof ActMsg
         * @interface Ired_bag_add_resp
         * @property {number|Long} uid red_bag_add_resp uid
         * @property {number|Long} act_uid red_bag_add_resp act_uid
         * @property {number} red_bag red_bag_add_resp red_bag
         */

        /**
         * Constructs a new red_bag_add_resp.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_add_resp.
         * @implements Ired_bag_add_resp
         * @constructor
         * @param {ActMsg.Ired_bag_add_resp=} [properties] Properties to set
         */
        function red_bag_add_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_add_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.red_bag_add_resp
         * @instance
         */
        red_bag_add_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_add_resp act_uid.
         * @member {number|Long} act_uid
         * @memberof ActMsg.red_bag_add_resp
         * @instance
         */
        red_bag_add_resp.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_add_resp red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_add_resp
         * @instance
         */
        red_bag_add_resp.prototype.red_bag = 0;

        /**
         * Creates a new red_bag_add_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_add_resp
         * @static
         * @param {ActMsg.Ired_bag_add_resp=} [properties] Properties to set
         * @returns {ActMsg.red_bag_add_resp} red_bag_add_resp instance
         */
        red_bag_add_resp.create = function create(properties) {
            return new red_bag_add_resp(properties);
        };

        /**
         * Encodes the specified red_bag_add_resp message. Does not implicitly {@link ActMsg.red_bag_add_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_add_resp
         * @static
         * @param {ActMsg.Ired_bag_add_resp} message red_bag_add_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_add_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.act_uid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.red_bag);
            return writer;
        };

        /**
         * Encodes the specified red_bag_add_resp message, length delimited. Does not implicitly {@link ActMsg.red_bag_add_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_add_resp
         * @static
         * @param {ActMsg.Ired_bag_add_resp} message red_bag_add_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_add_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_add_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_add_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_add_resp} red_bag_add_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_add_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_add_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.act_uid = reader.uint64();
                    break;
                case 3:
                    message.red_bag = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_add_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_add_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_add_resp} red_bag_add_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_add_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_add_resp message.
         * @function verify
         * @memberof ActMsg.red_bag_add_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_add_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            return null;
        };

        return red_bag_add_resp;
    })();

    ActMsg.red_bag_info = (function() {

        /**
         * Properties of a red_bag_info.
         * @memberof ActMsg
         * @interface Ired_bag_info
         * @property {number} red_bag red_bag_info red_bag
         * @property {number} red_bag_exist red_bag_info red_bag_exist
         * @property {number|Long} red_bag_exge_chips red_bag_info red_bag_exge_chips
         * @property {number} rank red_bag_info rank
         * @property {number|Long} rank_chips red_bag_info rank_chips
         * @property {Array.<ActMsg.Ired_bag_rank_info>|null} [rank_list] red_bag_info rank_list
         */

        /**
         * Constructs a new red_bag_info.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_info.
         * @implements Ired_bag_info
         * @constructor
         * @param {ActMsg.Ired_bag_info=} [properties] Properties to set
         */
        function red_bag_info(properties) {
            this.rank_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_info red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_info
         * @instance
         */
        red_bag_info.prototype.red_bag = 0;

        /**
         * red_bag_info red_bag_exist.
         * @member {number} red_bag_exist
         * @memberof ActMsg.red_bag_info
         * @instance
         */
        red_bag_info.prototype.red_bag_exist = 0;

        /**
         * red_bag_info red_bag_exge_chips.
         * @member {number|Long} red_bag_exge_chips
         * @memberof ActMsg.red_bag_info
         * @instance
         */
        red_bag_info.prototype.red_bag_exge_chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_info rank.
         * @member {number} rank
         * @memberof ActMsg.red_bag_info
         * @instance
         */
        red_bag_info.prototype.rank = 0;

        /**
         * red_bag_info rank_chips.
         * @member {number|Long} rank_chips
         * @memberof ActMsg.red_bag_info
         * @instance
         */
        red_bag_info.prototype.rank_chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_info rank_list.
         * @member {Array.<ActMsg.Ired_bag_rank_info>} rank_list
         * @memberof ActMsg.red_bag_info
         * @instance
         */
        red_bag_info.prototype.rank_list = $util.emptyArray;

        /**
         * Creates a new red_bag_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_info
         * @static
         * @param {ActMsg.Ired_bag_info=} [properties] Properties to set
         * @returns {ActMsg.red_bag_info} red_bag_info instance
         */
        red_bag_info.create = function create(properties) {
            return new red_bag_info(properties);
        };

        /**
         * Encodes the specified red_bag_info message. Does not implicitly {@link ActMsg.red_bag_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_info
         * @static
         * @param {ActMsg.Ired_bag_info} message red_bag_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.red_bag);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.red_bag_exist);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.red_bag_exge_chips);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rank);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.rank_chips);
            if (message.rank_list != null && message.rank_list.length)
                for (var i = 0; i < message.rank_list.length; ++i)
                    $root.ActMsg.red_bag_rank_info.encode(message.rank_list[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified red_bag_info message, length delimited. Does not implicitly {@link ActMsg.red_bag_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_info
         * @static
         * @param {ActMsg.Ired_bag_info} message red_bag_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_info} red_bag_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.red_bag = reader.uint32();
                    break;
                case 2:
                    message.red_bag_exist = reader.uint32();
                    break;
                case 3:
                    message.red_bag_exge_chips = reader.uint64();
                    break;
                case 4:
                    message.rank = reader.uint32();
                    break;
                case 5:
                    message.rank_chips = reader.uint64();
                    break;
                case 6:
                    if (!(message.rank_list && message.rank_list.length))
                        message.rank_list = [];
                    message.rank_list.push($root.ActMsg.red_bag_rank_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            if (!message.hasOwnProperty("red_bag_exist"))
                throw $util.ProtocolError("missing required 'red_bag_exist'", { instance: message });
            if (!message.hasOwnProperty("red_bag_exge_chips"))
                throw $util.ProtocolError("missing required 'red_bag_exge_chips'", { instance: message });
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("rank_chips"))
                throw $util.ProtocolError("missing required 'rank_chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_info} red_bag_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_info message.
         * @function verify
         * @memberof ActMsg.red_bag_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            if (!$util.isInteger(message.red_bag_exist))
                return "red_bag_exist: integer expected";
            if (!$util.isInteger(message.red_bag_exge_chips) && !(message.red_bag_exge_chips && $util.isInteger(message.red_bag_exge_chips.low) && $util.isInteger(message.red_bag_exge_chips.high)))
                return "red_bag_exge_chips: integer|Long expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.rank_chips) && !(message.rank_chips && $util.isInteger(message.rank_chips.low) && $util.isInteger(message.rank_chips.high)))
                return "rank_chips: integer|Long expected";
            if (message.rank_list != null && message.hasOwnProperty("rank_list")) {
                if (!Array.isArray(message.rank_list))
                    return "rank_list: array expected";
                for (var i = 0; i < message.rank_list.length; ++i) {
                    var error = $root.ActMsg.red_bag_rank_info.verify(message.rank_list[i]);
                    if (error)
                        return "rank_list." + error;
                }
            }
            return null;
        };

        return red_bag_info;
    })();

    ActMsg.red_bag_rank_info = (function() {

        /**
         * Properties of a red_bag_rank_info.
         * @memberof ActMsg
         * @interface Ired_bag_rank_info
         * @property {string} nickname red_bag_rank_info nickname
         * @property {number} red_bag red_bag_rank_info red_bag
         * @property {number|Long} chips red_bag_rank_info chips
         */

        /**
         * Constructs a new red_bag_rank_info.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_rank_info.
         * @implements Ired_bag_rank_info
         * @constructor
         * @param {ActMsg.Ired_bag_rank_info=} [properties] Properties to set
         */
        function red_bag_rank_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_rank_info nickname.
         * @member {string} nickname
         * @memberof ActMsg.red_bag_rank_info
         * @instance
         */
        red_bag_rank_info.prototype.nickname = "";

        /**
         * red_bag_rank_info red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_rank_info
         * @instance
         */
        red_bag_rank_info.prototype.red_bag = 0;

        /**
         * red_bag_rank_info chips.
         * @member {number|Long} chips
         * @memberof ActMsg.red_bag_rank_info
         * @instance
         */
        red_bag_rank_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new red_bag_rank_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_rank_info
         * @static
         * @param {ActMsg.Ired_bag_rank_info=} [properties] Properties to set
         * @returns {ActMsg.red_bag_rank_info} red_bag_rank_info instance
         */
        red_bag_rank_info.create = function create(properties) {
            return new red_bag_rank_info(properties);
        };

        /**
         * Encodes the specified red_bag_rank_info message. Does not implicitly {@link ActMsg.red_bag_rank_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_rank_info
         * @static
         * @param {ActMsg.Ired_bag_rank_info} message red_bag_rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_rank_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nickname);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.red_bag);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chips);
            return writer;
        };

        /**
         * Encodes the specified red_bag_rank_info message, length delimited. Does not implicitly {@link ActMsg.red_bag_rank_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_rank_info
         * @static
         * @param {ActMsg.Ired_bag_rank_info} message red_bag_rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_rank_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_rank_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_rank_info} red_bag_rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_rank_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_rank_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.nickname = reader.string();
                    break;
                case 2:
                    message.red_bag = reader.uint32();
                    break;
                case 3:
                    message.chips = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_rank_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_rank_info} red_bag_rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_rank_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_rank_info message.
         * @function verify
         * @memberof ActMsg.red_bag_rank_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_rank_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            return null;
        };

        return red_bag_rank_info;
    })();

    ActMsg.red_bag_exchange_info = (function() {

        /**
         * Properties of a red_bag_exchange_info.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_info
         * @property {number} red_bag red_bag_exchange_info red_bag
         * @property {number} red_bag_exist red_bag_exchange_info red_bag_exist
         * @property {Array.<ActMsg.Ired_bag_exchange_setting>|null} [settings] red_bag_exchange_info settings
         * @property {Array.<ActMsg.Ired_bag_exchange_record>|null} [record_list] red_bag_exchange_info record_list
         */

        /**
         * Constructs a new red_bag_exchange_info.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_info.
         * @implements Ired_bag_exchange_info
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_info=} [properties] Properties to set
         */
        function red_bag_exchange_info(properties) {
            this.settings = [];
            this.record_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_info red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_exchange_info
         * @instance
         */
        red_bag_exchange_info.prototype.red_bag = 0;

        /**
         * red_bag_exchange_info red_bag_exist.
         * @member {number} red_bag_exist
         * @memberof ActMsg.red_bag_exchange_info
         * @instance
         */
        red_bag_exchange_info.prototype.red_bag_exist = 0;

        /**
         * red_bag_exchange_info settings.
         * @member {Array.<ActMsg.Ired_bag_exchange_setting>} settings
         * @memberof ActMsg.red_bag_exchange_info
         * @instance
         */
        red_bag_exchange_info.prototype.settings = $util.emptyArray;

        /**
         * red_bag_exchange_info record_list.
         * @member {Array.<ActMsg.Ired_bag_exchange_record>} record_list
         * @memberof ActMsg.red_bag_exchange_info
         * @instance
         */
        red_bag_exchange_info.prototype.record_list = $util.emptyArray;

        /**
         * Creates a new red_bag_exchange_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_info
         * @static
         * @param {ActMsg.Ired_bag_exchange_info=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_info} red_bag_exchange_info instance
         */
        red_bag_exchange_info.create = function create(properties) {
            return new red_bag_exchange_info(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_info message. Does not implicitly {@link ActMsg.red_bag_exchange_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_info
         * @static
         * @param {ActMsg.Ired_bag_exchange_info} message red_bag_exchange_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.red_bag);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.red_bag_exist);
            if (message.settings != null && message.settings.length)
                for (var i = 0; i < message.settings.length; ++i)
                    $root.ActMsg.red_bag_exchange_setting.encode(message.settings[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.record_list != null && message.record_list.length)
                for (var i = 0; i < message.record_list.length; ++i)
                    $root.ActMsg.red_bag_exchange_record.encode(message.record_list[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_info message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_info
         * @static
         * @param {ActMsg.Ired_bag_exchange_info} message red_bag_exchange_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_info} red_bag_exchange_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.red_bag = reader.uint32();
                    break;
                case 2:
                    message.red_bag_exist = reader.uint32();
                    break;
                case 3:
                    if (!(message.settings && message.settings.length))
                        message.settings = [];
                    message.settings.push($root.ActMsg.red_bag_exchange_setting.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.record_list && message.record_list.length))
                        message.record_list = [];
                    message.record_list.push($root.ActMsg.red_bag_exchange_record.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            if (!message.hasOwnProperty("red_bag_exist"))
                throw $util.ProtocolError("missing required 'red_bag_exist'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_info} red_bag_exchange_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_info message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            if (!$util.isInteger(message.red_bag_exist))
                return "red_bag_exist: integer expected";
            if (message.settings != null && message.hasOwnProperty("settings")) {
                if (!Array.isArray(message.settings))
                    return "settings: array expected";
                for (var i = 0; i < message.settings.length; ++i) {
                    var error = $root.ActMsg.red_bag_exchange_setting.verify(message.settings[i]);
                    if (error)
                        return "settings." + error;
                }
            }
            if (message.record_list != null && message.hasOwnProperty("record_list")) {
                if (!Array.isArray(message.record_list))
                    return "record_list: array expected";
                for (var i = 0; i < message.record_list.length; ++i) {
                    var error = $root.ActMsg.red_bag_exchange_record.verify(message.record_list[i]);
                    if (error)
                        return "record_list." + error;
                }
            }
            return null;
        };

        return red_bag_exchange_info;
    })();

    ActMsg.red_bag_exchange_setting = (function() {

        /**
         * Properties of a red_bag_exchange_setting.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_setting
         * @property {string} name red_bag_exchange_setting name
         * @property {number} need red_bag_exchange_setting need
         * @property {number} min red_bag_exchange_setting min
         * @property {number} max red_bag_exchange_setting max
         */

        /**
         * Constructs a new red_bag_exchange_setting.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_setting.
         * @implements Ired_bag_exchange_setting
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_setting=} [properties] Properties to set
         */
        function red_bag_exchange_setting(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_setting name.
         * @member {string} name
         * @memberof ActMsg.red_bag_exchange_setting
         * @instance
         */
        red_bag_exchange_setting.prototype.name = "";

        /**
         * red_bag_exchange_setting need.
         * @member {number} need
         * @memberof ActMsg.red_bag_exchange_setting
         * @instance
         */
        red_bag_exchange_setting.prototype.need = 0;

        /**
         * red_bag_exchange_setting min.
         * @member {number} min
         * @memberof ActMsg.red_bag_exchange_setting
         * @instance
         */
        red_bag_exchange_setting.prototype.min = 0;

        /**
         * red_bag_exchange_setting max.
         * @member {number} max
         * @memberof ActMsg.red_bag_exchange_setting
         * @instance
         */
        red_bag_exchange_setting.prototype.max = 0;

        /**
         * Creates a new red_bag_exchange_setting instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_setting
         * @static
         * @param {ActMsg.Ired_bag_exchange_setting=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_setting} red_bag_exchange_setting instance
         */
        red_bag_exchange_setting.create = function create(properties) {
            return new red_bag_exchange_setting(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_setting message. Does not implicitly {@link ActMsg.red_bag_exchange_setting.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_setting
         * @static
         * @param {ActMsg.Ired_bag_exchange_setting} message red_bag_exchange_setting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_setting.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.need);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.min);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.max);
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_setting message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_setting.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_setting
         * @static
         * @param {ActMsg.Ired_bag_exchange_setting} message red_bag_exchange_setting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_setting.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_setting message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_setting
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_setting} red_bag_exchange_setting
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_setting.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_setting();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.need = reader.uint32();
                    break;
                case 3:
                    message.min = reader.uint32();
                    break;
                case 4:
                    message.max = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("name"))
                throw $util.ProtocolError("missing required 'name'", { instance: message });
            if (!message.hasOwnProperty("need"))
                throw $util.ProtocolError("missing required 'need'", { instance: message });
            if (!message.hasOwnProperty("min"))
                throw $util.ProtocolError("missing required 'min'", { instance: message });
            if (!message.hasOwnProperty("max"))
                throw $util.ProtocolError("missing required 'max'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_setting message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_setting
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_setting} red_bag_exchange_setting
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_setting.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_setting message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_setting
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_setting.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.name))
                return "name: string expected";
            if (!$util.isInteger(message.need))
                return "need: integer expected";
            if (!$util.isInteger(message.min))
                return "min: integer expected";
            if (!$util.isInteger(message.max))
                return "max: integer expected";
            return null;
        };

        return red_bag_exchange_setting;
    })();

    ActMsg.red_bag_exchange_record = (function() {

        /**
         * Properties of a red_bag_exchange_record.
         * @memberof ActMsg
         * @interface Ired_bag_exchange_record
         * @property {string|null} [nickname] red_bag_exchange_record nickname
         * @property {number} red_bag red_bag_exchange_record red_bag
         * @property {number|Long} chips red_bag_exchange_record chips
         * @property {number} time red_bag_exchange_record time
         */

        /**
         * Constructs a new red_bag_exchange_record.
         * @memberof ActMsg
         * @classdesc Represents a red_bag_exchange_record.
         * @implements Ired_bag_exchange_record
         * @constructor
         * @param {ActMsg.Ired_bag_exchange_record=} [properties] Properties to set
         */
        function red_bag_exchange_record(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * red_bag_exchange_record nickname.
         * @member {string} nickname
         * @memberof ActMsg.red_bag_exchange_record
         * @instance
         */
        red_bag_exchange_record.prototype.nickname = "";

        /**
         * red_bag_exchange_record red_bag.
         * @member {number} red_bag
         * @memberof ActMsg.red_bag_exchange_record
         * @instance
         */
        red_bag_exchange_record.prototype.red_bag = 0;

        /**
         * red_bag_exchange_record chips.
         * @member {number|Long} chips
         * @memberof ActMsg.red_bag_exchange_record
         * @instance
         */
        red_bag_exchange_record.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * red_bag_exchange_record time.
         * @member {number} time
         * @memberof ActMsg.red_bag_exchange_record
         * @instance
         */
        red_bag_exchange_record.prototype.time = 0;

        /**
         * Creates a new red_bag_exchange_record instance using the specified properties.
         * @function create
         * @memberof ActMsg.red_bag_exchange_record
         * @static
         * @param {ActMsg.Ired_bag_exchange_record=} [properties] Properties to set
         * @returns {ActMsg.red_bag_exchange_record} red_bag_exchange_record instance
         */
        red_bag_exchange_record.create = function create(properties) {
            return new red_bag_exchange_record(properties);
        };

        /**
         * Encodes the specified red_bag_exchange_record message. Does not implicitly {@link ActMsg.red_bag_exchange_record.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.red_bag_exchange_record
         * @static
         * @param {ActMsg.Ired_bag_exchange_record} message red_bag_exchange_record message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_record.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.nickname);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.red_bag);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chips);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time);
            return writer;
        };

        /**
         * Encodes the specified red_bag_exchange_record message, length delimited. Does not implicitly {@link ActMsg.red_bag_exchange_record.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.red_bag_exchange_record
         * @static
         * @param {ActMsg.Ired_bag_exchange_record} message red_bag_exchange_record message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        red_bag_exchange_record.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a red_bag_exchange_record message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.red_bag_exchange_record
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.red_bag_exchange_record} red_bag_exchange_record
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_record.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.red_bag_exchange_record();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.nickname = reader.string();
                    break;
                case 2:
                    message.red_bag = reader.uint32();
                    break;
                case 3:
                    message.chips = reader.uint64();
                    break;
                case 4:
                    message.time = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("red_bag"))
                throw $util.ProtocolError("missing required 'red_bag'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            return message;
        };

        /**
         * Decodes a red_bag_exchange_record message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.red_bag_exchange_record
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.red_bag_exchange_record} red_bag_exchange_record
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        red_bag_exchange_record.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a red_bag_exchange_record message.
         * @function verify
         * @memberof ActMsg.red_bag_exchange_record
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        red_bag_exchange_record.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (!$util.isInteger(message.red_bag))
                return "red_bag: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isInteger(message.time))
                return "time: integer expected";
            return null;
        };

        return red_bag_exchange_record;
    })();

    ActMsg.world_cup_info = (function() {

        /**
         * Properties of a world_cup_info.
         * @memberof ActMsg
         * @interface Iworld_cup_info
         * @property {number} self_rank world_cup_info self_rank
         * @property {number|Long} self_score world_cup_info self_score
         * @property {Array.<ActMsg.Iworld_cup_rank_info>|null} [rank_list] world_cup_info rank_list
         * @property {number} self_daily_rank world_cup_info self_daily_rank
         */

        /**
         * Constructs a new world_cup_info.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_info.
         * @implements Iworld_cup_info
         * @constructor
         * @param {ActMsg.Iworld_cup_info=} [properties] Properties to set
         */
        function world_cup_info(properties) {
            this.rank_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_info self_rank.
         * @member {number} self_rank
         * @memberof ActMsg.world_cup_info
         * @instance
         */
        world_cup_info.prototype.self_rank = 0;

        /**
         * world_cup_info self_score.
         * @member {number|Long} self_score
         * @memberof ActMsg.world_cup_info
         * @instance
         */
        world_cup_info.prototype.self_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * world_cup_info rank_list.
         * @member {Array.<ActMsg.Iworld_cup_rank_info>} rank_list
         * @memberof ActMsg.world_cup_info
         * @instance
         */
        world_cup_info.prototype.rank_list = $util.emptyArray;

        /**
         * world_cup_info self_daily_rank.
         * @member {number} self_daily_rank
         * @memberof ActMsg.world_cup_info
         * @instance
         */
        world_cup_info.prototype.self_daily_rank = 0;

        /**
         * Creates a new world_cup_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_info
         * @static
         * @param {ActMsg.Iworld_cup_info=} [properties] Properties to set
         * @returns {ActMsg.world_cup_info} world_cup_info instance
         */
        world_cup_info.create = function create(properties) {
            return new world_cup_info(properties);
        };

        /**
         * Encodes the specified world_cup_info message. Does not implicitly {@link ActMsg.world_cup_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_info
         * @static
         * @param {ActMsg.Iworld_cup_info} message world_cup_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.self_rank);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.self_score);
            if (message.rank_list != null && message.rank_list.length)
                for (var i = 0; i < message.rank_list.length; ++i)
                    $root.ActMsg.world_cup_rank_info.encode(message.rank_list[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.self_daily_rank);
            return writer;
        };

        /**
         * Encodes the specified world_cup_info message, length delimited. Does not implicitly {@link ActMsg.world_cup_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_info
         * @static
         * @param {ActMsg.Iworld_cup_info} message world_cup_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_info} world_cup_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.self_rank = reader.uint32();
                    break;
                case 2:
                    message.self_score = reader.uint64();
                    break;
                case 3:
                    if (!(message.rank_list && message.rank_list.length))
                        message.rank_list = [];
                    message.rank_list.push($root.ActMsg.world_cup_rank_info.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.self_daily_rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("self_rank"))
                throw $util.ProtocolError("missing required 'self_rank'", { instance: message });
            if (!message.hasOwnProperty("self_score"))
                throw $util.ProtocolError("missing required 'self_score'", { instance: message });
            if (!message.hasOwnProperty("self_daily_rank"))
                throw $util.ProtocolError("missing required 'self_daily_rank'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_info} world_cup_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_info message.
         * @function verify
         * @memberof ActMsg.world_cup_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.self_rank))
                return "self_rank: integer expected";
            if (!$util.isInteger(message.self_score) && !(message.self_score && $util.isInteger(message.self_score.low) && $util.isInteger(message.self_score.high)))
                return "self_score: integer|Long expected";
            if (message.rank_list != null && message.hasOwnProperty("rank_list")) {
                if (!Array.isArray(message.rank_list))
                    return "rank_list: array expected";
                for (var i = 0; i < message.rank_list.length; ++i) {
                    var error = $root.ActMsg.world_cup_rank_info.verify(message.rank_list[i]);
                    if (error)
                        return "rank_list." + error;
                }
            }
            if (!$util.isInteger(message.self_daily_rank))
                return "self_daily_rank: integer expected";
            return null;
        };

        return world_cup_info;
    })();

    ActMsg.world_cup_rank_info = (function() {

        /**
         * Properties of a world_cup_rank_info.
         * @memberof ActMsg
         * @interface Iworld_cup_rank_info
         * @property {number} rank world_cup_rank_info rank
         * @property {number|Long} chips world_cup_rank_info chips
         * @property {string} nickname world_cup_rank_info nickname
         */

        /**
         * Constructs a new world_cup_rank_info.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_rank_info.
         * @implements Iworld_cup_rank_info
         * @constructor
         * @param {ActMsg.Iworld_cup_rank_info=} [properties] Properties to set
         */
        function world_cup_rank_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_rank_info rank.
         * @member {number} rank
         * @memberof ActMsg.world_cup_rank_info
         * @instance
         */
        world_cup_rank_info.prototype.rank = 0;

        /**
         * world_cup_rank_info chips.
         * @member {number|Long} chips
         * @memberof ActMsg.world_cup_rank_info
         * @instance
         */
        world_cup_rank_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * world_cup_rank_info nickname.
         * @member {string} nickname
         * @memberof ActMsg.world_cup_rank_info
         * @instance
         */
        world_cup_rank_info.prototype.nickname = "";

        /**
         * Creates a new world_cup_rank_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_rank_info
         * @static
         * @param {ActMsg.Iworld_cup_rank_info=} [properties] Properties to set
         * @returns {ActMsg.world_cup_rank_info} world_cup_rank_info instance
         */
        world_cup_rank_info.create = function create(properties) {
            return new world_cup_rank_info(properties);
        };

        /**
         * Encodes the specified world_cup_rank_info message. Does not implicitly {@link ActMsg.world_cup_rank_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_rank_info
         * @static
         * @param {ActMsg.Iworld_cup_rank_info} message world_cup_rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_rank_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.chips);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            return writer;
        };

        /**
         * Encodes the specified world_cup_rank_info message, length delimited. Does not implicitly {@link ActMsg.world_cup_rank_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_rank_info
         * @static
         * @param {ActMsg.Iworld_cup_rank_info} message world_cup_rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_rank_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_rank_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_rank_info} world_cup_rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_rank_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_rank_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rank = reader.uint32();
                    break;
                case 2:
                    message.chips = reader.uint64();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_rank_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_rank_info} world_cup_rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_rank_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_rank_info message.
         * @function verify
         * @memberof ActMsg.world_cup_rank_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_rank_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            return null;
        };

        return world_cup_rank_info;
    })();

    ActMsg.world_cup_reward_info = (function() {

        /**
         * Properties of a world_cup_reward_info.
         * @memberof ActMsg
         * @interface Iworld_cup_reward_info
         * @property {number} rank world_cup_reward_info rank
         * @property {number|Long} chips world_cup_reward_info chips
         * @property {number|null} [max_rank] world_cup_reward_info max_rank
         */

        /**
         * Constructs a new world_cup_reward_info.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_reward_info.
         * @implements Iworld_cup_reward_info
         * @constructor
         * @param {ActMsg.Iworld_cup_reward_info=} [properties] Properties to set
         */
        function world_cup_reward_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_reward_info rank.
         * @member {number} rank
         * @memberof ActMsg.world_cup_reward_info
         * @instance
         */
        world_cup_reward_info.prototype.rank = 0;

        /**
         * world_cup_reward_info chips.
         * @member {number|Long} chips
         * @memberof ActMsg.world_cup_reward_info
         * @instance
         */
        world_cup_reward_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * world_cup_reward_info max_rank.
         * @member {number} max_rank
         * @memberof ActMsg.world_cup_reward_info
         * @instance
         */
        world_cup_reward_info.prototype.max_rank = 0;

        /**
         * Creates a new world_cup_reward_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_reward_info
         * @static
         * @param {ActMsg.Iworld_cup_reward_info=} [properties] Properties to set
         * @returns {ActMsg.world_cup_reward_info} world_cup_reward_info instance
         */
        world_cup_reward_info.create = function create(properties) {
            return new world_cup_reward_info(properties);
        };

        /**
         * Encodes the specified world_cup_reward_info message. Does not implicitly {@link ActMsg.world_cup_reward_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_reward_info
         * @static
         * @param {ActMsg.Iworld_cup_reward_info} message world_cup_reward_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_reward_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.chips);
            if (message.max_rank != null && message.hasOwnProperty("max_rank"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_rank);
            return writer;
        };

        /**
         * Encodes the specified world_cup_reward_info message, length delimited. Does not implicitly {@link ActMsg.world_cup_reward_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_reward_info
         * @static
         * @param {ActMsg.Iworld_cup_reward_info} message world_cup_reward_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_reward_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_reward_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_reward_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_reward_info} world_cup_reward_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_reward_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_reward_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rank = reader.uint32();
                    break;
                case 2:
                    message.chips = reader.uint64();
                    break;
                case 3:
                    message.max_rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_reward_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_reward_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_reward_info} world_cup_reward_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_reward_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_reward_info message.
         * @function verify
         * @memberof ActMsg.world_cup_reward_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_reward_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (message.max_rank != null && message.hasOwnProperty("max_rank"))
                if (!$util.isInteger(message.max_rank))
                    return "max_rank: integer expected";
            return null;
        };

        return world_cup_reward_info;
    })();

    ActMsg.world_cup_rank_reward_req = (function() {

        /**
         * Properties of a world_cup_rank_reward_req.
         * @memberof ActMsg
         * @interface Iworld_cup_rank_reward_req
         * @property {number|Long} act_uid world_cup_rank_reward_req act_uid
         */

        /**
         * Constructs a new world_cup_rank_reward_req.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_rank_reward_req.
         * @implements Iworld_cup_rank_reward_req
         * @constructor
         * @param {ActMsg.Iworld_cup_rank_reward_req=} [properties] Properties to set
         */
        function world_cup_rank_reward_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_rank_reward_req act_uid.
         * @member {number|Long} act_uid
         * @memberof ActMsg.world_cup_rank_reward_req
         * @instance
         */
        world_cup_rank_reward_req.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new world_cup_rank_reward_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_rank_reward_req
         * @static
         * @param {ActMsg.Iworld_cup_rank_reward_req=} [properties] Properties to set
         * @returns {ActMsg.world_cup_rank_reward_req} world_cup_rank_reward_req instance
         */
        world_cup_rank_reward_req.create = function create(properties) {
            return new world_cup_rank_reward_req(properties);
        };

        /**
         * Encodes the specified world_cup_rank_reward_req message. Does not implicitly {@link ActMsg.world_cup_rank_reward_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_rank_reward_req
         * @static
         * @param {ActMsg.Iworld_cup_rank_reward_req} message world_cup_rank_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_rank_reward_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.act_uid);
            return writer;
        };

        /**
         * Encodes the specified world_cup_rank_reward_req message, length delimited. Does not implicitly {@link ActMsg.world_cup_rank_reward_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_rank_reward_req
         * @static
         * @param {ActMsg.Iworld_cup_rank_reward_req} message world_cup_rank_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_rank_reward_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_rank_reward_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_rank_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_rank_reward_req} world_cup_rank_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_rank_reward_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_rank_reward_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.act_uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_rank_reward_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_rank_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_rank_reward_req} world_cup_rank_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_rank_reward_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_rank_reward_req message.
         * @function verify
         * @memberof ActMsg.world_cup_rank_reward_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_rank_reward_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            return null;
        };

        return world_cup_rank_reward_req;
    })();

    ActMsg.world_cup_rank_reward_resp = (function() {

        /**
         * Properties of a world_cup_rank_reward_resp.
         * @memberof ActMsg
         * @interface Iworld_cup_rank_reward_resp
         * @property {Array.<ActMsg.Iworld_cup_reward_info>|null} [luck_rewards] world_cup_rank_reward_resp luck_rewards
         * @property {Array.<ActMsg.Iworld_cup_reward_info>|null} [rewards] world_cup_rank_reward_resp rewards
         * @property {Array.<ActMsg.Iworld_cup_reward_info>|null} [daily_rewards] world_cup_rank_reward_resp daily_rewards
         */

        /**
         * Constructs a new world_cup_rank_reward_resp.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_rank_reward_resp.
         * @implements Iworld_cup_rank_reward_resp
         * @constructor
         * @param {ActMsg.Iworld_cup_rank_reward_resp=} [properties] Properties to set
         */
        function world_cup_rank_reward_resp(properties) {
            this.luck_rewards = [];
            this.rewards = [];
            this.daily_rewards = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_rank_reward_resp luck_rewards.
         * @member {Array.<ActMsg.Iworld_cup_reward_info>} luck_rewards
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @instance
         */
        world_cup_rank_reward_resp.prototype.luck_rewards = $util.emptyArray;

        /**
         * world_cup_rank_reward_resp rewards.
         * @member {Array.<ActMsg.Iworld_cup_reward_info>} rewards
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @instance
         */
        world_cup_rank_reward_resp.prototype.rewards = $util.emptyArray;

        /**
         * world_cup_rank_reward_resp daily_rewards.
         * @member {Array.<ActMsg.Iworld_cup_reward_info>} daily_rewards
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @instance
         */
        world_cup_rank_reward_resp.prototype.daily_rewards = $util.emptyArray;

        /**
         * Creates a new world_cup_rank_reward_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @static
         * @param {ActMsg.Iworld_cup_rank_reward_resp=} [properties] Properties to set
         * @returns {ActMsg.world_cup_rank_reward_resp} world_cup_rank_reward_resp instance
         */
        world_cup_rank_reward_resp.create = function create(properties) {
            return new world_cup_rank_reward_resp(properties);
        };

        /**
         * Encodes the specified world_cup_rank_reward_resp message. Does not implicitly {@link ActMsg.world_cup_rank_reward_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @static
         * @param {ActMsg.Iworld_cup_rank_reward_resp} message world_cup_rank_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_rank_reward_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.luck_rewards != null && message.luck_rewards.length)
                for (var i = 0; i < message.luck_rewards.length; ++i)
                    $root.ActMsg.world_cup_reward_info.encode(message.luck_rewards[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.rewards != null && message.rewards.length)
                for (var i = 0; i < message.rewards.length; ++i)
                    $root.ActMsg.world_cup_reward_info.encode(message.rewards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.daily_rewards != null && message.daily_rewards.length)
                for (var i = 0; i < message.daily_rewards.length; ++i)
                    $root.ActMsg.world_cup_reward_info.encode(message.daily_rewards[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified world_cup_rank_reward_resp message, length delimited. Does not implicitly {@link ActMsg.world_cup_rank_reward_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @static
         * @param {ActMsg.Iworld_cup_rank_reward_resp} message world_cup_rank_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_rank_reward_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_rank_reward_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_rank_reward_resp} world_cup_rank_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_rank_reward_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_rank_reward_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.luck_rewards && message.luck_rewards.length))
                        message.luck_rewards = [];
                    message.luck_rewards.push($root.ActMsg.world_cup_reward_info.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.rewards && message.rewards.length))
                        message.rewards = [];
                    message.rewards.push($root.ActMsg.world_cup_reward_info.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.daily_rewards && message.daily_rewards.length))
                        message.daily_rewards = [];
                    message.daily_rewards.push($root.ActMsg.world_cup_reward_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a world_cup_rank_reward_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_rank_reward_resp} world_cup_rank_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_rank_reward_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_rank_reward_resp message.
         * @function verify
         * @memberof ActMsg.world_cup_rank_reward_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_rank_reward_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.luck_rewards != null && message.hasOwnProperty("luck_rewards")) {
                if (!Array.isArray(message.luck_rewards))
                    return "luck_rewards: array expected";
                for (var i = 0; i < message.luck_rewards.length; ++i) {
                    var error = $root.ActMsg.world_cup_reward_info.verify(message.luck_rewards[i]);
                    if (error)
                        return "luck_rewards." + error;
                }
            }
            if (message.rewards != null && message.hasOwnProperty("rewards")) {
                if (!Array.isArray(message.rewards))
                    return "rewards: array expected";
                for (var i = 0; i < message.rewards.length; ++i) {
                    var error = $root.ActMsg.world_cup_reward_info.verify(message.rewards[i]);
                    if (error)
                        return "rewards." + error;
                }
            }
            if (message.daily_rewards != null && message.hasOwnProperty("daily_rewards")) {
                if (!Array.isArray(message.daily_rewards))
                    return "daily_rewards: array expected";
                for (var i = 0; i < message.daily_rewards.length; ++i) {
                    var error = $root.ActMsg.world_cup_reward_info.verify(message.daily_rewards[i]);
                    if (error)
                        return "daily_rewards." + error;
                }
            }
            return null;
        };

        return world_cup_rank_reward_resp;
    })();

    ActMsg.world_cup_reward_notice_resp = (function() {

        /**
         * Properties of a world_cup_reward_notice_resp.
         * @memberof ActMsg
         * @interface Iworld_cup_reward_notice_resp
         * @property {number|Long} act_uid world_cup_reward_notice_resp act_uid
         * @property {ActMsg.Iworld_cup_reward_info} reward world_cup_reward_notice_resp reward
         * @property {number} type world_cup_reward_notice_resp type
         */

        /**
         * Constructs a new world_cup_reward_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_reward_notice_resp.
         * @implements Iworld_cup_reward_notice_resp
         * @constructor
         * @param {ActMsg.Iworld_cup_reward_notice_resp=} [properties] Properties to set
         */
        function world_cup_reward_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_reward_notice_resp act_uid.
         * @member {number|Long} act_uid
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @instance
         */
        world_cup_reward_notice_resp.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * world_cup_reward_notice_resp reward.
         * @member {ActMsg.Iworld_cup_reward_info} reward
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @instance
         */
        world_cup_reward_notice_resp.prototype.reward = null;

        /**
         * world_cup_reward_notice_resp type.
         * @member {number} type
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @instance
         */
        world_cup_reward_notice_resp.prototype.type = 0;

        /**
         * Creates a new world_cup_reward_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @static
         * @param {ActMsg.Iworld_cup_reward_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.world_cup_reward_notice_resp} world_cup_reward_notice_resp instance
         */
        world_cup_reward_notice_resp.create = function create(properties) {
            return new world_cup_reward_notice_resp(properties);
        };

        /**
         * Encodes the specified world_cup_reward_notice_resp message. Does not implicitly {@link ActMsg.world_cup_reward_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @static
         * @param {ActMsg.Iworld_cup_reward_notice_resp} message world_cup_reward_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_reward_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.act_uid);
            $root.ActMsg.world_cup_reward_info.encode(message.reward, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
            return writer;
        };

        /**
         * Encodes the specified world_cup_reward_notice_resp message, length delimited. Does not implicitly {@link ActMsg.world_cup_reward_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @static
         * @param {ActMsg.Iworld_cup_reward_notice_resp} message world_cup_reward_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_reward_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_reward_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_reward_notice_resp} world_cup_reward_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_reward_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_reward_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.act_uid = reader.uint64();
                    break;
                case 2:
                    message.reward = $root.ActMsg.world_cup_reward_info.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            if (!message.hasOwnProperty("reward"))
                throw $util.ProtocolError("missing required 'reward'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_reward_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_reward_notice_resp} world_cup_reward_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_reward_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_reward_notice_resp message.
         * @function verify
         * @memberof ActMsg.world_cup_reward_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_reward_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            {
                var error = $root.ActMsg.world_cup_reward_info.verify(message.reward);
                if (error)
                    return "reward." + error;
            }
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            return null;
        };

        return world_cup_reward_notice_resp;
    })();

    ActMsg.world_cup_history_reward_info = (function() {

        /**
         * Properties of a world_cup_history_reward_info.
         * @memberof ActMsg
         * @interface Iworld_cup_history_reward_info
         * @property {number|Long} time world_cup_history_reward_info time
         * @property {number} rank world_cup_history_reward_info rank
         * @property {number|Long} chips world_cup_history_reward_info chips
         * @property {number} type world_cup_history_reward_info type
         */

        /**
         * Constructs a new world_cup_history_reward_info.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_history_reward_info.
         * @implements Iworld_cup_history_reward_info
         * @constructor
         * @param {ActMsg.Iworld_cup_history_reward_info=} [properties] Properties to set
         */
        function world_cup_history_reward_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_history_reward_info time.
         * @member {number|Long} time
         * @memberof ActMsg.world_cup_history_reward_info
         * @instance
         */
        world_cup_history_reward_info.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * world_cup_history_reward_info rank.
         * @member {number} rank
         * @memberof ActMsg.world_cup_history_reward_info
         * @instance
         */
        world_cup_history_reward_info.prototype.rank = 0;

        /**
         * world_cup_history_reward_info chips.
         * @member {number|Long} chips
         * @memberof ActMsg.world_cup_history_reward_info
         * @instance
         */
        world_cup_history_reward_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * world_cup_history_reward_info type.
         * @member {number} type
         * @memberof ActMsg.world_cup_history_reward_info
         * @instance
         */
        world_cup_history_reward_info.prototype.type = 0;

        /**
         * Creates a new world_cup_history_reward_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_history_reward_info
         * @static
         * @param {ActMsg.Iworld_cup_history_reward_info=} [properties] Properties to set
         * @returns {ActMsg.world_cup_history_reward_info} world_cup_history_reward_info instance
         */
        world_cup_history_reward_info.create = function create(properties) {
            return new world_cup_history_reward_info(properties);
        };

        /**
         * Encodes the specified world_cup_history_reward_info message. Does not implicitly {@link ActMsg.world_cup_history_reward_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_history_reward_info
         * @static
         * @param {ActMsg.Iworld_cup_history_reward_info} message world_cup_history_reward_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_history_reward_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.time);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rank);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chips);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.type);
            return writer;
        };

        /**
         * Encodes the specified world_cup_history_reward_info message, length delimited. Does not implicitly {@link ActMsg.world_cup_history_reward_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_history_reward_info
         * @static
         * @param {ActMsg.Iworld_cup_history_reward_info} message world_cup_history_reward_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_history_reward_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_history_reward_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_history_reward_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_history_reward_info} world_cup_history_reward_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_history_reward_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_history_reward_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.uint64();
                    break;
                case 2:
                    message.rank = reader.uint32();
                    break;
                case 3:
                    message.chips = reader.uint64();
                    break;
                case 4:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_history_reward_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_history_reward_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_history_reward_info} world_cup_history_reward_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_history_reward_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_history_reward_info message.
         * @function verify
         * @memberof ActMsg.world_cup_history_reward_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_history_reward_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            return null;
        };

        return world_cup_history_reward_info;
    })();

    ActMsg.world_cup_role_reward_req = (function() {

        /**
         * Properties of a world_cup_role_reward_req.
         * @memberof ActMsg
         * @interface Iworld_cup_role_reward_req
         * @property {number|Long} act_uid world_cup_role_reward_req act_uid
         */

        /**
         * Constructs a new world_cup_role_reward_req.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_role_reward_req.
         * @implements Iworld_cup_role_reward_req
         * @constructor
         * @param {ActMsg.Iworld_cup_role_reward_req=} [properties] Properties to set
         */
        function world_cup_role_reward_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_role_reward_req act_uid.
         * @member {number|Long} act_uid
         * @memberof ActMsg.world_cup_role_reward_req
         * @instance
         */
        world_cup_role_reward_req.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new world_cup_role_reward_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_role_reward_req
         * @static
         * @param {ActMsg.Iworld_cup_role_reward_req=} [properties] Properties to set
         * @returns {ActMsg.world_cup_role_reward_req} world_cup_role_reward_req instance
         */
        world_cup_role_reward_req.create = function create(properties) {
            return new world_cup_role_reward_req(properties);
        };

        /**
         * Encodes the specified world_cup_role_reward_req message. Does not implicitly {@link ActMsg.world_cup_role_reward_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_role_reward_req
         * @static
         * @param {ActMsg.Iworld_cup_role_reward_req} message world_cup_role_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_role_reward_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.act_uid);
            return writer;
        };

        /**
         * Encodes the specified world_cup_role_reward_req message, length delimited. Does not implicitly {@link ActMsg.world_cup_role_reward_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_role_reward_req
         * @static
         * @param {ActMsg.Iworld_cup_role_reward_req} message world_cup_role_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_role_reward_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_role_reward_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_role_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_role_reward_req} world_cup_role_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_role_reward_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_role_reward_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.act_uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a world_cup_role_reward_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_role_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_role_reward_req} world_cup_role_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_role_reward_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_role_reward_req message.
         * @function verify
         * @memberof ActMsg.world_cup_role_reward_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_role_reward_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            return null;
        };

        return world_cup_role_reward_req;
    })();

    ActMsg.world_cup_role_reward_resp = (function() {

        /**
         * Properties of a world_cup_role_reward_resp.
         * @memberof ActMsg
         * @interface Iworld_cup_role_reward_resp
         * @property {Array.<ActMsg.Iworld_cup_history_reward_info>|null} [rewards] world_cup_role_reward_resp rewards
         */

        /**
         * Constructs a new world_cup_role_reward_resp.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_role_reward_resp.
         * @implements Iworld_cup_role_reward_resp
         * @constructor
         * @param {ActMsg.Iworld_cup_role_reward_resp=} [properties] Properties to set
         */
        function world_cup_role_reward_resp(properties) {
            this.rewards = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * world_cup_role_reward_resp rewards.
         * @member {Array.<ActMsg.Iworld_cup_history_reward_info>} rewards
         * @memberof ActMsg.world_cup_role_reward_resp
         * @instance
         */
        world_cup_role_reward_resp.prototype.rewards = $util.emptyArray;

        /**
         * Creates a new world_cup_role_reward_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_role_reward_resp
         * @static
         * @param {ActMsg.Iworld_cup_role_reward_resp=} [properties] Properties to set
         * @returns {ActMsg.world_cup_role_reward_resp} world_cup_role_reward_resp instance
         */
        world_cup_role_reward_resp.create = function create(properties) {
            return new world_cup_role_reward_resp(properties);
        };

        /**
         * Encodes the specified world_cup_role_reward_resp message. Does not implicitly {@link ActMsg.world_cup_role_reward_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_role_reward_resp
         * @static
         * @param {ActMsg.Iworld_cup_role_reward_resp} message world_cup_role_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_role_reward_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rewards != null && message.rewards.length)
                for (var i = 0; i < message.rewards.length; ++i)
                    $root.ActMsg.world_cup_history_reward_info.encode(message.rewards[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified world_cup_role_reward_resp message, length delimited. Does not implicitly {@link ActMsg.world_cup_role_reward_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_role_reward_resp
         * @static
         * @param {ActMsg.Iworld_cup_role_reward_resp} message world_cup_role_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_role_reward_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_role_reward_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_role_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_role_reward_resp} world_cup_role_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_role_reward_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_role_reward_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.rewards && message.rewards.length))
                        message.rewards = [];
                    message.rewards.push($root.ActMsg.world_cup_history_reward_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a world_cup_role_reward_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_role_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_role_reward_resp} world_cup_role_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_role_reward_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_role_reward_resp message.
         * @function verify
         * @memberof ActMsg.world_cup_role_reward_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_role_reward_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rewards != null && message.hasOwnProperty("rewards")) {
                if (!Array.isArray(message.rewards))
                    return "rewards: array expected";
                for (var i = 0; i < message.rewards.length; ++i) {
                    var error = $root.ActMsg.world_cup_history_reward_info.verify(message.rewards[i]);
                    if (error)
                        return "rewards." + error;
                }
            }
            return null;
        };

        return world_cup_role_reward_resp;
    })();

    ActMsg.world_cup_notice_resp = (function() {

        /**
         * Properties of a world_cup_notice_resp.
         * @memberof ActMsg
         * @interface Iworld_cup_notice_resp
         */

        /**
         * Constructs a new world_cup_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a world_cup_notice_resp.
         * @implements Iworld_cup_notice_resp
         * @constructor
         * @param {ActMsg.Iworld_cup_notice_resp=} [properties] Properties to set
         */
        function world_cup_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new world_cup_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.world_cup_notice_resp
         * @static
         * @param {ActMsg.Iworld_cup_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.world_cup_notice_resp} world_cup_notice_resp instance
         */
        world_cup_notice_resp.create = function create(properties) {
            return new world_cup_notice_resp(properties);
        };

        /**
         * Encodes the specified world_cup_notice_resp message. Does not implicitly {@link ActMsg.world_cup_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.world_cup_notice_resp
         * @static
         * @param {ActMsg.Iworld_cup_notice_resp} message world_cup_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified world_cup_notice_resp message, length delimited. Does not implicitly {@link ActMsg.world_cup_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.world_cup_notice_resp
         * @static
         * @param {ActMsg.Iworld_cup_notice_resp} message world_cup_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        world_cup_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a world_cup_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.world_cup_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.world_cup_notice_resp} world_cup_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.world_cup_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a world_cup_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.world_cup_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.world_cup_notice_resp} world_cup_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        world_cup_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a world_cup_notice_resp message.
         * @function verify
         * @memberof ActMsg.world_cup_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        world_cup_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return world_cup_notice_resp;
    })();

    ActMsg.valentine_notice_resp = (function() {

        /**
         * Properties of a valentine_notice_resp.
         * @memberof ActMsg
         * @interface Ivalentine_notice_resp
         */

        /**
         * Constructs a new valentine_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a valentine_notice_resp.
         * @implements Ivalentine_notice_resp
         * @constructor
         * @param {ActMsg.Ivalentine_notice_resp=} [properties] Properties to set
         */
        function valentine_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new valentine_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.valentine_notice_resp
         * @static
         * @param {ActMsg.Ivalentine_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.valentine_notice_resp} valentine_notice_resp instance
         */
        valentine_notice_resp.create = function create(properties) {
            return new valentine_notice_resp(properties);
        };

        /**
         * Encodes the specified valentine_notice_resp message. Does not implicitly {@link ActMsg.valentine_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.valentine_notice_resp
         * @static
         * @param {ActMsg.Ivalentine_notice_resp} message valentine_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        valentine_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified valentine_notice_resp message, length delimited. Does not implicitly {@link ActMsg.valentine_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.valentine_notice_resp
         * @static
         * @param {ActMsg.Ivalentine_notice_resp} message valentine_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        valentine_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a valentine_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.valentine_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.valentine_notice_resp} valentine_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        valentine_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.valentine_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a valentine_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.valentine_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.valentine_notice_resp} valentine_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        valentine_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a valentine_notice_resp message.
         * @function verify
         * @memberof ActMsg.valentine_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        valentine_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return valentine_notice_resp;
    })();

    ActMsg.nation_day_notice_resp = (function() {

        /**
         * Properties of a nation_day_notice_resp.
         * @memberof ActMsg
         * @interface Ination_day_notice_resp
         * @property {number|Long} show_start_time nation_day_notice_resp show_start_time
         * @property {number|Long} show_end_time nation_day_notice_resp show_end_time
         * @property {number|Long} start_time nation_day_notice_resp start_time
         * @property {number|Long} end_time nation_day_notice_resp end_time
         */

        /**
         * Constructs a new nation_day_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_day_notice_resp.
         * @implements Ination_day_notice_resp
         * @constructor
         * @param {ActMsg.Ination_day_notice_resp=} [properties] Properties to set
         */
        function nation_day_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_day_notice_resp show_start_time.
         * @member {number|Long} show_start_time
         * @memberof ActMsg.nation_day_notice_resp
         * @instance
         */
        nation_day_notice_resp.prototype.show_start_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_notice_resp show_end_time.
         * @member {number|Long} show_end_time
         * @memberof ActMsg.nation_day_notice_resp
         * @instance
         */
        nation_day_notice_resp.prototype.show_end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_notice_resp start_time.
         * @member {number|Long} start_time
         * @memberof ActMsg.nation_day_notice_resp
         * @instance
         */
        nation_day_notice_resp.prototype.start_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_notice_resp end_time.
         * @member {number|Long} end_time
         * @memberof ActMsg.nation_day_notice_resp
         * @instance
         */
        nation_day_notice_resp.prototype.end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new nation_day_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_day_notice_resp
         * @static
         * @param {ActMsg.Ination_day_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_day_notice_resp} nation_day_notice_resp instance
         */
        nation_day_notice_resp.create = function create(properties) {
            return new nation_day_notice_resp(properties);
        };

        /**
         * Encodes the specified nation_day_notice_resp message. Does not implicitly {@link ActMsg.nation_day_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_day_notice_resp
         * @static
         * @param {ActMsg.Ination_day_notice_resp} message nation_day_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.show_start_time);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.show_end_time);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.start_time);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.end_time);
            return writer;
        };

        /**
         * Encodes the specified nation_day_notice_resp message, length delimited. Does not implicitly {@link ActMsg.nation_day_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_day_notice_resp
         * @static
         * @param {ActMsg.Ination_day_notice_resp} message nation_day_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_day_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_day_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_day_notice_resp} nation_day_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_day_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.show_start_time = reader.uint64();
                    break;
                case 2:
                    message.show_end_time = reader.uint64();
                    break;
                case 3:
                    message.start_time = reader.uint64();
                    break;
                case 4:
                    message.end_time = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("show_start_time"))
                throw $util.ProtocolError("missing required 'show_start_time'", { instance: message });
            if (!message.hasOwnProperty("show_end_time"))
                throw $util.ProtocolError("missing required 'show_end_time'", { instance: message });
            if (!message.hasOwnProperty("start_time"))
                throw $util.ProtocolError("missing required 'start_time'", { instance: message });
            if (!message.hasOwnProperty("end_time"))
                throw $util.ProtocolError("missing required 'end_time'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_day_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_day_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_day_notice_resp} nation_day_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_day_notice_resp message.
         * @function verify
         * @memberof ActMsg.nation_day_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_day_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.show_start_time) && !(message.show_start_time && $util.isInteger(message.show_start_time.low) && $util.isInteger(message.show_start_time.high)))
                return "show_start_time: integer|Long expected";
            if (!$util.isInteger(message.show_end_time) && !(message.show_end_time && $util.isInteger(message.show_end_time.low) && $util.isInteger(message.show_end_time.high)))
                return "show_end_time: integer|Long expected";
            if (!$util.isInteger(message.start_time) && !(message.start_time && $util.isInteger(message.start_time.low) && $util.isInteger(message.start_time.high)))
                return "start_time: integer|Long expected";
            if (!$util.isInteger(message.end_time) && !(message.end_time && $util.isInteger(message.end_time.low) && $util.isInteger(message.end_time.high)))
                return "end_time: integer|Long expected";
            return null;
        };

        return nation_day_notice_resp;
    })();

    ActMsg.nation_volume_add_resp = (function() {

        /**
         * Properties of a nation_volume_add_resp.
         * @memberof ActMsg
         * @interface Ination_volume_add_resp
         * @property {number|Long} uid nation_volume_add_resp uid
         * @property {number|Long} act_uid nation_volume_add_resp act_uid
         * @property {number|Long} add_volume nation_volume_add_resp add_volume
         * @property {number|Long} self_volume nation_volume_add_resp self_volume
         * @property {number|Long} daily_volume nation_volume_add_resp daily_volume
         */

        /**
         * Constructs a new nation_volume_add_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_volume_add_resp.
         * @implements Ination_volume_add_resp
         * @constructor
         * @param {ActMsg.Ination_volume_add_resp=} [properties] Properties to set
         */
        function nation_volume_add_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_volume_add_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.nation_volume_add_resp
         * @instance
         */
        nation_volume_add_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_volume_add_resp act_uid.
         * @member {number|Long} act_uid
         * @memberof ActMsg.nation_volume_add_resp
         * @instance
         */
        nation_volume_add_resp.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_volume_add_resp add_volume.
         * @member {number|Long} add_volume
         * @memberof ActMsg.nation_volume_add_resp
         * @instance
         */
        nation_volume_add_resp.prototype.add_volume = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_volume_add_resp self_volume.
         * @member {number|Long} self_volume
         * @memberof ActMsg.nation_volume_add_resp
         * @instance
         */
        nation_volume_add_resp.prototype.self_volume = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_volume_add_resp daily_volume.
         * @member {number|Long} daily_volume
         * @memberof ActMsg.nation_volume_add_resp
         * @instance
         */
        nation_volume_add_resp.prototype.daily_volume = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new nation_volume_add_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_volume_add_resp
         * @static
         * @param {ActMsg.Ination_volume_add_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_volume_add_resp} nation_volume_add_resp instance
         */
        nation_volume_add_resp.create = function create(properties) {
            return new nation_volume_add_resp(properties);
        };

        /**
         * Encodes the specified nation_volume_add_resp message. Does not implicitly {@link ActMsg.nation_volume_add_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_volume_add_resp
         * @static
         * @param {ActMsg.Ination_volume_add_resp} message nation_volume_add_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_volume_add_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.act_uid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.add_volume);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.self_volume);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.daily_volume);
            return writer;
        };

        /**
         * Encodes the specified nation_volume_add_resp message, length delimited. Does not implicitly {@link ActMsg.nation_volume_add_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_volume_add_resp
         * @static
         * @param {ActMsg.Ination_volume_add_resp} message nation_volume_add_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_volume_add_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_volume_add_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_volume_add_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_volume_add_resp} nation_volume_add_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_volume_add_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_volume_add_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.act_uid = reader.uint64();
                    break;
                case 3:
                    message.add_volume = reader.uint64();
                    break;
                case 4:
                    message.self_volume = reader.uint64();
                    break;
                case 5:
                    message.daily_volume = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            if (!message.hasOwnProperty("add_volume"))
                throw $util.ProtocolError("missing required 'add_volume'", { instance: message });
            if (!message.hasOwnProperty("self_volume"))
                throw $util.ProtocolError("missing required 'self_volume'", { instance: message });
            if (!message.hasOwnProperty("daily_volume"))
                throw $util.ProtocolError("missing required 'daily_volume'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_volume_add_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_volume_add_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_volume_add_resp} nation_volume_add_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_volume_add_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_volume_add_resp message.
         * @function verify
         * @memberof ActMsg.nation_volume_add_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_volume_add_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            if (!$util.isInteger(message.add_volume) && !(message.add_volume && $util.isInteger(message.add_volume.low) && $util.isInteger(message.add_volume.high)))
                return "add_volume: integer|Long expected";
            if (!$util.isInteger(message.self_volume) && !(message.self_volume && $util.isInteger(message.self_volume.low) && $util.isInteger(message.self_volume.high)))
                return "self_volume: integer|Long expected";
            if (!$util.isInteger(message.daily_volume) && !(message.daily_volume && $util.isInteger(message.daily_volume.low) && $util.isInteger(message.daily_volume.high)))
                return "daily_volume: integer|Long expected";
            return null;
        };

        return nation_volume_add_resp;
    })();

    ActMsg.nation_day_info = (function() {

        /**
         * Properties of a nation_day_info.
         * @memberof ActMsg
         * @interface Ination_day_info
         * @property {number} self_rank nation_day_info self_rank
         * @property {number|Long} self_volume nation_day_info self_volume
         * @property {number|Long} daily_volume nation_day_info daily_volume
         * @property {number} self_daily_rank nation_day_info self_daily_rank
         */

        /**
         * Constructs a new nation_day_info.
         * @memberof ActMsg
         * @classdesc Represents a nation_day_info.
         * @implements Ination_day_info
         * @constructor
         * @param {ActMsg.Ination_day_info=} [properties] Properties to set
         */
        function nation_day_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_day_info self_rank.
         * @member {number} self_rank
         * @memberof ActMsg.nation_day_info
         * @instance
         */
        nation_day_info.prototype.self_rank = 0;

        /**
         * nation_day_info self_volume.
         * @member {number|Long} self_volume
         * @memberof ActMsg.nation_day_info
         * @instance
         */
        nation_day_info.prototype.self_volume = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_info daily_volume.
         * @member {number|Long} daily_volume
         * @memberof ActMsg.nation_day_info
         * @instance
         */
        nation_day_info.prototype.daily_volume = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_info self_daily_rank.
         * @member {number} self_daily_rank
         * @memberof ActMsg.nation_day_info
         * @instance
         */
        nation_day_info.prototype.self_daily_rank = 0;

        /**
         * Creates a new nation_day_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_day_info
         * @static
         * @param {ActMsg.Ination_day_info=} [properties] Properties to set
         * @returns {ActMsg.nation_day_info} nation_day_info instance
         */
        nation_day_info.create = function create(properties) {
            return new nation_day_info(properties);
        };

        /**
         * Encodes the specified nation_day_info message. Does not implicitly {@link ActMsg.nation_day_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_day_info
         * @static
         * @param {ActMsg.Ination_day_info} message nation_day_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.self_rank);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.self_volume);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.daily_volume);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.self_daily_rank);
            return writer;
        };

        /**
         * Encodes the specified nation_day_info message, length delimited. Does not implicitly {@link ActMsg.nation_day_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_day_info
         * @static
         * @param {ActMsg.Ination_day_info} message nation_day_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_day_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_day_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_day_info} nation_day_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_day_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.self_rank = reader.uint32();
                    break;
                case 2:
                    message.self_volume = reader.uint64();
                    break;
                case 3:
                    message.daily_volume = reader.uint64();
                    break;
                case 4:
                    message.self_daily_rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("self_rank"))
                throw $util.ProtocolError("missing required 'self_rank'", { instance: message });
            if (!message.hasOwnProperty("self_volume"))
                throw $util.ProtocolError("missing required 'self_volume'", { instance: message });
            if (!message.hasOwnProperty("daily_volume"))
                throw $util.ProtocolError("missing required 'daily_volume'", { instance: message });
            if (!message.hasOwnProperty("self_daily_rank"))
                throw $util.ProtocolError("missing required 'self_daily_rank'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_day_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_day_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_day_info} nation_day_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_day_info message.
         * @function verify
         * @memberof ActMsg.nation_day_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_day_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.self_rank))
                return "self_rank: integer expected";
            if (!$util.isInteger(message.self_volume) && !(message.self_volume && $util.isInteger(message.self_volume.low) && $util.isInteger(message.self_volume.high)))
                return "self_volume: integer|Long expected";
            if (!$util.isInteger(message.daily_volume) && !(message.daily_volume && $util.isInteger(message.daily_volume.low) && $util.isInteger(message.daily_volume.high)))
                return "daily_volume: integer|Long expected";
            if (!$util.isInteger(message.self_daily_rank))
                return "self_daily_rank: integer expected";
            return null;
        };

        return nation_day_info;
    })();

    ActMsg.nation_race_day_req = (function() {

        /**
         * Properties of a nation_race_day_req.
         * @memberof ActMsg
         * @interface Ination_race_day_req
         * @property {number|Long} uid nation_race_day_req uid
         */

        /**
         * Constructs a new nation_race_day_req.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_day_req.
         * @implements Ination_race_day_req
         * @constructor
         * @param {ActMsg.Ination_race_day_req=} [properties] Properties to set
         */
        function nation_race_day_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_day_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.nation_race_day_req
         * @instance
         */
        nation_race_day_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new nation_race_day_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_day_req
         * @static
         * @param {ActMsg.Ination_race_day_req=} [properties] Properties to set
         * @returns {ActMsg.nation_race_day_req} nation_race_day_req instance
         */
        nation_race_day_req.create = function create(properties) {
            return new nation_race_day_req(properties);
        };

        /**
         * Encodes the specified nation_race_day_req message. Does not implicitly {@link ActMsg.nation_race_day_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_day_req
         * @static
         * @param {ActMsg.Ination_race_day_req} message nation_race_day_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_day_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified nation_race_day_req message, length delimited. Does not implicitly {@link ActMsg.nation_race_day_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_day_req
         * @static
         * @param {ActMsg.Ination_race_day_req} message nation_race_day_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_day_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_day_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_day_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_day_req} nation_race_day_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_day_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_day_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_day_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_day_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_day_req} nation_race_day_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_day_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_day_req message.
         * @function verify
         * @memberof ActMsg.nation_race_day_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_day_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return nation_race_day_req;
    })();

    ActMsg.nation_race_day_resp = (function() {

        /**
         * Properties of a nation_race_day_resp.
         * @memberof ActMsg
         * @interface Ination_race_day_resp
         * @property {Array.<ActMsg.Ination_race>|null} [race] nation_race_day_resp race
         * @property {number} day nation_race_day_resp day
         */

        /**
         * Constructs a new nation_race_day_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_day_resp.
         * @implements Ination_race_day_resp
         * @constructor
         * @param {ActMsg.Ination_race_day_resp=} [properties] Properties to set
         */
        function nation_race_day_resp(properties) {
            this.race = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_day_resp race.
         * @member {Array.<ActMsg.Ination_race>} race
         * @memberof ActMsg.nation_race_day_resp
         * @instance
         */
        nation_race_day_resp.prototype.race = $util.emptyArray;

        /**
         * nation_race_day_resp day.
         * @member {number} day
         * @memberof ActMsg.nation_race_day_resp
         * @instance
         */
        nation_race_day_resp.prototype.day = 0;

        /**
         * Creates a new nation_race_day_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_day_resp
         * @static
         * @param {ActMsg.Ination_race_day_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_race_day_resp} nation_race_day_resp instance
         */
        nation_race_day_resp.create = function create(properties) {
            return new nation_race_day_resp(properties);
        };

        /**
         * Encodes the specified nation_race_day_resp message. Does not implicitly {@link ActMsg.nation_race_day_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_day_resp
         * @static
         * @param {ActMsg.Ination_race_day_resp} message nation_race_day_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_day_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.race != null && message.race.length)
                for (var i = 0; i < message.race.length; ++i)
                    $root.ActMsg.nation_race.encode(message.race[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.day);
            return writer;
        };

        /**
         * Encodes the specified nation_race_day_resp message, length delimited. Does not implicitly {@link ActMsg.nation_race_day_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_day_resp
         * @static
         * @param {ActMsg.Ination_race_day_resp} message nation_race_day_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_day_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_day_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_day_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_day_resp} nation_race_day_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_day_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_day_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.race && message.race.length))
                        message.race = [];
                    message.race.push($root.ActMsg.nation_race.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.day = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("day"))
                throw $util.ProtocolError("missing required 'day'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_day_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_day_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_day_resp} nation_race_day_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_day_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_day_resp message.
         * @function verify
         * @memberof ActMsg.nation_race_day_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_day_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.race != null && message.hasOwnProperty("race")) {
                if (!Array.isArray(message.race))
                    return "race: array expected";
                for (var i = 0; i < message.race.length; ++i) {
                    var error = $root.ActMsg.nation_race.verify(message.race[i]);
                    if (error)
                        return "race." + error;
                }
            }
            if (!$util.isInteger(message.day))
                return "day: integer expected";
            return null;
        };

        return nation_race_day_resp;
    })();

    ActMsg.nation_race = (function() {

        /**
         * Properties of a nation_race.
         * @memberof ActMsg
         * @interface Ination_race
         * @property {number} race_id nation_race race_id
         * @property {number|Long} show_start_time nation_race show_start_time
         * @property {number|Long} show_end_time nation_race show_end_time
         * @property {number|Long} start_time nation_race start_time
         * @property {number|Long} end_time nation_race end_time
         * @property {number|Long} forbidden_time nation_race forbidden_time
         * @property {string} race_name nation_race race_name
         * @property {number} event_type_id nation_race event_type_id
         */

        /**
         * Constructs a new nation_race.
         * @memberof ActMsg
         * @classdesc Represents a nation_race.
         * @implements Ination_race
         * @constructor
         * @param {ActMsg.Ination_race=} [properties] Properties to set
         */
        function nation_race(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race race_id.
         * @member {number} race_id
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.race_id = 0;

        /**
         * nation_race show_start_time.
         * @member {number|Long} show_start_time
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.show_start_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race show_end_time.
         * @member {number|Long} show_end_time
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.show_end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race start_time.
         * @member {number|Long} start_time
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.start_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race end_time.
         * @member {number|Long} end_time
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race forbidden_time.
         * @member {number|Long} forbidden_time
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.forbidden_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race race_name.
         * @member {string} race_name
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.race_name = "";

        /**
         * nation_race event_type_id.
         * @member {number} event_type_id
         * @memberof ActMsg.nation_race
         * @instance
         */
        nation_race.prototype.event_type_id = 0;

        /**
         * Creates a new nation_race instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race
         * @static
         * @param {ActMsg.Ination_race=} [properties] Properties to set
         * @returns {ActMsg.nation_race} nation_race instance
         */
        nation_race.create = function create(properties) {
            return new nation_race(properties);
        };

        /**
         * Encodes the specified nation_race message. Does not implicitly {@link ActMsg.nation_race.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race
         * @static
         * @param {ActMsg.Ination_race} message nation_race message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.race_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.show_start_time);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.show_end_time);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.start_time);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.end_time);
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.forbidden_time);
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.race_name);
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.event_type_id);
            return writer;
        };

        /**
         * Encodes the specified nation_race message, length delimited. Does not implicitly {@link ActMsg.nation_race.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race
         * @static
         * @param {ActMsg.Ination_race} message nation_race message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race} nation_race
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.race_id = reader.uint32();
                    break;
                case 2:
                    message.show_start_time = reader.uint64();
                    break;
                case 3:
                    message.show_end_time = reader.uint64();
                    break;
                case 4:
                    message.start_time = reader.uint64();
                    break;
                case 5:
                    message.end_time = reader.uint64();
                    break;
                case 6:
                    message.forbidden_time = reader.uint64();
                    break;
                case 7:
                    message.race_name = reader.string();
                    break;
                case 8:
                    message.event_type_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("race_id"))
                throw $util.ProtocolError("missing required 'race_id'", { instance: message });
            if (!message.hasOwnProperty("show_start_time"))
                throw $util.ProtocolError("missing required 'show_start_time'", { instance: message });
            if (!message.hasOwnProperty("show_end_time"))
                throw $util.ProtocolError("missing required 'show_end_time'", { instance: message });
            if (!message.hasOwnProperty("start_time"))
                throw $util.ProtocolError("missing required 'start_time'", { instance: message });
            if (!message.hasOwnProperty("end_time"))
                throw $util.ProtocolError("missing required 'end_time'", { instance: message });
            if (!message.hasOwnProperty("forbidden_time"))
                throw $util.ProtocolError("missing required 'forbidden_time'", { instance: message });
            if (!message.hasOwnProperty("race_name"))
                throw $util.ProtocolError("missing required 'race_name'", { instance: message });
            if (!message.hasOwnProperty("event_type_id"))
                throw $util.ProtocolError("missing required 'event_type_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race} nation_race
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race message.
         * @function verify
         * @memberof ActMsg.nation_race
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.race_id))
                return "race_id: integer expected";
            if (!$util.isInteger(message.show_start_time) && !(message.show_start_time && $util.isInteger(message.show_start_time.low) && $util.isInteger(message.show_start_time.high)))
                return "show_start_time: integer|Long expected";
            if (!$util.isInteger(message.show_end_time) && !(message.show_end_time && $util.isInteger(message.show_end_time.low) && $util.isInteger(message.show_end_time.high)))
                return "show_end_time: integer|Long expected";
            if (!$util.isInteger(message.start_time) && !(message.start_time && $util.isInteger(message.start_time.low) && $util.isInteger(message.start_time.high)))
                return "start_time: integer|Long expected";
            if (!$util.isInteger(message.end_time) && !(message.end_time && $util.isInteger(message.end_time.low) && $util.isInteger(message.end_time.high)))
                return "end_time: integer|Long expected";
            if (!$util.isInteger(message.forbidden_time) && !(message.forbidden_time && $util.isInteger(message.forbidden_time.low) && $util.isInteger(message.forbidden_time.high)))
                return "forbidden_time: integer|Long expected";
            if (!$util.isString(message.race_name))
                return "race_name: string expected";
            if (!$util.isInteger(message.event_type_id))
                return "event_type_id: integer expected";
            return null;
        };

        return nation_race;
    })();

    ActMsg.nation_race_info_req = (function() {

        /**
         * Properties of a nation_race_info_req.
         * @memberof ActMsg
         * @interface Ination_race_info_req
         * @property {number|Long} uid nation_race_info_req uid
         * @property {number} race_id nation_race_info_req race_id
         */

        /**
         * Constructs a new nation_race_info_req.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_info_req.
         * @implements Ination_race_info_req
         * @constructor
         * @param {ActMsg.Ination_race_info_req=} [properties] Properties to set
         */
        function nation_race_info_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_info_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.nation_race_info_req
         * @instance
         */
        nation_race_info_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race_info_req race_id.
         * @member {number} race_id
         * @memberof ActMsg.nation_race_info_req
         * @instance
         */
        nation_race_info_req.prototype.race_id = 0;

        /**
         * Creates a new nation_race_info_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_info_req
         * @static
         * @param {ActMsg.Ination_race_info_req=} [properties] Properties to set
         * @returns {ActMsg.nation_race_info_req} nation_race_info_req instance
         */
        nation_race_info_req.create = function create(properties) {
            return new nation_race_info_req(properties);
        };

        /**
         * Encodes the specified nation_race_info_req message. Does not implicitly {@link ActMsg.nation_race_info_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_info_req
         * @static
         * @param {ActMsg.Ination_race_info_req} message nation_race_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_info_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.race_id);
            return writer;
        };

        /**
         * Encodes the specified nation_race_info_req message, length delimited. Does not implicitly {@link ActMsg.nation_race_info_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_info_req
         * @static
         * @param {ActMsg.Ination_race_info_req} message nation_race_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_info_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_info_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_info_req} nation_race_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_info_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_info_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.race_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("race_id"))
                throw $util.ProtocolError("missing required 'race_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_info_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_info_req} nation_race_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_info_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_info_req message.
         * @function verify
         * @memberof ActMsg.nation_race_info_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_info_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.race_id))
                return "race_id: integer expected";
            return null;
        };

        return nation_race_info_req;
    })();

    ActMsg.nation_race_info_resp = (function() {

        /**
         * Properties of a nation_race_info_resp.
         * @memberof ActMsg
         * @interface Ination_race_info_resp
         * @property {number} bullet_count nation_race_info_resp bullet_count
         * @property {number} entry_fee nation_race_info_resp entry_fee
         * @property {number} retry_fee nation_race_info_resp retry_fee
         * @property {number} bullet_left nation_race_info_resp bullet_left
         * @property {number} rank nation_race_info_resp rank
         * @property {number} chances nation_race_info_resp chances
         * @property {Array.<ActMsg.Ination_day_reward_info>|null} [rewards] nation_race_info_resp rewards
         */

        /**
         * Constructs a new nation_race_info_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_info_resp.
         * @implements Ination_race_info_resp
         * @constructor
         * @param {ActMsg.Ination_race_info_resp=} [properties] Properties to set
         */
        function nation_race_info_resp(properties) {
            this.rewards = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_info_resp bullet_count.
         * @member {number} bullet_count
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.bullet_count = 0;

        /**
         * nation_race_info_resp entry_fee.
         * @member {number} entry_fee
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.entry_fee = 0;

        /**
         * nation_race_info_resp retry_fee.
         * @member {number} retry_fee
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.retry_fee = 0;

        /**
         * nation_race_info_resp bullet_left.
         * @member {number} bullet_left
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.bullet_left = 0;

        /**
         * nation_race_info_resp rank.
         * @member {number} rank
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.rank = 0;

        /**
         * nation_race_info_resp chances.
         * @member {number} chances
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.chances = 0;

        /**
         * nation_race_info_resp rewards.
         * @member {Array.<ActMsg.Ination_day_reward_info>} rewards
         * @memberof ActMsg.nation_race_info_resp
         * @instance
         */
        nation_race_info_resp.prototype.rewards = $util.emptyArray;

        /**
         * Creates a new nation_race_info_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_info_resp
         * @static
         * @param {ActMsg.Ination_race_info_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_race_info_resp} nation_race_info_resp instance
         */
        nation_race_info_resp.create = function create(properties) {
            return new nation_race_info_resp(properties);
        };

        /**
         * Encodes the specified nation_race_info_resp message. Does not implicitly {@link ActMsg.nation_race_info_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_info_resp
         * @static
         * @param {ActMsg.Ination_race_info_resp} message nation_race_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_info_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bullet_count);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.entry_fee);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.retry_fee);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.bullet_left);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rank);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.chances);
            if (message.rewards != null && message.rewards.length)
                for (var i = 0; i < message.rewards.length; ++i)
                    $root.ActMsg.nation_day_reward_info.encode(message.rewards[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified nation_race_info_resp message, length delimited. Does not implicitly {@link ActMsg.nation_race_info_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_info_resp
         * @static
         * @param {ActMsg.Ination_race_info_resp} message nation_race_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_info_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_info_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_info_resp} nation_race_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_info_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_info_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bullet_count = reader.uint32();
                    break;
                case 2:
                    message.entry_fee = reader.uint32();
                    break;
                case 3:
                    message.retry_fee = reader.uint32();
                    break;
                case 4:
                    message.bullet_left = reader.uint32();
                    break;
                case 5:
                    message.rank = reader.uint32();
                    break;
                case 6:
                    message.chances = reader.uint32();
                    break;
                case 7:
                    if (!(message.rewards && message.rewards.length))
                        message.rewards = [];
                    message.rewards.push($root.ActMsg.nation_day_reward_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("bullet_count"))
                throw $util.ProtocolError("missing required 'bullet_count'", { instance: message });
            if (!message.hasOwnProperty("entry_fee"))
                throw $util.ProtocolError("missing required 'entry_fee'", { instance: message });
            if (!message.hasOwnProperty("retry_fee"))
                throw $util.ProtocolError("missing required 'retry_fee'", { instance: message });
            if (!message.hasOwnProperty("bullet_left"))
                throw $util.ProtocolError("missing required 'bullet_left'", { instance: message });
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chances"))
                throw $util.ProtocolError("missing required 'chances'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_info_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_info_resp} nation_race_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_info_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_info_resp message.
         * @function verify
         * @memberof ActMsg.nation_race_info_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_info_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.bullet_count))
                return "bullet_count: integer expected";
            if (!$util.isInteger(message.entry_fee))
                return "entry_fee: integer expected";
            if (!$util.isInteger(message.retry_fee))
                return "retry_fee: integer expected";
            if (!$util.isInteger(message.bullet_left))
                return "bullet_left: integer expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chances))
                return "chances: integer expected";
            if (message.rewards != null && message.hasOwnProperty("rewards")) {
                if (!Array.isArray(message.rewards))
                    return "rewards: array expected";
                for (var i = 0; i < message.rewards.length; ++i) {
                    var error = $root.ActMsg.nation_day_reward_info.verify(message.rewards[i]);
                    if (error)
                        return "rewards." + error;
                }
            }
            return null;
        };

        return nation_race_info_resp;
    })();

    ActMsg.nation_day_reward_info = (function() {

        /**
         * Properties of a nation_day_reward_info.
         * @memberof ActMsg
         * @interface Ination_day_reward_info
         * @property {number} rank nation_day_reward_info rank
         * @property {number|Long} chips nation_day_reward_info chips
         * @property {number|null} [max_rank] nation_day_reward_info max_rank
         */

        /**
         * Constructs a new nation_day_reward_info.
         * @memberof ActMsg
         * @classdesc Represents a nation_day_reward_info.
         * @implements Ination_day_reward_info
         * @constructor
         * @param {ActMsg.Ination_day_reward_info=} [properties] Properties to set
         */
        function nation_day_reward_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_day_reward_info rank.
         * @member {number} rank
         * @memberof ActMsg.nation_day_reward_info
         * @instance
         */
        nation_day_reward_info.prototype.rank = 0;

        /**
         * nation_day_reward_info chips.
         * @member {number|Long} chips
         * @memberof ActMsg.nation_day_reward_info
         * @instance
         */
        nation_day_reward_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_reward_info max_rank.
         * @member {number} max_rank
         * @memberof ActMsg.nation_day_reward_info
         * @instance
         */
        nation_day_reward_info.prototype.max_rank = 0;

        /**
         * Creates a new nation_day_reward_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_day_reward_info
         * @static
         * @param {ActMsg.Ination_day_reward_info=} [properties] Properties to set
         * @returns {ActMsg.nation_day_reward_info} nation_day_reward_info instance
         */
        nation_day_reward_info.create = function create(properties) {
            return new nation_day_reward_info(properties);
        };

        /**
         * Encodes the specified nation_day_reward_info message. Does not implicitly {@link ActMsg.nation_day_reward_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_day_reward_info
         * @static
         * @param {ActMsg.Ination_day_reward_info} message nation_day_reward_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_reward_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.chips);
            if (message.max_rank != null && message.hasOwnProperty("max_rank"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_rank);
            return writer;
        };

        /**
         * Encodes the specified nation_day_reward_info message, length delimited. Does not implicitly {@link ActMsg.nation_day_reward_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_day_reward_info
         * @static
         * @param {ActMsg.Ination_day_reward_info} message nation_day_reward_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_reward_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_day_reward_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_day_reward_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_day_reward_info} nation_day_reward_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_reward_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_day_reward_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rank = reader.uint32();
                    break;
                case 2:
                    message.chips = reader.uint64();
                    break;
                case 3:
                    message.max_rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_day_reward_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_day_reward_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_day_reward_info} nation_day_reward_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_reward_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_day_reward_info message.
         * @function verify
         * @memberof ActMsg.nation_day_reward_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_day_reward_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (message.max_rank != null && message.hasOwnProperty("max_rank"))
                if (!$util.isInteger(message.max_rank))
                    return "max_rank: integer expected";
            return null;
        };

        return nation_day_reward_info;
    })();

    ActMsg.nation_race_over_req = (function() {

        /**
         * Properties of a nation_race_over_req.
         * @memberof ActMsg
         * @interface Ination_race_over_req
         * @property {number|Long} uid nation_race_over_req uid
         * @property {number} race_id nation_race_over_req race_id
         */

        /**
         * Constructs a new nation_race_over_req.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_over_req.
         * @implements Ination_race_over_req
         * @constructor
         * @param {ActMsg.Ination_race_over_req=} [properties] Properties to set
         */
        function nation_race_over_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_over_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.nation_race_over_req
         * @instance
         */
        nation_race_over_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race_over_req race_id.
         * @member {number} race_id
         * @memberof ActMsg.nation_race_over_req
         * @instance
         */
        nation_race_over_req.prototype.race_id = 0;

        /**
         * Creates a new nation_race_over_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_over_req
         * @static
         * @param {ActMsg.Ination_race_over_req=} [properties] Properties to set
         * @returns {ActMsg.nation_race_over_req} nation_race_over_req instance
         */
        nation_race_over_req.create = function create(properties) {
            return new nation_race_over_req(properties);
        };

        /**
         * Encodes the specified nation_race_over_req message. Does not implicitly {@link ActMsg.nation_race_over_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_over_req
         * @static
         * @param {ActMsg.Ination_race_over_req} message nation_race_over_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_over_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.race_id);
            return writer;
        };

        /**
         * Encodes the specified nation_race_over_req message, length delimited. Does not implicitly {@link ActMsg.nation_race_over_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_over_req
         * @static
         * @param {ActMsg.Ination_race_over_req} message nation_race_over_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_over_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_over_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_over_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_over_req} nation_race_over_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_over_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_over_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.race_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("race_id"))
                throw $util.ProtocolError("missing required 'race_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_over_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_over_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_over_req} nation_race_over_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_over_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_over_req message.
         * @function verify
         * @memberof ActMsg.nation_race_over_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_over_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.race_id))
                return "race_id: integer expected";
            return null;
        };

        return nation_race_over_req;
    })();

    ActMsg.nation_race_sign_resp = (function() {

        /**
         * Properties of a nation_race_sign_resp.
         * @memberof ActMsg
         * @interface Ination_race_sign_resp
         * @property {number|Long} jettonshow nation_race_sign_resp jettonshow
         * @property {number} bulletleft nation_race_sign_resp bulletleft
         */

        /**
         * Constructs a new nation_race_sign_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_sign_resp.
         * @implements Ination_race_sign_resp
         * @constructor
         * @param {ActMsg.Ination_race_sign_resp=} [properties] Properties to set
         */
        function nation_race_sign_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_sign_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof ActMsg.nation_race_sign_resp
         * @instance
         */
        nation_race_sign_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_race_sign_resp bulletleft.
         * @member {number} bulletleft
         * @memberof ActMsg.nation_race_sign_resp
         * @instance
         */
        nation_race_sign_resp.prototype.bulletleft = 0;

        /**
         * Creates a new nation_race_sign_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_sign_resp
         * @static
         * @param {ActMsg.Ination_race_sign_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_race_sign_resp} nation_race_sign_resp instance
         */
        nation_race_sign_resp.create = function create(properties) {
            return new nation_race_sign_resp(properties);
        };

        /**
         * Encodes the specified nation_race_sign_resp message. Does not implicitly {@link ActMsg.nation_race_sign_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_sign_resp
         * @static
         * @param {ActMsg.Ination_race_sign_resp} message nation_race_sign_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_sign_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.jettonshow);
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.bulletleft);
            return writer;
        };

        /**
         * Encodes the specified nation_race_sign_resp message, length delimited. Does not implicitly {@link ActMsg.nation_race_sign_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_sign_resp
         * @static
         * @param {ActMsg.Ination_race_sign_resp} message nation_race_sign_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_sign_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_sign_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_sign_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_sign_resp} nation_race_sign_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_sign_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_sign_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7:
                    message.jettonshow = reader.uint64();
                    break;
                case 8:
                    message.bulletleft = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            if (!message.hasOwnProperty("bulletleft"))
                throw $util.ProtocolError("missing required 'bulletleft'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_sign_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_sign_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_sign_resp} nation_race_sign_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_sign_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_sign_resp message.
         * @function verify
         * @memberof ActMsg.nation_race_sign_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_sign_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (!$util.isInteger(message.bulletleft))
                return "bulletleft: integer expected";
            return null;
        };

        return nation_race_sign_resp;
    })();

    ActMsg.nation_race_over_resp = (function() {

        /**
         * Properties of a nation_race_over_resp.
         * @memberof ActMsg
         * @interface Ination_race_over_resp
         * @property {number} high_point nation_race_over_resp high_point
         * @property {number} self_rank nation_race_over_resp self_rank
         * @property {number} self_point nation_race_over_resp self_point
         * @property {boolean} game_over nation_race_over_resp game_over
         * @property {number} retry_fee nation_race_over_resp retry_fee
         */

        /**
         * Constructs a new nation_race_over_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_race_over_resp.
         * @implements Ination_race_over_resp
         * @constructor
         * @param {ActMsg.Ination_race_over_resp=} [properties] Properties to set
         */
        function nation_race_over_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_race_over_resp high_point.
         * @member {number} high_point
         * @memberof ActMsg.nation_race_over_resp
         * @instance
         */
        nation_race_over_resp.prototype.high_point = 0;

        /**
         * nation_race_over_resp self_rank.
         * @member {number} self_rank
         * @memberof ActMsg.nation_race_over_resp
         * @instance
         */
        nation_race_over_resp.prototype.self_rank = 0;

        /**
         * nation_race_over_resp self_point.
         * @member {number} self_point
         * @memberof ActMsg.nation_race_over_resp
         * @instance
         */
        nation_race_over_resp.prototype.self_point = 0;

        /**
         * nation_race_over_resp game_over.
         * @member {boolean} game_over
         * @memberof ActMsg.nation_race_over_resp
         * @instance
         */
        nation_race_over_resp.prototype.game_over = false;

        /**
         * nation_race_over_resp retry_fee.
         * @member {number} retry_fee
         * @memberof ActMsg.nation_race_over_resp
         * @instance
         */
        nation_race_over_resp.prototype.retry_fee = 0;

        /**
         * Creates a new nation_race_over_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_race_over_resp
         * @static
         * @param {ActMsg.Ination_race_over_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_race_over_resp} nation_race_over_resp instance
         */
        nation_race_over_resp.create = function create(properties) {
            return new nation_race_over_resp(properties);
        };

        /**
         * Encodes the specified nation_race_over_resp message. Does not implicitly {@link ActMsg.nation_race_over_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_race_over_resp
         * @static
         * @param {ActMsg.Ination_race_over_resp} message nation_race_over_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_over_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.high_point);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.self_rank);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.self_point);
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.game_over);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.retry_fee);
            return writer;
        };

        /**
         * Encodes the specified nation_race_over_resp message, length delimited. Does not implicitly {@link ActMsg.nation_race_over_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_race_over_resp
         * @static
         * @param {ActMsg.Ination_race_over_resp} message nation_race_over_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_race_over_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_race_over_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_race_over_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_race_over_resp} nation_race_over_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_over_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_race_over_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.high_point = reader.uint32();
                    break;
                case 2:
                    message.self_rank = reader.uint32();
                    break;
                case 3:
                    message.self_point = reader.uint32();
                    break;
                case 4:
                    message.game_over = reader.bool();
                    break;
                case 5:
                    message.retry_fee = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("high_point"))
                throw $util.ProtocolError("missing required 'high_point'", { instance: message });
            if (!message.hasOwnProperty("self_rank"))
                throw $util.ProtocolError("missing required 'self_rank'", { instance: message });
            if (!message.hasOwnProperty("self_point"))
                throw $util.ProtocolError("missing required 'self_point'", { instance: message });
            if (!message.hasOwnProperty("game_over"))
                throw $util.ProtocolError("missing required 'game_over'", { instance: message });
            if (!message.hasOwnProperty("retry_fee"))
                throw $util.ProtocolError("missing required 'retry_fee'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_race_over_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_race_over_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_race_over_resp} nation_race_over_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_race_over_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_race_over_resp message.
         * @function verify
         * @memberof ActMsg.nation_race_over_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_race_over_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.high_point))
                return "high_point: integer expected";
            if (!$util.isInteger(message.self_rank))
                return "self_rank: integer expected";
            if (!$util.isInteger(message.self_point))
                return "self_point: integer expected";
            if (typeof message.game_over !== "boolean")
                return "game_over: boolean expected";
            if (!$util.isInteger(message.retry_fee))
                return "retry_fee: integer expected";
            return null;
        };

        return nation_race_over_resp;
    })();

    ActMsg.nation_day_reward_resp = (function() {

        /**
         * Properties of a nation_day_reward_resp.
         * @memberof ActMsg
         * @interface Ination_day_reward_resp
         * @property {number|Long} uid nation_day_reward_resp uid
         * @property {number|Long} time nation_day_reward_resp time
         * @property {number} rank nation_day_reward_resp rank
         * @property {number|Long} chips nation_day_reward_resp chips
         * @property {number} type nation_day_reward_resp type
         * @property {number} day nation_day_reward_resp day
         * @property {number|Long|null} [race_id] nation_day_reward_resp race_id
         * @property {number|Long|null} [start_time] nation_day_reward_resp start_time
         * @property {string|null} [race_name] nation_day_reward_resp race_name
         * @property {number|null} [event_type_id] nation_day_reward_resp event_type_id
         */

        /**
         * Constructs a new nation_day_reward_resp.
         * @memberof ActMsg
         * @classdesc Represents a nation_day_reward_resp.
         * @implements Ination_day_reward_resp
         * @constructor
         * @param {ActMsg.Ination_day_reward_resp=} [properties] Properties to set
         */
        function nation_day_reward_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * nation_day_reward_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_reward_resp time.
         * @member {number|Long} time
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_reward_resp rank.
         * @member {number} rank
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.rank = 0;

        /**
         * nation_day_reward_resp chips.
         * @member {number|Long} chips
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_reward_resp type.
         * @member {number} type
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.type = 0;

        /**
         * nation_day_reward_resp day.
         * @member {number} day
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.day = 0;

        /**
         * nation_day_reward_resp race_id.
         * @member {number|Long} race_id
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.race_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_reward_resp start_time.
         * @member {number|Long} start_time
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.start_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * nation_day_reward_resp race_name.
         * @member {string} race_name
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.race_name = "";

        /**
         * nation_day_reward_resp event_type_id.
         * @member {number} event_type_id
         * @memberof ActMsg.nation_day_reward_resp
         * @instance
         */
        nation_day_reward_resp.prototype.event_type_id = 0;

        /**
         * Creates a new nation_day_reward_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.nation_day_reward_resp
         * @static
         * @param {ActMsg.Ination_day_reward_resp=} [properties] Properties to set
         * @returns {ActMsg.nation_day_reward_resp} nation_day_reward_resp instance
         */
        nation_day_reward_resp.create = function create(properties) {
            return new nation_day_reward_resp(properties);
        };

        /**
         * Encodes the specified nation_day_reward_resp message. Does not implicitly {@link ActMsg.nation_day_reward_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.nation_day_reward_resp
         * @static
         * @param {ActMsg.Ination_day_reward_resp} message nation_day_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_reward_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.time);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rank);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chips);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.type);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.day);
            if (message.race_id != null && message.hasOwnProperty("race_id"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.race_id);
            if (message.start_time != null && message.hasOwnProperty("start_time"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.start_time);
            if (message.race_name != null && message.hasOwnProperty("race_name"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.race_name);
            if (message.event_type_id != null && message.hasOwnProperty("event_type_id"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.event_type_id);
            return writer;
        };

        /**
         * Encodes the specified nation_day_reward_resp message, length delimited. Does not implicitly {@link ActMsg.nation_day_reward_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.nation_day_reward_resp
         * @static
         * @param {ActMsg.Ination_day_reward_resp} message nation_day_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        nation_day_reward_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a nation_day_reward_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.nation_day_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.nation_day_reward_resp} nation_day_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_reward_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.nation_day_reward_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.time = reader.uint64();
                    break;
                case 3:
                    message.rank = reader.uint32();
                    break;
                case 4:
                    message.chips = reader.uint64();
                    break;
                case 5:
                    message.type = reader.uint32();
                    break;
                case 6:
                    message.day = reader.uint32();
                    break;
                case 7:
                    message.race_id = reader.uint64();
                    break;
                case 8:
                    message.start_time = reader.uint64();
                    break;
                case 9:
                    message.race_name = reader.string();
                    break;
                case 10:
                    message.event_type_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("day"))
                throw $util.ProtocolError("missing required 'day'", { instance: message });
            return message;
        };

        /**
         * Decodes a nation_day_reward_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.nation_day_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.nation_day_reward_resp} nation_day_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        nation_day_reward_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a nation_day_reward_resp message.
         * @function verify
         * @memberof ActMsg.nation_day_reward_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        nation_day_reward_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.day))
                return "day: integer expected";
            if (message.race_id != null && message.hasOwnProperty("race_id"))
                if (!$util.isInteger(message.race_id) && !(message.race_id && $util.isInteger(message.race_id.low) && $util.isInteger(message.race_id.high)))
                    return "race_id: integer|Long expected";
            if (message.start_time != null && message.hasOwnProperty("start_time"))
                if (!$util.isInteger(message.start_time) && !(message.start_time && $util.isInteger(message.start_time.low) && $util.isInteger(message.start_time.high)))
                    return "start_time: integer|Long expected";
            if (message.race_name != null && message.hasOwnProperty("race_name"))
                if (!$util.isString(message.race_name))
                    return "race_name: string expected";
            if (message.event_type_id != null && message.hasOwnProperty("event_type_id"))
                if (!$util.isInteger(message.event_type_id))
                    return "event_type_id: integer expected";
            return null;
        };

        return nation_day_reward_resp;
    })();

    ActMsg.yuandan_info = (function() {

        /**
         * Properties of a yuandan_info.
         * @memberof ActMsg
         * @interface Iyuandan_info
         * @property {Array.<ActMsg.Iyuandan_task_info>|null} [tasks_conf] yuandan_info tasks_conf
         * @property {Array.<ActMsg.Iyuandan_rank_info>|null} [rank_conf] yuandan_info rank_conf
         */

        /**
         * Constructs a new yuandan_info.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_info.
         * @implements Iyuandan_info
         * @constructor
         * @param {ActMsg.Iyuandan_info=} [properties] Properties to set
         */
        function yuandan_info(properties) {
            this.tasks_conf = [];
            this.rank_conf = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_info tasks_conf.
         * @member {Array.<ActMsg.Iyuandan_task_info>} tasks_conf
         * @memberof ActMsg.yuandan_info
         * @instance
         */
        yuandan_info.prototype.tasks_conf = $util.emptyArray;

        /**
         * yuandan_info rank_conf.
         * @member {Array.<ActMsg.Iyuandan_rank_info>} rank_conf
         * @memberof ActMsg.yuandan_info
         * @instance
         */
        yuandan_info.prototype.rank_conf = $util.emptyArray;

        /**
         * Creates a new yuandan_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_info
         * @static
         * @param {ActMsg.Iyuandan_info=} [properties] Properties to set
         * @returns {ActMsg.yuandan_info} yuandan_info instance
         */
        yuandan_info.create = function create(properties) {
            return new yuandan_info(properties);
        };

        /**
         * Encodes the specified yuandan_info message. Does not implicitly {@link ActMsg.yuandan_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_info
         * @static
         * @param {ActMsg.Iyuandan_info} message yuandan_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tasks_conf != null && message.tasks_conf.length)
                for (var i = 0; i < message.tasks_conf.length; ++i)
                    $root.ActMsg.yuandan_task_info.encode(message.tasks_conf[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.rank_conf != null && message.rank_conf.length)
                for (var i = 0; i < message.rank_conf.length; ++i)
                    $root.ActMsg.yuandan_rank_info.encode(message.rank_conf[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified yuandan_info message, length delimited. Does not implicitly {@link ActMsg.yuandan_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_info
         * @static
         * @param {ActMsg.Iyuandan_info} message yuandan_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_info} yuandan_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tasks_conf && message.tasks_conf.length))
                        message.tasks_conf = [];
                    message.tasks_conf.push($root.ActMsg.yuandan_task_info.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.rank_conf && message.rank_conf.length))
                        message.rank_conf = [];
                    message.rank_conf.push($root.ActMsg.yuandan_rank_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a yuandan_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_info} yuandan_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_info message.
         * @function verify
         * @memberof ActMsg.yuandan_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tasks_conf != null && message.hasOwnProperty("tasks_conf")) {
                if (!Array.isArray(message.tasks_conf))
                    return "tasks_conf: array expected";
                for (var i = 0; i < message.tasks_conf.length; ++i) {
                    var error = $root.ActMsg.yuandan_task_info.verify(message.tasks_conf[i]);
                    if (error)
                        return "tasks_conf." + error;
                }
            }
            if (message.rank_conf != null && message.hasOwnProperty("rank_conf")) {
                if (!Array.isArray(message.rank_conf))
                    return "rank_conf: array expected";
                for (var i = 0; i < message.rank_conf.length; ++i) {
                    var error = $root.ActMsg.yuandan_rank_info.verify(message.rank_conf[i]);
                    if (error)
                        return "rank_conf." + error;
                }
            }
            return null;
        };

        return yuandan_info;
    })();

    ActMsg.yuandan_task_info = (function() {

        /**
         * Properties of a yuandan_task_info.
         * @memberof ActMsg
         * @interface Iyuandan_task_info
         * @property {number} task_id yuandan_task_info task_id
         * @property {number|Long} need_exp yuandan_task_info need_exp
         * @property {number|Long} award_chips yuandan_task_info award_chips
         * @property {number|Long} award_score yuandan_task_info award_score
         * @property {number} max yuandan_task_info max
         */

        /**
         * Constructs a new yuandan_task_info.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_task_info.
         * @implements Iyuandan_task_info
         * @constructor
         * @param {ActMsg.Iyuandan_task_info=} [properties] Properties to set
         */
        function yuandan_task_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_task_info task_id.
         * @member {number} task_id
         * @memberof ActMsg.yuandan_task_info
         * @instance
         */
        yuandan_task_info.prototype.task_id = 0;

        /**
         * yuandan_task_info need_exp.
         * @member {number|Long} need_exp
         * @memberof ActMsg.yuandan_task_info
         * @instance
         */
        yuandan_task_info.prototype.need_exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_task_info award_chips.
         * @member {number|Long} award_chips
         * @memberof ActMsg.yuandan_task_info
         * @instance
         */
        yuandan_task_info.prototype.award_chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_task_info award_score.
         * @member {number|Long} award_score
         * @memberof ActMsg.yuandan_task_info
         * @instance
         */
        yuandan_task_info.prototype.award_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_task_info max.
         * @member {number} max
         * @memberof ActMsg.yuandan_task_info
         * @instance
         */
        yuandan_task_info.prototype.max = 0;

        /**
         * Creates a new yuandan_task_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_task_info
         * @static
         * @param {ActMsg.Iyuandan_task_info=} [properties] Properties to set
         * @returns {ActMsg.yuandan_task_info} yuandan_task_info instance
         */
        yuandan_task_info.create = function create(properties) {
            return new yuandan_task_info(properties);
        };

        /**
         * Encodes the specified yuandan_task_info message. Does not implicitly {@link ActMsg.yuandan_task_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_task_info
         * @static
         * @param {ActMsg.Iyuandan_task_info} message yuandan_task_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_task_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.task_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.need_exp);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.award_chips);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.award_score);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.max);
            return writer;
        };

        /**
         * Encodes the specified yuandan_task_info message, length delimited. Does not implicitly {@link ActMsg.yuandan_task_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_task_info
         * @static
         * @param {ActMsg.Iyuandan_task_info} message yuandan_task_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_task_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_task_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_task_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_task_info} yuandan_task_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_task_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_task_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.task_id = reader.uint32();
                    break;
                case 2:
                    message.need_exp = reader.uint64();
                    break;
                case 3:
                    message.award_chips = reader.uint64();
                    break;
                case 4:
                    message.award_score = reader.uint64();
                    break;
                case 5:
                    message.max = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("task_id"))
                throw $util.ProtocolError("missing required 'task_id'", { instance: message });
            if (!message.hasOwnProperty("need_exp"))
                throw $util.ProtocolError("missing required 'need_exp'", { instance: message });
            if (!message.hasOwnProperty("award_chips"))
                throw $util.ProtocolError("missing required 'award_chips'", { instance: message });
            if (!message.hasOwnProperty("award_score"))
                throw $util.ProtocolError("missing required 'award_score'", { instance: message });
            if (!message.hasOwnProperty("max"))
                throw $util.ProtocolError("missing required 'max'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_task_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_task_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_task_info} yuandan_task_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_task_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_task_info message.
         * @function verify
         * @memberof ActMsg.yuandan_task_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_task_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.task_id))
                return "task_id: integer expected";
            if (!$util.isInteger(message.need_exp) && !(message.need_exp && $util.isInteger(message.need_exp.low) && $util.isInteger(message.need_exp.high)))
                return "need_exp: integer|Long expected";
            if (!$util.isInteger(message.award_chips) && !(message.award_chips && $util.isInteger(message.award_chips.low) && $util.isInteger(message.award_chips.high)))
                return "award_chips: integer|Long expected";
            if (!$util.isInteger(message.award_score) && !(message.award_score && $util.isInteger(message.award_score.low) && $util.isInteger(message.award_score.high)))
                return "award_score: integer|Long expected";
            if (!$util.isInteger(message.max))
                return "max: integer expected";
            return null;
        };

        return yuandan_task_info;
    })();

    ActMsg.yuandan_rank_info = (function() {

        /**
         * Properties of a yuandan_rank_info.
         * @memberof ActMsg
         * @interface Iyuandan_rank_info
         * @property {number} rank yuandan_rank_info rank
         * @property {number|Long} chips yuandan_rank_info chips
         * @property {number|null} [max_rank] yuandan_rank_info max_rank
         */

        /**
         * Constructs a new yuandan_rank_info.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_rank_info.
         * @implements Iyuandan_rank_info
         * @constructor
         * @param {ActMsg.Iyuandan_rank_info=} [properties] Properties to set
         */
        function yuandan_rank_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_rank_info rank.
         * @member {number} rank
         * @memberof ActMsg.yuandan_rank_info
         * @instance
         */
        yuandan_rank_info.prototype.rank = 0;

        /**
         * yuandan_rank_info chips.
         * @member {number|Long} chips
         * @memberof ActMsg.yuandan_rank_info
         * @instance
         */
        yuandan_rank_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_rank_info max_rank.
         * @member {number} max_rank
         * @memberof ActMsg.yuandan_rank_info
         * @instance
         */
        yuandan_rank_info.prototype.max_rank = 0;

        /**
         * Creates a new yuandan_rank_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_rank_info
         * @static
         * @param {ActMsg.Iyuandan_rank_info=} [properties] Properties to set
         * @returns {ActMsg.yuandan_rank_info} yuandan_rank_info instance
         */
        yuandan_rank_info.create = function create(properties) {
            return new yuandan_rank_info(properties);
        };

        /**
         * Encodes the specified yuandan_rank_info message. Does not implicitly {@link ActMsg.yuandan_rank_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_rank_info
         * @static
         * @param {ActMsg.Iyuandan_rank_info} message yuandan_rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_rank_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.chips);
            if (message.max_rank != null && message.hasOwnProperty("max_rank"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_rank);
            return writer;
        };

        /**
         * Encodes the specified yuandan_rank_info message, length delimited. Does not implicitly {@link ActMsg.yuandan_rank_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_rank_info
         * @static
         * @param {ActMsg.Iyuandan_rank_info} message yuandan_rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_rank_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_rank_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_rank_info} yuandan_rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_rank_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_rank_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rank = reader.uint32();
                    break;
                case 2:
                    message.chips = reader.uint64();
                    break;
                case 3:
                    message.max_rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("rank"))
                throw $util.ProtocolError("missing required 'rank'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_rank_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_rank_info} yuandan_rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_rank_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_rank_info message.
         * @function verify
         * @memberof ActMsg.yuandan_rank_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_rank_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (message.max_rank != null && message.hasOwnProperty("max_rank"))
                if (!$util.isInteger(message.max_rank))
                    return "max_rank: integer expected";
            return null;
        };

        return yuandan_rank_info;
    })();

    ActMsg.yuandan_daily_req = (function() {

        /**
         * Properties of a yuandan_daily_req.
         * @memberof ActMsg
         * @interface Iyuandan_daily_req
         * @property {number|Long} uid yuandan_daily_req uid
         */

        /**
         * Constructs a new yuandan_daily_req.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_daily_req.
         * @implements Iyuandan_daily_req
         * @constructor
         * @param {ActMsg.Iyuandan_daily_req=} [properties] Properties to set
         */
        function yuandan_daily_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_daily_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.yuandan_daily_req
         * @instance
         */
        yuandan_daily_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new yuandan_daily_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_daily_req
         * @static
         * @param {ActMsg.Iyuandan_daily_req=} [properties] Properties to set
         * @returns {ActMsg.yuandan_daily_req} yuandan_daily_req instance
         */
        yuandan_daily_req.create = function create(properties) {
            return new yuandan_daily_req(properties);
        };

        /**
         * Encodes the specified yuandan_daily_req message. Does not implicitly {@link ActMsg.yuandan_daily_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_daily_req
         * @static
         * @param {ActMsg.Iyuandan_daily_req} message yuandan_daily_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified yuandan_daily_req message, length delimited. Does not implicitly {@link ActMsg.yuandan_daily_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_daily_req
         * @static
         * @param {ActMsg.Iyuandan_daily_req} message yuandan_daily_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_daily_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_daily_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_daily_req} yuandan_daily_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_daily_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_daily_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_daily_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_daily_req} yuandan_daily_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_daily_req message.
         * @function verify
         * @memberof ActMsg.yuandan_daily_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_daily_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return yuandan_daily_req;
    })();

    ActMsg.yuandan_daily_resp = (function() {

        /**
         * Properties of a yuandan_daily_resp.
         * @memberof ActMsg
         * @interface Iyuandan_daily_resp
         * @property {number|Long} uid yuandan_daily_resp uid
         * @property {number|Long} exp yuandan_daily_resp exp
         * @property {Array.<ActMsg.Iyuandan_role_task_info>|null} [tasks] yuandan_daily_resp tasks
         */

        /**
         * Constructs a new yuandan_daily_resp.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_daily_resp.
         * @implements Iyuandan_daily_resp
         * @constructor
         * @param {ActMsg.Iyuandan_daily_resp=} [properties] Properties to set
         */
        function yuandan_daily_resp(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_daily_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.yuandan_daily_resp
         * @instance
         */
        yuandan_daily_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_daily_resp exp.
         * @member {number|Long} exp
         * @memberof ActMsg.yuandan_daily_resp
         * @instance
         */
        yuandan_daily_resp.prototype.exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_daily_resp tasks.
         * @member {Array.<ActMsg.Iyuandan_role_task_info>} tasks
         * @memberof ActMsg.yuandan_daily_resp
         * @instance
         */
        yuandan_daily_resp.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new yuandan_daily_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_daily_resp
         * @static
         * @param {ActMsg.Iyuandan_daily_resp=} [properties] Properties to set
         * @returns {ActMsg.yuandan_daily_resp} yuandan_daily_resp instance
         */
        yuandan_daily_resp.create = function create(properties) {
            return new yuandan_daily_resp(properties);
        };

        /**
         * Encodes the specified yuandan_daily_resp message. Does not implicitly {@link ActMsg.yuandan_daily_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_daily_resp
         * @static
         * @param {ActMsg.Iyuandan_daily_resp} message yuandan_daily_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.exp);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.ActMsg.yuandan_role_task_info.encode(message.tasks[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified yuandan_daily_resp message, length delimited. Does not implicitly {@link ActMsg.yuandan_daily_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_daily_resp
         * @static
         * @param {ActMsg.Iyuandan_daily_resp} message yuandan_daily_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_daily_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_daily_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_daily_resp} yuandan_daily_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_daily_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.exp = reader.uint64();
                    break;
                case 3:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.ActMsg.yuandan_role_task_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("exp"))
                throw $util.ProtocolError("missing required 'exp'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_daily_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_daily_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_daily_resp} yuandan_daily_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_daily_resp message.
         * @function verify
         * @memberof ActMsg.yuandan_daily_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_daily_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.exp) && !(message.exp && $util.isInteger(message.exp.low) && $util.isInteger(message.exp.high)))
                return "exp: integer|Long expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.ActMsg.yuandan_role_task_info.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        return yuandan_daily_resp;
    })();

    ActMsg.yuandan_role_task_info = (function() {

        /**
         * Properties of a yuandan_role_task_info.
         * @memberof ActMsg
         * @interface Iyuandan_role_task_info
         * @property {number} task_id yuandan_role_task_info task_id
         * @property {number} num yuandan_role_task_info num
         * @property {number} award_state yuandan_role_task_info award_state
         */

        /**
         * Constructs a new yuandan_role_task_info.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_role_task_info.
         * @implements Iyuandan_role_task_info
         * @constructor
         * @param {ActMsg.Iyuandan_role_task_info=} [properties] Properties to set
         */
        function yuandan_role_task_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_role_task_info task_id.
         * @member {number} task_id
         * @memberof ActMsg.yuandan_role_task_info
         * @instance
         */
        yuandan_role_task_info.prototype.task_id = 0;

        /**
         * yuandan_role_task_info num.
         * @member {number} num
         * @memberof ActMsg.yuandan_role_task_info
         * @instance
         */
        yuandan_role_task_info.prototype.num = 0;

        /**
         * yuandan_role_task_info award_state.
         * @member {number} award_state
         * @memberof ActMsg.yuandan_role_task_info
         * @instance
         */
        yuandan_role_task_info.prototype.award_state = 0;

        /**
         * Creates a new yuandan_role_task_info instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_role_task_info
         * @static
         * @param {ActMsg.Iyuandan_role_task_info=} [properties] Properties to set
         * @returns {ActMsg.yuandan_role_task_info} yuandan_role_task_info instance
         */
        yuandan_role_task_info.create = function create(properties) {
            return new yuandan_role_task_info(properties);
        };

        /**
         * Encodes the specified yuandan_role_task_info message. Does not implicitly {@link ActMsg.yuandan_role_task_info.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_role_task_info
         * @static
         * @param {ActMsg.Iyuandan_role_task_info} message yuandan_role_task_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_role_task_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.task_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.num);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.award_state);
            return writer;
        };

        /**
         * Encodes the specified yuandan_role_task_info message, length delimited. Does not implicitly {@link ActMsg.yuandan_role_task_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_role_task_info
         * @static
         * @param {ActMsg.Iyuandan_role_task_info} message yuandan_role_task_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_role_task_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_role_task_info message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_role_task_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_role_task_info} yuandan_role_task_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_role_task_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_role_task_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.task_id = reader.uint32();
                    break;
                case 2:
                    message.num = reader.uint32();
                    break;
                case 3:
                    message.award_state = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("task_id"))
                throw $util.ProtocolError("missing required 'task_id'", { instance: message });
            if (!message.hasOwnProperty("num"))
                throw $util.ProtocolError("missing required 'num'", { instance: message });
            if (!message.hasOwnProperty("award_state"))
                throw $util.ProtocolError("missing required 'award_state'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_role_task_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_role_task_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_role_task_info} yuandan_role_task_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_role_task_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_role_task_info message.
         * @function verify
         * @memberof ActMsg.yuandan_role_task_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_role_task_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.task_id))
                return "task_id: integer expected";
            if (!$util.isInteger(message.num))
                return "num: integer expected";
            if (!$util.isInteger(message.award_state))
                return "award_state: integer expected";
            return null;
        };

        return yuandan_role_task_info;
    })();

    ActMsg.yuandan_daily_reward_req = (function() {

        /**
         * Properties of a yuandan_daily_reward_req.
         * @memberof ActMsg
         * @interface Iyuandan_daily_reward_req
         * @property {number|Long} uid yuandan_daily_reward_req uid
         * @property {number} task_id yuandan_daily_reward_req task_id
         */

        /**
         * Constructs a new yuandan_daily_reward_req.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_daily_reward_req.
         * @implements Iyuandan_daily_reward_req
         * @constructor
         * @param {ActMsg.Iyuandan_daily_reward_req=} [properties] Properties to set
         */
        function yuandan_daily_reward_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_daily_reward_req uid.
         * @member {number|Long} uid
         * @memberof ActMsg.yuandan_daily_reward_req
         * @instance
         */
        yuandan_daily_reward_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_daily_reward_req task_id.
         * @member {number} task_id
         * @memberof ActMsg.yuandan_daily_reward_req
         * @instance
         */
        yuandan_daily_reward_req.prototype.task_id = 0;

        /**
         * Creates a new yuandan_daily_reward_req instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_daily_reward_req
         * @static
         * @param {ActMsg.Iyuandan_daily_reward_req=} [properties] Properties to set
         * @returns {ActMsg.yuandan_daily_reward_req} yuandan_daily_reward_req instance
         */
        yuandan_daily_reward_req.create = function create(properties) {
            return new yuandan_daily_reward_req(properties);
        };

        /**
         * Encodes the specified yuandan_daily_reward_req message. Does not implicitly {@link ActMsg.yuandan_daily_reward_req.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_daily_reward_req
         * @static
         * @param {ActMsg.Iyuandan_daily_reward_req} message yuandan_daily_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_reward_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.task_id);
            return writer;
        };

        /**
         * Encodes the specified yuandan_daily_reward_req message, length delimited. Does not implicitly {@link ActMsg.yuandan_daily_reward_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_daily_reward_req
         * @static
         * @param {ActMsg.Iyuandan_daily_reward_req} message yuandan_daily_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_reward_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_daily_reward_req message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_daily_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_daily_reward_req} yuandan_daily_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_reward_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_daily_reward_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.task_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("task_id"))
                throw $util.ProtocolError("missing required 'task_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_daily_reward_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_daily_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_daily_reward_req} yuandan_daily_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_reward_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_daily_reward_req message.
         * @function verify
         * @memberof ActMsg.yuandan_daily_reward_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_daily_reward_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.task_id))
                return "task_id: integer expected";
            return null;
        };

        return yuandan_daily_reward_req;
    })();

    ActMsg.yuandan_daily_reward_resp = (function() {

        /**
         * Properties of a yuandan_daily_reward_resp.
         * @memberof ActMsg
         * @interface Iyuandan_daily_reward_resp
         * @property {number|Long} uid yuandan_daily_reward_resp uid
         * @property {number} task_id yuandan_daily_reward_resp task_id
         * @property {number} code yuandan_daily_reward_resp code
         */

        /**
         * Constructs a new yuandan_daily_reward_resp.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_daily_reward_resp.
         * @implements Iyuandan_daily_reward_resp
         * @constructor
         * @param {ActMsg.Iyuandan_daily_reward_resp=} [properties] Properties to set
         */
        function yuandan_daily_reward_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_daily_reward_resp uid.
         * @member {number|Long} uid
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @instance
         */
        yuandan_daily_reward_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_daily_reward_resp task_id.
         * @member {number} task_id
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @instance
         */
        yuandan_daily_reward_resp.prototype.task_id = 0;

        /**
         * yuandan_daily_reward_resp code.
         * @member {number} code
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @instance
         */
        yuandan_daily_reward_resp.prototype.code = 0;

        /**
         * Creates a new yuandan_daily_reward_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @static
         * @param {ActMsg.Iyuandan_daily_reward_resp=} [properties] Properties to set
         * @returns {ActMsg.yuandan_daily_reward_resp} yuandan_daily_reward_resp instance
         */
        yuandan_daily_reward_resp.create = function create(properties) {
            return new yuandan_daily_reward_resp(properties);
        };

        /**
         * Encodes the specified yuandan_daily_reward_resp message. Does not implicitly {@link ActMsg.yuandan_daily_reward_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @static
         * @param {ActMsg.Iyuandan_daily_reward_resp} message yuandan_daily_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_reward_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.task_id);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.code);
            return writer;
        };

        /**
         * Encodes the specified yuandan_daily_reward_resp message, length delimited. Does not implicitly {@link ActMsg.yuandan_daily_reward_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @static
         * @param {ActMsg.Iyuandan_daily_reward_resp} message yuandan_daily_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_daily_reward_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_daily_reward_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_daily_reward_resp} yuandan_daily_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_reward_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_daily_reward_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.task_id = reader.uint32();
                    break;
                case 3:
                    message.code = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("task_id"))
                throw $util.ProtocolError("missing required 'task_id'", { instance: message });
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_daily_reward_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_daily_reward_resp} yuandan_daily_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_daily_reward_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_daily_reward_resp message.
         * @function verify
         * @memberof ActMsg.yuandan_daily_reward_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_daily_reward_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.task_id))
                return "task_id: integer expected";
            if (!$util.isInteger(message.code))
                return "code: integer expected";
            return null;
        };

        return yuandan_daily_reward_resp;
    })();

    ActMsg.yuandan_notice_resp = (function() {

        /**
         * Properties of a yuandan_notice_resp.
         * @memberof ActMsg
         * @interface Iyuandan_notice_resp
         */

        /**
         * Constructs a new yuandan_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_notice_resp.
         * @implements Iyuandan_notice_resp
         * @constructor
         * @param {ActMsg.Iyuandan_notice_resp=} [properties] Properties to set
         */
        function yuandan_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new yuandan_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_notice_resp
         * @static
         * @param {ActMsg.Iyuandan_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.yuandan_notice_resp} yuandan_notice_resp instance
         */
        yuandan_notice_resp.create = function create(properties) {
            return new yuandan_notice_resp(properties);
        };

        /**
         * Encodes the specified yuandan_notice_resp message. Does not implicitly {@link ActMsg.yuandan_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_notice_resp
         * @static
         * @param {ActMsg.Iyuandan_notice_resp} message yuandan_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified yuandan_notice_resp message, length delimited. Does not implicitly {@link ActMsg.yuandan_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_notice_resp
         * @static
         * @param {ActMsg.Iyuandan_notice_resp} message yuandan_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_notice_resp} yuandan_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a yuandan_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_notice_resp} yuandan_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_notice_resp message.
         * @function verify
         * @memberof ActMsg.yuandan_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return yuandan_notice_resp;
    })();

    ActMsg.yuandan_reward_notice_resp = (function() {

        /**
         * Properties of a yuandan_reward_notice_resp.
         * @memberof ActMsg
         * @interface Iyuandan_reward_notice_resp
         * @property {number|Long} act_uid yuandan_reward_notice_resp act_uid
         * @property {number} type yuandan_reward_notice_resp type
         * @property {number|Long} chips yuandan_reward_notice_resp chips
         * @property {number|null} [rank] yuandan_reward_notice_resp rank
         */

        /**
         * Constructs a new yuandan_reward_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a yuandan_reward_notice_resp.
         * @implements Iyuandan_reward_notice_resp
         * @constructor
         * @param {ActMsg.Iyuandan_reward_notice_resp=} [properties] Properties to set
         */
        function yuandan_reward_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * yuandan_reward_notice_resp act_uid.
         * @member {number|Long} act_uid
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @instance
         */
        yuandan_reward_notice_resp.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_reward_notice_resp type.
         * @member {number} type
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @instance
         */
        yuandan_reward_notice_resp.prototype.type = 0;

        /**
         * yuandan_reward_notice_resp chips.
         * @member {number|Long} chips
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @instance
         */
        yuandan_reward_notice_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * yuandan_reward_notice_resp rank.
         * @member {number} rank
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @instance
         */
        yuandan_reward_notice_resp.prototype.rank = 0;

        /**
         * Creates a new yuandan_reward_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @static
         * @param {ActMsg.Iyuandan_reward_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.yuandan_reward_notice_resp} yuandan_reward_notice_resp instance
         */
        yuandan_reward_notice_resp.create = function create(properties) {
            return new yuandan_reward_notice_resp(properties);
        };

        /**
         * Encodes the specified yuandan_reward_notice_resp message. Does not implicitly {@link ActMsg.yuandan_reward_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @static
         * @param {ActMsg.Iyuandan_reward_notice_resp} message yuandan_reward_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_reward_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.act_uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chips);
            if (message.rank != null && message.hasOwnProperty("rank"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rank);
            return writer;
        };

        /**
         * Encodes the specified yuandan_reward_notice_resp message, length delimited. Does not implicitly {@link ActMsg.yuandan_reward_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @static
         * @param {ActMsg.Iyuandan_reward_notice_resp} message yuandan_reward_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        yuandan_reward_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a yuandan_reward_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.yuandan_reward_notice_resp} yuandan_reward_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_reward_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.yuandan_reward_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.act_uid = reader.uint64();
                    break;
                case 2:
                    message.type = reader.uint32();
                    break;
                case 3:
                    message.chips = reader.uint64();
                    break;
                case 4:
                    message.rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a yuandan_reward_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.yuandan_reward_notice_resp} yuandan_reward_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        yuandan_reward_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a yuandan_reward_notice_resp message.
         * @function verify
         * @memberof ActMsg.yuandan_reward_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        yuandan_reward_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (message.rank != null && message.hasOwnProperty("rank"))
                if (!$util.isInteger(message.rank))
                    return "rank: integer expected";
            return null;
        };

        return yuandan_reward_notice_resp;
    })();

    ActMsg.top_12_notice_resp = (function() {

        /**
         * Properties of a top_12_notice_resp.
         * @memberof ActMsg
         * @interface Itop_12_notice_resp
         * @property {string} content top_12_notice_resp content
         */

        /**
         * Constructs a new top_12_notice_resp.
         * @memberof ActMsg
         * @classdesc Represents a top_12_notice_resp.
         * @implements Itop_12_notice_resp
         * @constructor
         * @param {ActMsg.Itop_12_notice_resp=} [properties] Properties to set
         */
        function top_12_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * top_12_notice_resp content.
         * @member {string} content
         * @memberof ActMsg.top_12_notice_resp
         * @instance
         */
        top_12_notice_resp.prototype.content = "";

        /**
         * Creates a new top_12_notice_resp instance using the specified properties.
         * @function create
         * @memberof ActMsg.top_12_notice_resp
         * @static
         * @param {ActMsg.Itop_12_notice_resp=} [properties] Properties to set
         * @returns {ActMsg.top_12_notice_resp} top_12_notice_resp instance
         */
        top_12_notice_resp.create = function create(properties) {
            return new top_12_notice_resp(properties);
        };

        /**
         * Encodes the specified top_12_notice_resp message. Does not implicitly {@link ActMsg.top_12_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof ActMsg.top_12_notice_resp
         * @static
         * @param {ActMsg.Itop_12_notice_resp} message top_12_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        top_12_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
            return writer;
        };

        /**
         * Encodes the specified top_12_notice_resp message, length delimited. Does not implicitly {@link ActMsg.top_12_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ActMsg.top_12_notice_resp
         * @static
         * @param {ActMsg.Itop_12_notice_resp} message top_12_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        top_12_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a top_12_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ActMsg.top_12_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ActMsg.top_12_notice_resp} top_12_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        top_12_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActMsg.top_12_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.content = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("content"))
                throw $util.ProtocolError("missing required 'content'", { instance: message });
            return message;
        };

        /**
         * Decodes a top_12_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ActMsg.top_12_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ActMsg.top_12_notice_resp} top_12_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        top_12_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a top_12_notice_resp message.
         * @function verify
         * @memberof ActMsg.top_12_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        top_12_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.content))
                return "content: string expected";
            return null;
        };

        return top_12_notice_resp;
    })();

    return ActMsg;
})();

$root.CommonMsg = (function() {

    /**
     * Namespace CommonMsg.
     * @exports CommonMsg
     * @namespace
     */
    var CommonMsg = {};

    CommonMsg.undefined = (function() {

        /**
         * Properties of an undefined.
         * @memberof CommonMsg
         * @interface Iundefined
         */

        /**
         * Constructs a new undefined.
         * @memberof CommonMsg
         * @classdesc Represents an undefined.
         * @implements Iundefined
         * @constructor
         * @param {CommonMsg.Iundefined=} [properties] Properties to set
         */
        function undefined(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new undefined instance using the specified properties.
         * @function create
         * @memberof CommonMsg.undefined
         * @static
         * @param {CommonMsg.Iundefined=} [properties] Properties to set
         * @returns {CommonMsg.undefined} undefined instance
         */
        undefined.create = function create(properties) {
            return new undefined(properties);
        };

        /**
         * Encodes the specified undefined message. Does not implicitly {@link CommonMsg.undefined.verify|verify} messages.
         * @function encode
         * @memberof CommonMsg.undefined
         * @static
         * @param {CommonMsg.Iundefined} message undefined message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        undefined.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified undefined message, length delimited. Does not implicitly {@link CommonMsg.undefined.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommonMsg.undefined
         * @static
         * @param {CommonMsg.Iundefined} message undefined message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        undefined.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an undefined message from the specified reader or buffer.
         * @function decode
         * @memberof CommonMsg.undefined
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CommonMsg.undefined} undefined
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        undefined.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommonMsg.undefined();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an undefined message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CommonMsg.undefined
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CommonMsg.undefined} undefined
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        undefined.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an undefined message.
         * @function verify
         * @memberof CommonMsg.undefined
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        undefined.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return undefined;
    })();

    /**
     * room_type enum.
     * @name CommonMsg.room_type
     * @enum {string}
     * @property {number} room_auto=0 room_auto value
     * @property {number} room_normal=1 room_normal value
     * @property {number} room_middle=2 room_middle value
     * @property {number} room_senior=3 room_senior value
     * @property {number} room_superfine=4 room_superfine value
     * @property {number} room_godly=5 room_godly value
     * @property {number} room_race=100 room_race value
     * @property {number} room_nation_race=101 room_nation_race value
     */
    CommonMsg.room_type = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "room_auto"] = 0;
        values[valuesById[1] = "room_normal"] = 1;
        values[valuesById[2] = "room_middle"] = 2;
        values[valuesById[3] = "room_senior"] = 3;
        values[valuesById[4] = "room_superfine"] = 4;
        values[valuesById[5] = "room_godly"] = 5;
        values[valuesById[100] = "room_race"] = 100;
        values[valuesById[101] = "room_nation_race"] = 101;
        return values;
    })();

    CommonMsg.dmsg_content = (function() {

        /**
         * Properties of a dmsg_content.
         * @memberof CommonMsg
         * @interface Idmsg_content
         * @property {string} msg_type dmsg_content msg_type
         * @property {string|null} [chars] dmsg_content chars
         * @property {number|Long|null} [number] dmsg_content number
         * @property {number|null} [id] dmsg_content id
         */

        /**
         * Constructs a new dmsg_content.
         * @memberof CommonMsg
         * @classdesc Represents a dmsg_content.
         * @implements Idmsg_content
         * @constructor
         * @param {CommonMsg.Idmsg_content=} [properties] Properties to set
         */
        function dmsg_content(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * dmsg_content msg_type.
         * @member {string} msg_type
         * @memberof CommonMsg.dmsg_content
         * @instance
         */
        dmsg_content.prototype.msg_type = "";

        /**
         * dmsg_content chars.
         * @member {string} chars
         * @memberof CommonMsg.dmsg_content
         * @instance
         */
        dmsg_content.prototype.chars = "";

        /**
         * dmsg_content number.
         * @member {number|Long} number
         * @memberof CommonMsg.dmsg_content
         * @instance
         */
        dmsg_content.prototype.number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * dmsg_content id.
         * @member {number} id
         * @memberof CommonMsg.dmsg_content
         * @instance
         */
        dmsg_content.prototype.id = 0;

        /**
         * Creates a new dmsg_content instance using the specified properties.
         * @function create
         * @memberof CommonMsg.dmsg_content
         * @static
         * @param {CommonMsg.Idmsg_content=} [properties] Properties to set
         * @returns {CommonMsg.dmsg_content} dmsg_content instance
         */
        dmsg_content.create = function create(properties) {
            return new dmsg_content(properties);
        };

        /**
         * Encodes the specified dmsg_content message. Does not implicitly {@link CommonMsg.dmsg_content.verify|verify} messages.
         * @function encode
         * @memberof CommonMsg.dmsg_content
         * @static
         * @param {CommonMsg.Idmsg_content} message dmsg_content message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dmsg_content.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.msg_type);
            if (message.chars != null && message.hasOwnProperty("chars"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.chars);
            if (message.number != null && message.hasOwnProperty("number"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.number);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified dmsg_content message, length delimited. Does not implicitly {@link CommonMsg.dmsg_content.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommonMsg.dmsg_content
         * @static
         * @param {CommonMsg.Idmsg_content} message dmsg_content message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dmsg_content.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a dmsg_content message from the specified reader or buffer.
         * @function decode
         * @memberof CommonMsg.dmsg_content
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CommonMsg.dmsg_content} dmsg_content
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        dmsg_content.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommonMsg.dmsg_content();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.msg_type = reader.string();
                    break;
                case 2:
                    message.chars = reader.string();
                    break;
                case 3:
                    message.number = reader.uint64();
                    break;
                case 4:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("msg_type"))
                throw $util.ProtocolError("missing required 'msg_type'", { instance: message });
            return message;
        };

        /**
         * Decodes a dmsg_content message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CommonMsg.dmsg_content
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CommonMsg.dmsg_content} dmsg_content
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        dmsg_content.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a dmsg_content message.
         * @function verify
         * @memberof CommonMsg.dmsg_content
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        dmsg_content.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.msg_type))
                return "msg_type: string expected";
            if (message.chars != null && message.hasOwnProperty("chars"))
                if (!$util.isString(message.chars))
                    return "chars: string expected";
            if (message.number != null && message.hasOwnProperty("number"))
                if (!$util.isInteger(message.number) && !(message.number && $util.isInteger(message.number.low) && $util.isInteger(message.number.high)))
                    return "number: integer|Long expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        return dmsg_content;
    })();

    CommonMsg.dmsg = (function() {

        /**
         * Properties of a dmsg.
         * @memberof CommonMsg
         * @interface Idmsg
         * @property {number} id dmsg id
         * @property {Array.<CommonMsg.Idmsg_content>|null} [content] dmsg content
         */

        /**
         * Constructs a new dmsg.
         * @memberof CommonMsg
         * @classdesc Represents a dmsg.
         * @implements Idmsg
         * @constructor
         * @param {CommonMsg.Idmsg=} [properties] Properties to set
         */
        function dmsg(properties) {
            this.content = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * dmsg id.
         * @member {number} id
         * @memberof CommonMsg.dmsg
         * @instance
         */
        dmsg.prototype.id = 0;

        /**
         * dmsg content.
         * @member {Array.<CommonMsg.Idmsg_content>} content
         * @memberof CommonMsg.dmsg
         * @instance
         */
        dmsg.prototype.content = $util.emptyArray;

        /**
         * Creates a new dmsg instance using the specified properties.
         * @function create
         * @memberof CommonMsg.dmsg
         * @static
         * @param {CommonMsg.Idmsg=} [properties] Properties to set
         * @returns {CommonMsg.dmsg} dmsg instance
         */
        dmsg.create = function create(properties) {
            return new dmsg(properties);
        };

        /**
         * Encodes the specified dmsg message. Does not implicitly {@link CommonMsg.dmsg.verify|verify} messages.
         * @function encode
         * @memberof CommonMsg.dmsg
         * @static
         * @param {CommonMsg.Idmsg} message dmsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dmsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.content != null && message.content.length)
                for (var i = 0; i < message.content.length; ++i)
                    $root.CommonMsg.dmsg_content.encode(message.content[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified dmsg message, length delimited. Does not implicitly {@link CommonMsg.dmsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CommonMsg.dmsg
         * @static
         * @param {CommonMsg.Idmsg} message dmsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        dmsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a dmsg message from the specified reader or buffer.
         * @function decode
         * @memberof CommonMsg.dmsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CommonMsg.dmsg} dmsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        dmsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CommonMsg.dmsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    if (!(message.content && message.content.length))
                        message.content = [];
                    message.content.push($root.CommonMsg.dmsg_content.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a dmsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CommonMsg.dmsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CommonMsg.dmsg} dmsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        dmsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a dmsg message.
         * @function verify
         * @memberof CommonMsg.dmsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        dmsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (message.content != null && message.hasOwnProperty("content")) {
                if (!Array.isArray(message.content))
                    return "content: array expected";
                for (var i = 0; i < message.content.length; ++i) {
                    var error = $root.CommonMsg.dmsg_content.verify(message.content[i]);
                    if (error)
                        return "content." + error;
                }
            }
            return null;
        };

        return dmsg;
    })();

    return CommonMsg;
})();

$root.AwardMsg = (function() {

    /**
     * Namespace AwardMsg.
     * @exports AwardMsg
     * @namespace
     */
    var AwardMsg = {};

    /**
     * c_cmd enum.
     * @name AwardMsg.c_cmd
     * @enum {string}
     * @property {number} growth_fund_info_req=0 growth_fund_info_req value
     * @property {number} growth_fund_info_resp=1 growth_fund_info_resp value
     * @property {number} growth_fund_config_req=2 growth_fund_config_req value
     * @property {number} growth_fund_config_resp=3 growth_fund_config_resp value
     * @property {number} growth_fund_buy_req=4 growth_fund_buy_req value
     * @property {number} growth_fund_buy_resp=5 growth_fund_buy_resp value
     * @property {number} lv_award_req=6 lv_award_req value
     * @property {number} lv_award_resp=7 lv_award_resp value
     * @property {number} lv_award_notice_resp=8 lv_award_notice_resp value
     * @property {number} lv_award_notice_set_req=9 lv_award_notice_set_req value
     * @property {number} growth_fund_state_req=10 growth_fund_state_req value
     * @property {number} growth_fund_state_resp=11 growth_fund_state_resp value
     * @property {number} lv_award_state_req=12 lv_award_state_req value
     * @property {number} lv_award_state_resp=13 lv_award_state_resp value
     */
    AwardMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "growth_fund_info_req"] = 0;
        values[valuesById[1] = "growth_fund_info_resp"] = 1;
        values[valuesById[2] = "growth_fund_config_req"] = 2;
        values[valuesById[3] = "growth_fund_config_resp"] = 3;
        values[valuesById[4] = "growth_fund_buy_req"] = 4;
        values[valuesById[5] = "growth_fund_buy_resp"] = 5;
        values[valuesById[6] = "lv_award_req"] = 6;
        values[valuesById[7] = "lv_award_resp"] = 7;
        values[valuesById[8] = "lv_award_notice_resp"] = 8;
        values[valuesById[9] = "lv_award_notice_set_req"] = 9;
        values[valuesById[10] = "growth_fund_state_req"] = 10;
        values[valuesById[11] = "growth_fund_state_resp"] = 11;
        values[valuesById[12] = "lv_award_state_req"] = 12;
        values[valuesById[13] = "lv_award_state_resp"] = 13;
        return values;
    })();

    AwardMsg.msg_award_service = (function() {

        /**
         * Constructs a new msg_award_service service.
         * @memberof AwardMsg
         * @classdesc Represents a msg_award_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_award_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_award_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_award_service;

        /**
         * Creates new msg_award_service service using the specified rpc implementation.
         * @function create
         * @memberof AwardMsg.msg_award_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_award_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_award_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#growth_fund_info}.
         * @memberof AwardMsg.msg_award_service
         * @typedef growth_fund_infoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.growth_fund_info_resp} [response] growth_fund_info_resp
         */

        /**
         * Calls growth_fund_info.
         * @function growth_fund_info
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_info_req} request growth_fund_info_req message or plain object
         * @param {AwardMsg.msg_award_service.growth_fund_infoCallback} callback Node-style callback called with the error, if any, and growth_fund_info_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.growth_fund_info = function growth_fund_info(request, callback) {
            return this.rpcCall(growth_fund_info, $root.AwardMsg.growth_fund_info_req, $root.AwardMsg.growth_fund_info_resp, request, callback);
        }, "name", { value: "growth_fund_info" });

        /**
         * Calls growth_fund_info.
         * @function growth_fund_info
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_info_req} request growth_fund_info_req message or plain object
         * @returns {Promise<AwardMsg.growth_fund_info_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#growth_fund_configs}.
         * @memberof AwardMsg.msg_award_service
         * @typedef growth_fund_configsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.growth_fund_config_resp} [response] growth_fund_config_resp
         */

        /**
         * Calls growth_fund_configs.
         * @function growth_fund_configs
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_config_req} request growth_fund_config_req message or plain object
         * @param {AwardMsg.msg_award_service.growth_fund_configsCallback} callback Node-style callback called with the error, if any, and growth_fund_config_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.growth_fund_configs = function growth_fund_configs(request, callback) {
            return this.rpcCall(growth_fund_configs, $root.AwardMsg.growth_fund_config_req, $root.AwardMsg.growth_fund_config_resp, request, callback);
        }, "name", { value: "growth_fund_configs" });

        /**
         * Calls growth_fund_configs.
         * @function growth_fund_configs
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_config_req} request growth_fund_config_req message or plain object
         * @returns {Promise<AwardMsg.growth_fund_config_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#growth_fund_buy}.
         * @memberof AwardMsg.msg_award_service
         * @typedef growth_fund_buyCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.growth_fund_buy_resp} [response] growth_fund_buy_resp
         */

        /**
         * Calls growth_fund_buy.
         * @function growth_fund_buy
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_buy_req} request growth_fund_buy_req message or plain object
         * @param {AwardMsg.msg_award_service.growth_fund_buyCallback} callback Node-style callback called with the error, if any, and growth_fund_buy_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.growth_fund_buy = function growth_fund_buy(request, callback) {
            return this.rpcCall(growth_fund_buy, $root.AwardMsg.growth_fund_buy_req, $root.AwardMsg.growth_fund_buy_resp, request, callback);
        }, "name", { value: "growth_fund_buy" });

        /**
         * Calls growth_fund_buy.
         * @function growth_fund_buy
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_buy_req} request growth_fund_buy_req message or plain object
         * @returns {Promise<AwardMsg.growth_fund_buy_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#lv_award}.
         * @memberof AwardMsg.msg_award_service
         * @typedef lv_awardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.lv_award_resp} [response] lv_award_resp
         */

        /**
         * Calls lv_award.
         * @function lv_award
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Ilv_award_req} request lv_award_req message or plain object
         * @param {AwardMsg.msg_award_service.lv_awardCallback} callback Node-style callback called with the error, if any, and lv_award_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.lv_award = function lv_award(request, callback) {
            return this.rpcCall(lv_award, $root.AwardMsg.lv_award_req, $root.AwardMsg.lv_award_resp, request, callback);
        }, "name", { value: "lv_award" });

        /**
         * Calls lv_award.
         * @function lv_award
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Ilv_award_req} request lv_award_req message or plain object
         * @returns {Promise<AwardMsg.lv_award_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#lv_award_notice}.
         * @memberof AwardMsg.msg_award_service
         * @typedef lv_award_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.lv_award_notice_resp} [response] lv_award_notice_resp
         */

        /**
         * Calls lv_award_notice.
         * @function lv_award_notice
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {AwardMsg.msg_award_service.lv_award_noticeCallback} callback Node-style callback called with the error, if any, and lv_award_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.lv_award_notice = function lv_award_notice(request, callback) {
            return this.rpcCall(lv_award_notice, $root.CommonMsg.undefined, $root.AwardMsg.lv_award_notice_resp, request, callback);
        }, "name", { value: "lv_award_notice" });

        /**
         * Calls lv_award_notice.
         * @function lv_award_notice
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<AwardMsg.lv_award_notice_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#lv_award_notice_set}.
         * @memberof AwardMsg.msg_award_service
         * @typedef lv_award_notice_setCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls lv_award_notice_set.
         * @function lv_award_notice_set
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Ilv_award_notice_set_req} request lv_award_notice_set_req message or plain object
         * @param {AwardMsg.msg_award_service.lv_award_notice_setCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.lv_award_notice_set = function lv_award_notice_set(request, callback) {
            return this.rpcCall(lv_award_notice_set, $root.AwardMsg.lv_award_notice_set_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "lv_award_notice_set" });

        /**
         * Calls lv_award_notice_set.
         * @function lv_award_notice_set
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Ilv_award_notice_set_req} request lv_award_notice_set_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#growth_fund_state}.
         * @memberof AwardMsg.msg_award_service
         * @typedef growth_fund_stateCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.growth_fund_state_resp} [response] growth_fund_state_resp
         */

        /**
         * Calls growth_fund_state.
         * @function growth_fund_state
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_state_req} request growth_fund_state_req message or plain object
         * @param {AwardMsg.msg_award_service.growth_fund_stateCallback} callback Node-style callback called with the error, if any, and growth_fund_state_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.growth_fund_state = function growth_fund_state(request, callback) {
            return this.rpcCall(growth_fund_state, $root.AwardMsg.growth_fund_state_req, $root.AwardMsg.growth_fund_state_resp, request, callback);
        }, "name", { value: "growth_fund_state" });

        /**
         * Calls growth_fund_state.
         * @function growth_fund_state
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Igrowth_fund_state_req} request growth_fund_state_req message or plain object
         * @returns {Promise<AwardMsg.growth_fund_state_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link AwardMsg.msg_award_service#lv_award_state}.
         * @memberof AwardMsg.msg_award_service
         * @typedef lv_award_stateCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {AwardMsg.lv_award_state_resp} [response] lv_award_state_resp
         */

        /**
         * Calls lv_award_state.
         * @function lv_award_state
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Ilv_award_state_req} request lv_award_state_req message or plain object
         * @param {AwardMsg.msg_award_service.lv_award_stateCallback} callback Node-style callback called with the error, if any, and lv_award_state_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_award_service.prototype.lv_award_state = function lv_award_state(request, callback) {
            return this.rpcCall(lv_award_state, $root.AwardMsg.lv_award_state_req, $root.AwardMsg.lv_award_state_resp, request, callback);
        }, "name", { value: "lv_award_state" });

        /**
         * Calls lv_award_state.
         * @function lv_award_state
         * @memberof AwardMsg.msg_award_service
         * @instance
         * @param {AwardMsg.Ilv_award_state_req} request lv_award_state_req message or plain object
         * @returns {Promise<AwardMsg.lv_award_state_resp>} Promise
         * @variation 2
         */

        return msg_award_service;
    })();

    /**
     * award_code enum.
     * @name AwardMsg.award_code
     * @enum {string}
     * @property {number} success=0 success value
     * @property {number} fail=1 fail value
     * @property {number} out_of_cash=2 out_of_cash value
     * @property {number} top_fun_id=3 top_fun_id value
     * @property {number} lv_had_reward=4 lv_had_reward value
     * @property {number} levelnot=5 levelnot value
     * @property {number} prev_reward=6 prev_reward value
     * @property {number} had_bought=7 had_bought value
     * @property {number} act_end=8 act_end value
     */
    AwardMsg.award_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "success"] = 0;
        values[valuesById[1] = "fail"] = 1;
        values[valuesById[2] = "out_of_cash"] = 2;
        values[valuesById[3] = "top_fun_id"] = 3;
        values[valuesById[4] = "lv_had_reward"] = 4;
        values[valuesById[5] = "levelnot"] = 5;
        values[valuesById[6] = "prev_reward"] = 6;
        values[valuesById[7] = "had_bought"] = 7;
        values[valuesById[8] = "act_end"] = 8;
        return values;
    })();

    AwardMsg.growth_fund_info_req = (function() {

        /**
         * Properties of a growth_fund_info_req.
         * @memberof AwardMsg
         * @interface Igrowth_fund_info_req
         */

        /**
         * Constructs a new growth_fund_info_req.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_info_req.
         * @implements Igrowth_fund_info_req
         * @constructor
         * @param {AwardMsg.Igrowth_fund_info_req=} [properties] Properties to set
         */
        function growth_fund_info_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new growth_fund_info_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_info_req
         * @static
         * @param {AwardMsg.Igrowth_fund_info_req=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_info_req} growth_fund_info_req instance
         */
        growth_fund_info_req.create = function create(properties) {
            return new growth_fund_info_req(properties);
        };

        /**
         * Encodes the specified growth_fund_info_req message. Does not implicitly {@link AwardMsg.growth_fund_info_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_info_req
         * @static
         * @param {AwardMsg.Igrowth_fund_info_req} message growth_fund_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_info_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified growth_fund_info_req message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_info_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_info_req
         * @static
         * @param {AwardMsg.Igrowth_fund_info_req} message growth_fund_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_info_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_info_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_info_req} growth_fund_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_info_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_info_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a growth_fund_info_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_info_req} growth_fund_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_info_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_info_req message.
         * @function verify
         * @memberof AwardMsg.growth_fund_info_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_info_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return growth_fund_info_req;
    })();

    AwardMsg.growth_fund_info_resp = (function() {

        /**
         * Properties of a growth_fund_info_resp.
         * @memberof AwardMsg
         * @interface Igrowth_fund_info_resp
         * @property {number} fund_id growth_fund_info_resp fund_id
         */

        /**
         * Constructs a new growth_fund_info_resp.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_info_resp.
         * @implements Igrowth_fund_info_resp
         * @constructor
         * @param {AwardMsg.Igrowth_fund_info_resp=} [properties] Properties to set
         */
        function growth_fund_info_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * growth_fund_info_resp fund_id.
         * @member {number} fund_id
         * @memberof AwardMsg.growth_fund_info_resp
         * @instance
         */
        growth_fund_info_resp.prototype.fund_id = 0;

        /**
         * Creates a new growth_fund_info_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_info_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_info_resp=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_info_resp} growth_fund_info_resp instance
         */
        growth_fund_info_resp.create = function create(properties) {
            return new growth_fund_info_resp(properties);
        };

        /**
         * Encodes the specified growth_fund_info_resp message. Does not implicitly {@link AwardMsg.growth_fund_info_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_info_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_info_resp} message growth_fund_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_info_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fund_id);
            return writer;
        };

        /**
         * Encodes the specified growth_fund_info_resp message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_info_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_info_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_info_resp} message growth_fund_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_info_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_info_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_info_resp} growth_fund_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_info_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_info_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fund_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fund_id"))
                throw $util.ProtocolError("missing required 'fund_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a growth_fund_info_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_info_resp} growth_fund_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_info_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_info_resp message.
         * @function verify
         * @memberof AwardMsg.growth_fund_info_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_info_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fund_id))
                return "fund_id: integer expected";
            return null;
        };

        return growth_fund_info_resp;
    })();

    AwardMsg.growth_fund_config_req = (function() {

        /**
         * Properties of a growth_fund_config_req.
         * @memberof AwardMsg
         * @interface Igrowth_fund_config_req
         */

        /**
         * Constructs a new growth_fund_config_req.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_config_req.
         * @implements Igrowth_fund_config_req
         * @constructor
         * @param {AwardMsg.Igrowth_fund_config_req=} [properties] Properties to set
         */
        function growth_fund_config_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new growth_fund_config_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_config_req
         * @static
         * @param {AwardMsg.Igrowth_fund_config_req=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_config_req} growth_fund_config_req instance
         */
        growth_fund_config_req.create = function create(properties) {
            return new growth_fund_config_req(properties);
        };

        /**
         * Encodes the specified growth_fund_config_req message. Does not implicitly {@link AwardMsg.growth_fund_config_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_config_req
         * @static
         * @param {AwardMsg.Igrowth_fund_config_req} message growth_fund_config_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_config_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified growth_fund_config_req message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_config_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_config_req
         * @static
         * @param {AwardMsg.Igrowth_fund_config_req} message growth_fund_config_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_config_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_config_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_config_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_config_req} growth_fund_config_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_config_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_config_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a growth_fund_config_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_config_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_config_req} growth_fund_config_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_config_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_config_req message.
         * @function verify
         * @memberof AwardMsg.growth_fund_config_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_config_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return growth_fund_config_req;
    })();

    AwardMsg.growth_fund_config_resp = (function() {

        /**
         * Properties of a growth_fund_config_resp.
         * @memberof AwardMsg
         * @interface Igrowth_fund_config_resp
         * @property {Array.<AwardMsg.Igrowth_fund_config>|null} [configs] growth_fund_config_resp configs
         */

        /**
         * Constructs a new growth_fund_config_resp.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_config_resp.
         * @implements Igrowth_fund_config_resp
         * @constructor
         * @param {AwardMsg.Igrowth_fund_config_resp=} [properties] Properties to set
         */
        function growth_fund_config_resp(properties) {
            this.configs = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * growth_fund_config_resp configs.
         * @member {Array.<AwardMsg.Igrowth_fund_config>} configs
         * @memberof AwardMsg.growth_fund_config_resp
         * @instance
         */
        growth_fund_config_resp.prototype.configs = $util.emptyArray;

        /**
         * Creates a new growth_fund_config_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_config_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_config_resp=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_config_resp} growth_fund_config_resp instance
         */
        growth_fund_config_resp.create = function create(properties) {
            return new growth_fund_config_resp(properties);
        };

        /**
         * Encodes the specified growth_fund_config_resp message. Does not implicitly {@link AwardMsg.growth_fund_config_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_config_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_config_resp} message growth_fund_config_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_config_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.configs != null && message.configs.length)
                for (var i = 0; i < message.configs.length; ++i)
                    $root.AwardMsg.growth_fund_config.encode(message.configs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified growth_fund_config_resp message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_config_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_config_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_config_resp} message growth_fund_config_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_config_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_config_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_config_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_config_resp} growth_fund_config_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_config_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_config_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.configs && message.configs.length))
                        message.configs = [];
                    message.configs.push($root.AwardMsg.growth_fund_config.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a growth_fund_config_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_config_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_config_resp} growth_fund_config_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_config_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_config_resp message.
         * @function verify
         * @memberof AwardMsg.growth_fund_config_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_config_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.configs != null && message.hasOwnProperty("configs")) {
                if (!Array.isArray(message.configs))
                    return "configs: array expected";
                for (var i = 0; i < message.configs.length; ++i) {
                    var error = $root.AwardMsg.growth_fund_config.verify(message.configs[i]);
                    if (error)
                        return "configs." + error;
                }
            }
            return null;
        };

        return growth_fund_config_resp;
    })();

    AwardMsg.growth_fund_config = (function() {

        /**
         * Properties of a growth_fund_config.
         * @memberof AwardMsg
         * @interface Igrowth_fund_config
         * @property {number} fund_id growth_fund_config fund_id
         * @property {number|Long} price growth_fund_config price
         * @property {number|Long} rebate growth_fund_config rebate
         * @property {number} rebate_per growth_fund_config rebate_per
         * @property {string} des growth_fund_config des
         */

        /**
         * Constructs a new growth_fund_config.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_config.
         * @implements Igrowth_fund_config
         * @constructor
         * @param {AwardMsg.Igrowth_fund_config=} [properties] Properties to set
         */
        function growth_fund_config(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * growth_fund_config fund_id.
         * @member {number} fund_id
         * @memberof AwardMsg.growth_fund_config
         * @instance
         */
        growth_fund_config.prototype.fund_id = 0;

        /**
         * growth_fund_config price.
         * @member {number|Long} price
         * @memberof AwardMsg.growth_fund_config
         * @instance
         */
        growth_fund_config.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * growth_fund_config rebate.
         * @member {number|Long} rebate
         * @memberof AwardMsg.growth_fund_config
         * @instance
         */
        growth_fund_config.prototype.rebate = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * growth_fund_config rebate_per.
         * @member {number} rebate_per
         * @memberof AwardMsg.growth_fund_config
         * @instance
         */
        growth_fund_config.prototype.rebate_per = 0;

        /**
         * growth_fund_config des.
         * @member {string} des
         * @memberof AwardMsg.growth_fund_config
         * @instance
         */
        growth_fund_config.prototype.des = "";

        /**
         * Creates a new growth_fund_config instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_config
         * @static
         * @param {AwardMsg.Igrowth_fund_config=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_config} growth_fund_config instance
         */
        growth_fund_config.create = function create(properties) {
            return new growth_fund_config(properties);
        };

        /**
         * Encodes the specified growth_fund_config message. Does not implicitly {@link AwardMsg.growth_fund_config.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_config
         * @static
         * @param {AwardMsg.Igrowth_fund_config} message growth_fund_config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_config.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fund_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.price);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.rebate);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rebate_per);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.des);
            return writer;
        };

        /**
         * Encodes the specified growth_fund_config message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_config.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_config
         * @static
         * @param {AwardMsg.Igrowth_fund_config} message growth_fund_config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_config.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_config message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_config} growth_fund_config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_config.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_config();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fund_id = reader.uint32();
                    break;
                case 2:
                    message.price = reader.uint64();
                    break;
                case 3:
                    message.rebate = reader.uint64();
                    break;
                case 4:
                    message.rebate_per = reader.uint32();
                    break;
                case 5:
                    message.des = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fund_id"))
                throw $util.ProtocolError("missing required 'fund_id'", { instance: message });
            if (!message.hasOwnProperty("price"))
                throw $util.ProtocolError("missing required 'price'", { instance: message });
            if (!message.hasOwnProperty("rebate"))
                throw $util.ProtocolError("missing required 'rebate'", { instance: message });
            if (!message.hasOwnProperty("rebate_per"))
                throw $util.ProtocolError("missing required 'rebate_per'", { instance: message });
            if (!message.hasOwnProperty("des"))
                throw $util.ProtocolError("missing required 'des'", { instance: message });
            return message;
        };

        /**
         * Decodes a growth_fund_config message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_config} growth_fund_config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_config.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_config message.
         * @function verify
         * @memberof AwardMsg.growth_fund_config
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_config.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fund_id))
                return "fund_id: integer expected";
            if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))
                return "price: integer|Long expected";
            if (!$util.isInteger(message.rebate) && !(message.rebate && $util.isInteger(message.rebate.low) && $util.isInteger(message.rebate.high)))
                return "rebate: integer|Long expected";
            if (!$util.isInteger(message.rebate_per))
                return "rebate_per: integer expected";
            if (!$util.isString(message.des))
                return "des: string expected";
            return null;
        };

        return growth_fund_config;
    })();

    AwardMsg.growth_fund_buy_req = (function() {

        /**
         * Properties of a growth_fund_buy_req.
         * @memberof AwardMsg
         * @interface Igrowth_fund_buy_req
         * @property {number} fund_id growth_fund_buy_req fund_id
         */

        /**
         * Constructs a new growth_fund_buy_req.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_buy_req.
         * @implements Igrowth_fund_buy_req
         * @constructor
         * @param {AwardMsg.Igrowth_fund_buy_req=} [properties] Properties to set
         */
        function growth_fund_buy_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * growth_fund_buy_req fund_id.
         * @member {number} fund_id
         * @memberof AwardMsg.growth_fund_buy_req
         * @instance
         */
        growth_fund_buy_req.prototype.fund_id = 0;

        /**
         * Creates a new growth_fund_buy_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_buy_req
         * @static
         * @param {AwardMsg.Igrowth_fund_buy_req=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_buy_req} growth_fund_buy_req instance
         */
        growth_fund_buy_req.create = function create(properties) {
            return new growth_fund_buy_req(properties);
        };

        /**
         * Encodes the specified growth_fund_buy_req message. Does not implicitly {@link AwardMsg.growth_fund_buy_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_buy_req
         * @static
         * @param {AwardMsg.Igrowth_fund_buy_req} message growth_fund_buy_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_buy_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fund_id);
            return writer;
        };

        /**
         * Encodes the specified growth_fund_buy_req message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_buy_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_buy_req
         * @static
         * @param {AwardMsg.Igrowth_fund_buy_req} message growth_fund_buy_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_buy_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_buy_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_buy_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_buy_req} growth_fund_buy_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_buy_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_buy_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fund_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fund_id"))
                throw $util.ProtocolError("missing required 'fund_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a growth_fund_buy_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_buy_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_buy_req} growth_fund_buy_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_buy_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_buy_req message.
         * @function verify
         * @memberof AwardMsg.growth_fund_buy_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_buy_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fund_id))
                return "fund_id: integer expected";
            return null;
        };

        return growth_fund_buy_req;
    })();

    AwardMsg.growth_fund_buy_resp = (function() {

        /**
         * Properties of a growth_fund_buy_resp.
         * @memberof AwardMsg
         * @interface Igrowth_fund_buy_resp
         * @property {AwardMsg.award_code} code growth_fund_buy_resp code
         * @property {number} fund_id growth_fund_buy_resp fund_id
         */

        /**
         * Constructs a new growth_fund_buy_resp.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_buy_resp.
         * @implements Igrowth_fund_buy_resp
         * @constructor
         * @param {AwardMsg.Igrowth_fund_buy_resp=} [properties] Properties to set
         */
        function growth_fund_buy_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * growth_fund_buy_resp code.
         * @member {AwardMsg.award_code} code
         * @memberof AwardMsg.growth_fund_buy_resp
         * @instance
         */
        growth_fund_buy_resp.prototype.code = 0;

        /**
         * growth_fund_buy_resp fund_id.
         * @member {number} fund_id
         * @memberof AwardMsg.growth_fund_buy_resp
         * @instance
         */
        growth_fund_buy_resp.prototype.fund_id = 0;

        /**
         * Creates a new growth_fund_buy_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_buy_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_buy_resp=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_buy_resp} growth_fund_buy_resp instance
         */
        growth_fund_buy_resp.create = function create(properties) {
            return new growth_fund_buy_resp(properties);
        };

        /**
         * Encodes the specified growth_fund_buy_resp message. Does not implicitly {@link AwardMsg.growth_fund_buy_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_buy_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_buy_resp} message growth_fund_buy_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_buy_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.fund_id);
            return writer;
        };

        /**
         * Encodes the specified growth_fund_buy_resp message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_buy_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_buy_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_buy_resp} message growth_fund_buy_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_buy_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_buy_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_buy_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_buy_resp} growth_fund_buy_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_buy_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_buy_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.fund_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            if (!message.hasOwnProperty("fund_id"))
                throw $util.ProtocolError("missing required 'fund_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a growth_fund_buy_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_buy_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_buy_resp} growth_fund_buy_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_buy_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_buy_resp message.
         * @function verify
         * @memberof AwardMsg.growth_fund_buy_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_buy_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            }
            if (!$util.isInteger(message.fund_id))
                return "fund_id: integer expected";
            return null;
        };

        return growth_fund_buy_resp;
    })();

    AwardMsg.lv_award_req = (function() {

        /**
         * Properties of a lv_award_req.
         * @memberof AwardMsg
         * @interface Ilv_award_req
         * @property {number} lv lv_award_req lv
         */

        /**
         * Constructs a new lv_award_req.
         * @memberof AwardMsg
         * @classdesc Represents a lv_award_req.
         * @implements Ilv_award_req
         * @constructor
         * @param {AwardMsg.Ilv_award_req=} [properties] Properties to set
         */
        function lv_award_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_award_req lv.
         * @member {number} lv
         * @memberof AwardMsg.lv_award_req
         * @instance
         */
        lv_award_req.prototype.lv = 0;

        /**
         * Creates a new lv_award_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.lv_award_req
         * @static
         * @param {AwardMsg.Ilv_award_req=} [properties] Properties to set
         * @returns {AwardMsg.lv_award_req} lv_award_req instance
         */
        lv_award_req.create = function create(properties) {
            return new lv_award_req(properties);
        };

        /**
         * Encodes the specified lv_award_req message. Does not implicitly {@link AwardMsg.lv_award_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.lv_award_req
         * @static
         * @param {AwardMsg.Ilv_award_req} message lv_award_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.lv);
            return writer;
        };

        /**
         * Encodes the specified lv_award_req message, length delimited. Does not implicitly {@link AwardMsg.lv_award_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.lv_award_req
         * @static
         * @param {AwardMsg.Ilv_award_req} message lv_award_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_award_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.lv_award_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.lv_award_req} lv_award_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.lv_award_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lv = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("lv"))
                throw $util.ProtocolError("missing required 'lv'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_award_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.lv_award_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.lv_award_req} lv_award_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_award_req message.
         * @function verify
         * @memberof AwardMsg.lv_award_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_award_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.lv))
                return "lv: integer expected";
            return null;
        };

        return lv_award_req;
    })();

    AwardMsg.lv_award_resp = (function() {

        /**
         * Properties of a lv_award_resp.
         * @memberof AwardMsg
         * @interface Ilv_award_resp
         * @property {AwardMsg.award_code} code lv_award_resp code
         * @property {number} lv lv_award_resp lv
         * @property {number} next_lv lv_award_resp next_lv
         * @property {number|Long} reward lv_award_resp reward
         */

        /**
         * Constructs a new lv_award_resp.
         * @memberof AwardMsg
         * @classdesc Represents a lv_award_resp.
         * @implements Ilv_award_resp
         * @constructor
         * @param {AwardMsg.Ilv_award_resp=} [properties] Properties to set
         */
        function lv_award_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_award_resp code.
         * @member {AwardMsg.award_code} code
         * @memberof AwardMsg.lv_award_resp
         * @instance
         */
        lv_award_resp.prototype.code = 0;

        /**
         * lv_award_resp lv.
         * @member {number} lv
         * @memberof AwardMsg.lv_award_resp
         * @instance
         */
        lv_award_resp.prototype.lv = 0;

        /**
         * lv_award_resp next_lv.
         * @member {number} next_lv
         * @memberof AwardMsg.lv_award_resp
         * @instance
         */
        lv_award_resp.prototype.next_lv = 0;

        /**
         * lv_award_resp reward.
         * @member {number|Long} reward
         * @memberof AwardMsg.lv_award_resp
         * @instance
         */
        lv_award_resp.prototype.reward = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new lv_award_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.lv_award_resp
         * @static
         * @param {AwardMsg.Ilv_award_resp=} [properties] Properties to set
         * @returns {AwardMsg.lv_award_resp} lv_award_resp instance
         */
        lv_award_resp.create = function create(properties) {
            return new lv_award_resp(properties);
        };

        /**
         * Encodes the specified lv_award_resp message. Does not implicitly {@link AwardMsg.lv_award_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.lv_award_resp
         * @static
         * @param {AwardMsg.Ilv_award_resp} message lv_award_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.lv);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.next_lv);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.reward);
            return writer;
        };

        /**
         * Encodes the specified lv_award_resp message, length delimited. Does not implicitly {@link AwardMsg.lv_award_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.lv_award_resp
         * @static
         * @param {AwardMsg.Ilv_award_resp} message lv_award_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_award_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.lv_award_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.lv_award_resp} lv_award_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.lv_award_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.lv = reader.uint32();
                    break;
                case 3:
                    message.next_lv = reader.uint32();
                    break;
                case 4:
                    message.reward = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            if (!message.hasOwnProperty("lv"))
                throw $util.ProtocolError("missing required 'lv'", { instance: message });
            if (!message.hasOwnProperty("next_lv"))
                throw $util.ProtocolError("missing required 'next_lv'", { instance: message });
            if (!message.hasOwnProperty("reward"))
                throw $util.ProtocolError("missing required 'reward'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_award_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.lv_award_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.lv_award_resp} lv_award_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_award_resp message.
         * @function verify
         * @memberof AwardMsg.lv_award_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_award_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            }
            if (!$util.isInteger(message.lv))
                return "lv: integer expected";
            if (!$util.isInteger(message.next_lv))
                return "next_lv: integer expected";
            if (!$util.isInteger(message.reward) && !(message.reward && $util.isInteger(message.reward.low) && $util.isInteger(message.reward.high)))
                return "reward: integer|Long expected";
            return null;
        };

        return lv_award_resp;
    })();

    AwardMsg.lv_award_notice_resp = (function() {

        /**
         * Properties of a lv_award_notice_resp.
         * @memberof AwardMsg
         * @interface Ilv_award_notice_resp
         * @property {number|Long} award lv_award_notice_resp award
         * @property {number|Long} max_award lv_award_notice_resp max_award
         */

        /**
         * Constructs a new lv_award_notice_resp.
         * @memberof AwardMsg
         * @classdesc Represents a lv_award_notice_resp.
         * @implements Ilv_award_notice_resp
         * @constructor
         * @param {AwardMsg.Ilv_award_notice_resp=} [properties] Properties to set
         */
        function lv_award_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_award_notice_resp award.
         * @member {number|Long} award
         * @memberof AwardMsg.lv_award_notice_resp
         * @instance
         */
        lv_award_notice_resp.prototype.award = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_award_notice_resp max_award.
         * @member {number|Long} max_award
         * @memberof AwardMsg.lv_award_notice_resp
         * @instance
         */
        lv_award_notice_resp.prototype.max_award = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new lv_award_notice_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.lv_award_notice_resp
         * @static
         * @param {AwardMsg.Ilv_award_notice_resp=} [properties] Properties to set
         * @returns {AwardMsg.lv_award_notice_resp} lv_award_notice_resp instance
         */
        lv_award_notice_resp.create = function create(properties) {
            return new lv_award_notice_resp(properties);
        };

        /**
         * Encodes the specified lv_award_notice_resp message. Does not implicitly {@link AwardMsg.lv_award_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.lv_award_notice_resp
         * @static
         * @param {AwardMsg.Ilv_award_notice_resp} message lv_award_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.award);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.max_award);
            return writer;
        };

        /**
         * Encodes the specified lv_award_notice_resp message, length delimited. Does not implicitly {@link AwardMsg.lv_award_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.lv_award_notice_resp
         * @static
         * @param {AwardMsg.Ilv_award_notice_resp} message lv_award_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_award_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.lv_award_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.lv_award_notice_resp} lv_award_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.lv_award_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.award = reader.uint64();
                    break;
                case 2:
                    message.max_award = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("award"))
                throw $util.ProtocolError("missing required 'award'", { instance: message });
            if (!message.hasOwnProperty("max_award"))
                throw $util.ProtocolError("missing required 'max_award'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_award_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.lv_award_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.lv_award_notice_resp} lv_award_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_award_notice_resp message.
         * @function verify
         * @memberof AwardMsg.lv_award_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_award_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.award) && !(message.award && $util.isInteger(message.award.low) && $util.isInteger(message.award.high)))
                return "award: integer|Long expected";
            if (!$util.isInteger(message.max_award) && !(message.max_award && $util.isInteger(message.max_award.low) && $util.isInteger(message.max_award.high)))
                return "max_award: integer|Long expected";
            return null;
        };

        return lv_award_notice_resp;
    })();

    AwardMsg.lv_award_notice_set_req = (function() {

        /**
         * Properties of a lv_award_notice_set_req.
         * @memberof AwardMsg
         * @interface Ilv_award_notice_set_req
         * @property {boolean} not_today lv_award_notice_set_req not_today
         */

        /**
         * Constructs a new lv_award_notice_set_req.
         * @memberof AwardMsg
         * @classdesc Represents a lv_award_notice_set_req.
         * @implements Ilv_award_notice_set_req
         * @constructor
         * @param {AwardMsg.Ilv_award_notice_set_req=} [properties] Properties to set
         */
        function lv_award_notice_set_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_award_notice_set_req not_today.
         * @member {boolean} not_today
         * @memberof AwardMsg.lv_award_notice_set_req
         * @instance
         */
        lv_award_notice_set_req.prototype.not_today = false;

        /**
         * Creates a new lv_award_notice_set_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.lv_award_notice_set_req
         * @static
         * @param {AwardMsg.Ilv_award_notice_set_req=} [properties] Properties to set
         * @returns {AwardMsg.lv_award_notice_set_req} lv_award_notice_set_req instance
         */
        lv_award_notice_set_req.create = function create(properties) {
            return new lv_award_notice_set_req(properties);
        };

        /**
         * Encodes the specified lv_award_notice_set_req message. Does not implicitly {@link AwardMsg.lv_award_notice_set_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.lv_award_notice_set_req
         * @static
         * @param {AwardMsg.Ilv_award_notice_set_req} message lv_award_notice_set_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_notice_set_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.not_today);
            return writer;
        };

        /**
         * Encodes the specified lv_award_notice_set_req message, length delimited. Does not implicitly {@link AwardMsg.lv_award_notice_set_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.lv_award_notice_set_req
         * @static
         * @param {AwardMsg.Ilv_award_notice_set_req} message lv_award_notice_set_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_notice_set_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_award_notice_set_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.lv_award_notice_set_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.lv_award_notice_set_req} lv_award_notice_set_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_notice_set_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.lv_award_notice_set_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.not_today = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("not_today"))
                throw $util.ProtocolError("missing required 'not_today'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_award_notice_set_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.lv_award_notice_set_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.lv_award_notice_set_req} lv_award_notice_set_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_notice_set_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_award_notice_set_req message.
         * @function verify
         * @memberof AwardMsg.lv_award_notice_set_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_award_notice_set_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (typeof message.not_today !== "boolean")
                return "not_today: boolean expected";
            return null;
        };

        return lv_award_notice_set_req;
    })();

    AwardMsg.growth_fund_state_req = (function() {

        /**
         * Properties of a growth_fund_state_req.
         * @memberof AwardMsg
         * @interface Igrowth_fund_state_req
         */

        /**
         * Constructs a new growth_fund_state_req.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_state_req.
         * @implements Igrowth_fund_state_req
         * @constructor
         * @param {AwardMsg.Igrowth_fund_state_req=} [properties] Properties to set
         */
        function growth_fund_state_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new growth_fund_state_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_state_req
         * @static
         * @param {AwardMsg.Igrowth_fund_state_req=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_state_req} growth_fund_state_req instance
         */
        growth_fund_state_req.create = function create(properties) {
            return new growth_fund_state_req(properties);
        };

        /**
         * Encodes the specified growth_fund_state_req message. Does not implicitly {@link AwardMsg.growth_fund_state_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_state_req
         * @static
         * @param {AwardMsg.Igrowth_fund_state_req} message growth_fund_state_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_state_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified growth_fund_state_req message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_state_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_state_req
         * @static
         * @param {AwardMsg.Igrowth_fund_state_req} message growth_fund_state_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_state_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_state_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_state_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_state_req} growth_fund_state_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_state_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_state_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a growth_fund_state_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_state_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_state_req} growth_fund_state_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_state_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_state_req message.
         * @function verify
         * @memberof AwardMsg.growth_fund_state_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_state_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return growth_fund_state_req;
    })();

    AwardMsg.growth_fund_state_resp = (function() {

        /**
         * Properties of a growth_fund_state_resp.
         * @memberof AwardMsg
         * @interface Igrowth_fund_state_resp
         * @property {number} mark growth_fund_state_resp mark
         * @property {number|Long} end_time growth_fund_state_resp end_time
         */

        /**
         * Constructs a new growth_fund_state_resp.
         * @memberof AwardMsg
         * @classdesc Represents a growth_fund_state_resp.
         * @implements Igrowth_fund_state_resp
         * @constructor
         * @param {AwardMsg.Igrowth_fund_state_resp=} [properties] Properties to set
         */
        function growth_fund_state_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * growth_fund_state_resp mark.
         * @member {number} mark
         * @memberof AwardMsg.growth_fund_state_resp
         * @instance
         */
        growth_fund_state_resp.prototype.mark = 0;

        /**
         * growth_fund_state_resp end_time.
         * @member {number|Long} end_time
         * @memberof AwardMsg.growth_fund_state_resp
         * @instance
         */
        growth_fund_state_resp.prototype.end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new growth_fund_state_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.growth_fund_state_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_state_resp=} [properties] Properties to set
         * @returns {AwardMsg.growth_fund_state_resp} growth_fund_state_resp instance
         */
        growth_fund_state_resp.create = function create(properties) {
            return new growth_fund_state_resp(properties);
        };

        /**
         * Encodes the specified growth_fund_state_resp message. Does not implicitly {@link AwardMsg.growth_fund_state_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.growth_fund_state_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_state_resp} message growth_fund_state_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_state_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mark);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.end_time);
            return writer;
        };

        /**
         * Encodes the specified growth_fund_state_resp message, length delimited. Does not implicitly {@link AwardMsg.growth_fund_state_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.growth_fund_state_resp
         * @static
         * @param {AwardMsg.Igrowth_fund_state_resp} message growth_fund_state_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        growth_fund_state_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a growth_fund_state_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.growth_fund_state_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.growth_fund_state_resp} growth_fund_state_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_state_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.growth_fund_state_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mark = reader.uint32();
                    break;
                case 2:
                    message.end_time = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("mark"))
                throw $util.ProtocolError("missing required 'mark'", { instance: message });
            if (!message.hasOwnProperty("end_time"))
                throw $util.ProtocolError("missing required 'end_time'", { instance: message });
            return message;
        };

        /**
         * Decodes a growth_fund_state_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.growth_fund_state_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.growth_fund_state_resp} growth_fund_state_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        growth_fund_state_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a growth_fund_state_resp message.
         * @function verify
         * @memberof AwardMsg.growth_fund_state_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        growth_fund_state_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.mark))
                return "mark: integer expected";
            if (!$util.isInteger(message.end_time) && !(message.end_time && $util.isInteger(message.end_time.low) && $util.isInteger(message.end_time.high)))
                return "end_time: integer|Long expected";
            return null;
        };

        return growth_fund_state_resp;
    })();

    AwardMsg.lv_award_state_req = (function() {

        /**
         * Properties of a lv_award_state_req.
         * @memberof AwardMsg
         * @interface Ilv_award_state_req
         */

        /**
         * Constructs a new lv_award_state_req.
         * @memberof AwardMsg
         * @classdesc Represents a lv_award_state_req.
         * @implements Ilv_award_state_req
         * @constructor
         * @param {AwardMsg.Ilv_award_state_req=} [properties] Properties to set
         */
        function lv_award_state_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new lv_award_state_req instance using the specified properties.
         * @function create
         * @memberof AwardMsg.lv_award_state_req
         * @static
         * @param {AwardMsg.Ilv_award_state_req=} [properties] Properties to set
         * @returns {AwardMsg.lv_award_state_req} lv_award_state_req instance
         */
        lv_award_state_req.create = function create(properties) {
            return new lv_award_state_req(properties);
        };

        /**
         * Encodes the specified lv_award_state_req message. Does not implicitly {@link AwardMsg.lv_award_state_req.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.lv_award_state_req
         * @static
         * @param {AwardMsg.Ilv_award_state_req} message lv_award_state_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_state_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified lv_award_state_req message, length delimited. Does not implicitly {@link AwardMsg.lv_award_state_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.lv_award_state_req
         * @static
         * @param {AwardMsg.Ilv_award_state_req} message lv_award_state_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_state_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_award_state_req message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.lv_award_state_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.lv_award_state_req} lv_award_state_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_state_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.lv_award_state_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a lv_award_state_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.lv_award_state_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.lv_award_state_req} lv_award_state_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_state_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_award_state_req message.
         * @function verify
         * @memberof AwardMsg.lv_award_state_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_award_state_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return lv_award_state_req;
    })();

    AwardMsg.lv_award_state_resp = (function() {

        /**
         * Properties of a lv_award_state_resp.
         * @memberof AwardMsg
         * @interface Ilv_award_state_resp
         * @property {number} mark lv_award_state_resp mark
         */

        /**
         * Constructs a new lv_award_state_resp.
         * @memberof AwardMsg
         * @classdesc Represents a lv_award_state_resp.
         * @implements Ilv_award_state_resp
         * @constructor
         * @param {AwardMsg.Ilv_award_state_resp=} [properties] Properties to set
         */
        function lv_award_state_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_award_state_resp mark.
         * @member {number} mark
         * @memberof AwardMsg.lv_award_state_resp
         * @instance
         */
        lv_award_state_resp.prototype.mark = 0;

        /**
         * Creates a new lv_award_state_resp instance using the specified properties.
         * @function create
         * @memberof AwardMsg.lv_award_state_resp
         * @static
         * @param {AwardMsg.Ilv_award_state_resp=} [properties] Properties to set
         * @returns {AwardMsg.lv_award_state_resp} lv_award_state_resp instance
         */
        lv_award_state_resp.create = function create(properties) {
            return new lv_award_state_resp(properties);
        };

        /**
         * Encodes the specified lv_award_state_resp message. Does not implicitly {@link AwardMsg.lv_award_state_resp.verify|verify} messages.
         * @function encode
         * @memberof AwardMsg.lv_award_state_resp
         * @static
         * @param {AwardMsg.Ilv_award_state_resp} message lv_award_state_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_state_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mark);
            return writer;
        };

        /**
         * Encodes the specified lv_award_state_resp message, length delimited. Does not implicitly {@link AwardMsg.lv_award_state_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AwardMsg.lv_award_state_resp
         * @static
         * @param {AwardMsg.Ilv_award_state_resp} message lv_award_state_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_award_state_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_award_state_resp message from the specified reader or buffer.
         * @function decode
         * @memberof AwardMsg.lv_award_state_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AwardMsg.lv_award_state_resp} lv_award_state_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_state_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardMsg.lv_award_state_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mark = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("mark"))
                throw $util.ProtocolError("missing required 'mark'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_award_state_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AwardMsg.lv_award_state_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AwardMsg.lv_award_state_resp} lv_award_state_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_award_state_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_award_state_resp message.
         * @function verify
         * @memberof AwardMsg.lv_award_state_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_award_state_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.mark))
                return "mark: integer expected";
            return null;
        };

        return lv_award_state_resp;
    })();

    return AwardMsg;
})();

$root.BaseMsg = (function() {

    /**
     * Namespace BaseMsg.
     * @exports BaseMsg
     * @namespace
     */
    var BaseMsg = {};

    /**
     * c_cmd enum.
     * @name BaseMsg.c_cmd
     * @enum {string}
     * @property {number} heartbeat_req=0 heartbeat_req value
     * @property {number} heartbeat_resp=1 heartbeat_resp value
     * @property {number} pop_up_msg_resp=2 pop_up_msg_resp value
     */
    BaseMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "heartbeat_req"] = 0;
        values[valuesById[1] = "heartbeat_resp"] = 1;
        values[valuesById[2] = "pop_up_msg_resp"] = 2;
        return values;
    })();

    BaseMsg.msg_base_service = (function() {

        /**
         * Constructs a new msg_base_service service.
         * @memberof BaseMsg
         * @classdesc Represents a msg_base_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_base_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_base_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_base_service;

        /**
         * Creates new msg_base_service service using the specified rpc implementation.
         * @function create
         * @memberof BaseMsg.msg_base_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_base_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_base_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link BaseMsg.msg_base_service#heartbeat}.
         * @memberof BaseMsg.msg_base_service
         * @typedef heartbeatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {BaseMsg.heartbeat_resp} [response] heartbeat_resp
         */

        /**
         * Calls heartbeat.
         * @function heartbeat
         * @memberof BaseMsg.msg_base_service
         * @instance
         * @param {BaseMsg.Iheartbeat_req} request heartbeat_req message or plain object
         * @param {BaseMsg.msg_base_service.heartbeatCallback} callback Node-style callback called with the error, if any, and heartbeat_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_base_service.prototype.heartbeat = function heartbeat(request, callback) {
            return this.rpcCall(heartbeat, $root.BaseMsg.heartbeat_req, $root.BaseMsg.heartbeat_resp, request, callback);
        }, "name", { value: "heartbeat" });

        /**
         * Calls heartbeat.
         * @function heartbeat
         * @memberof BaseMsg.msg_base_service
         * @instance
         * @param {BaseMsg.Iheartbeat_req} request heartbeat_req message or plain object
         * @returns {Promise<BaseMsg.heartbeat_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link BaseMsg.msg_base_service#pop_up_msg}.
         * @memberof BaseMsg.msg_base_service
         * @typedef pop_up_msgCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {BaseMsg.pop_up_msg_resp} [response] pop_up_msg_resp
         */

        /**
         * Calls pop_up_msg.
         * @function pop_up_msg
         * @memberof BaseMsg.msg_base_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {BaseMsg.msg_base_service.pop_up_msgCallback} callback Node-style callback called with the error, if any, and pop_up_msg_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_base_service.prototype.pop_up_msg = function pop_up_msg(request, callback) {
            return this.rpcCall(pop_up_msg, $root.CommonMsg.undefined, $root.BaseMsg.pop_up_msg_resp, request, callback);
        }, "name", { value: "pop_up_msg" });

        /**
         * Calls pop_up_msg.
         * @function pop_up_msg
         * @memberof BaseMsg.msg_base_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<BaseMsg.pop_up_msg_resp>} Promise
         * @variation 2
         */

        return msg_base_service;
    })();

    BaseMsg.heartbeat_req = (function() {

        /**
         * Properties of a heartbeat_req.
         * @memberof BaseMsg
         * @interface Iheartbeat_req
         * @property {number|Long} id heartbeat_req id
         */

        /**
         * Constructs a new heartbeat_req.
         * @memberof BaseMsg
         * @classdesc Represents a heartbeat_req.
         * @implements Iheartbeat_req
         * @constructor
         * @param {BaseMsg.Iheartbeat_req=} [properties] Properties to set
         */
        function heartbeat_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * heartbeat_req id.
         * @member {number|Long} id
         * @memberof BaseMsg.heartbeat_req
         * @instance
         */
        heartbeat_req.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new heartbeat_req instance using the specified properties.
         * @function create
         * @memberof BaseMsg.heartbeat_req
         * @static
         * @param {BaseMsg.Iheartbeat_req=} [properties] Properties to set
         * @returns {BaseMsg.heartbeat_req} heartbeat_req instance
         */
        heartbeat_req.create = function create(properties) {
            return new heartbeat_req(properties);
        };

        /**
         * Encodes the specified heartbeat_req message. Does not implicitly {@link BaseMsg.heartbeat_req.verify|verify} messages.
         * @function encode
         * @memberof BaseMsg.heartbeat_req
         * @static
         * @param {BaseMsg.Iheartbeat_req} message heartbeat_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartbeat_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified heartbeat_req message, length delimited. Does not implicitly {@link BaseMsg.heartbeat_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BaseMsg.heartbeat_req
         * @static
         * @param {BaseMsg.Iheartbeat_req} message heartbeat_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartbeat_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a heartbeat_req message from the specified reader or buffer.
         * @function decode
         * @memberof BaseMsg.heartbeat_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BaseMsg.heartbeat_req} heartbeat_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        heartbeat_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BaseMsg.heartbeat_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a heartbeat_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BaseMsg.heartbeat_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BaseMsg.heartbeat_req} heartbeat_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        heartbeat_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a heartbeat_req message.
         * @function verify
         * @memberof BaseMsg.heartbeat_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        heartbeat_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
            return null;
        };

        return heartbeat_req;
    })();

    BaseMsg.heartbeat_resp = (function() {

        /**
         * Properties of a heartbeat_resp.
         * @memberof BaseMsg
         * @interface Iheartbeat_resp
         * @property {number|Long} id heartbeat_resp id
         */

        /**
         * Constructs a new heartbeat_resp.
         * @memberof BaseMsg
         * @classdesc Represents a heartbeat_resp.
         * @implements Iheartbeat_resp
         * @constructor
         * @param {BaseMsg.Iheartbeat_resp=} [properties] Properties to set
         */
        function heartbeat_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * heartbeat_resp id.
         * @member {number|Long} id
         * @memberof BaseMsg.heartbeat_resp
         * @instance
         */
        heartbeat_resp.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new heartbeat_resp instance using the specified properties.
         * @function create
         * @memberof BaseMsg.heartbeat_resp
         * @static
         * @param {BaseMsg.Iheartbeat_resp=} [properties] Properties to set
         * @returns {BaseMsg.heartbeat_resp} heartbeat_resp instance
         */
        heartbeat_resp.create = function create(properties) {
            return new heartbeat_resp(properties);
        };

        /**
         * Encodes the specified heartbeat_resp message. Does not implicitly {@link BaseMsg.heartbeat_resp.verify|verify} messages.
         * @function encode
         * @memberof BaseMsg.heartbeat_resp
         * @static
         * @param {BaseMsg.Iheartbeat_resp} message heartbeat_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartbeat_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
            return writer;
        };

        /**
         * Encodes the specified heartbeat_resp message, length delimited. Does not implicitly {@link BaseMsg.heartbeat_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BaseMsg.heartbeat_resp
         * @static
         * @param {BaseMsg.Iheartbeat_resp} message heartbeat_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartbeat_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a heartbeat_resp message from the specified reader or buffer.
         * @function decode
         * @memberof BaseMsg.heartbeat_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BaseMsg.heartbeat_resp} heartbeat_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        heartbeat_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BaseMsg.heartbeat_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a heartbeat_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BaseMsg.heartbeat_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BaseMsg.heartbeat_resp} heartbeat_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        heartbeat_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a heartbeat_resp message.
         * @function verify
         * @memberof BaseMsg.heartbeat_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        heartbeat_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
            return null;
        };

        return heartbeat_resp;
    })();

    BaseMsg.pop_up_msg_resp = (function() {

        /**
         * Properties of a pop_up_msg_resp.
         * @memberof BaseMsg
         * @interface Ipop_up_msg_resp
         * @property {CommonMsg.Idmsg} msg pop_up_msg_resp msg
         */

        /**
         * Constructs a new pop_up_msg_resp.
         * @memberof BaseMsg
         * @classdesc Represents a pop_up_msg_resp.
         * @implements Ipop_up_msg_resp
         * @constructor
         * @param {BaseMsg.Ipop_up_msg_resp=} [properties] Properties to set
         */
        function pop_up_msg_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * pop_up_msg_resp msg.
         * @member {CommonMsg.Idmsg} msg
         * @memberof BaseMsg.pop_up_msg_resp
         * @instance
         */
        pop_up_msg_resp.prototype.msg = null;

        /**
         * Creates a new pop_up_msg_resp instance using the specified properties.
         * @function create
         * @memberof BaseMsg.pop_up_msg_resp
         * @static
         * @param {BaseMsg.Ipop_up_msg_resp=} [properties] Properties to set
         * @returns {BaseMsg.pop_up_msg_resp} pop_up_msg_resp instance
         */
        pop_up_msg_resp.create = function create(properties) {
            return new pop_up_msg_resp(properties);
        };

        /**
         * Encodes the specified pop_up_msg_resp message. Does not implicitly {@link BaseMsg.pop_up_msg_resp.verify|verify} messages.
         * @function encode
         * @memberof BaseMsg.pop_up_msg_resp
         * @static
         * @param {BaseMsg.Ipop_up_msg_resp} message pop_up_msg_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pop_up_msg_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.CommonMsg.dmsg.encode(message.msg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified pop_up_msg_resp message, length delimited. Does not implicitly {@link BaseMsg.pop_up_msg_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BaseMsg.pop_up_msg_resp
         * @static
         * @param {BaseMsg.Ipop_up_msg_resp} message pop_up_msg_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pop_up_msg_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a pop_up_msg_resp message from the specified reader or buffer.
         * @function decode
         * @memberof BaseMsg.pop_up_msg_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BaseMsg.pop_up_msg_resp} pop_up_msg_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        pop_up_msg_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BaseMsg.pop_up_msg_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.msg = $root.CommonMsg.dmsg.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("msg"))
                throw $util.ProtocolError("missing required 'msg'", { instance: message });
            return message;
        };

        /**
         * Decodes a pop_up_msg_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BaseMsg.pop_up_msg_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BaseMsg.pop_up_msg_resp} pop_up_msg_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        pop_up_msg_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a pop_up_msg_resp message.
         * @function verify
         * @memberof BaseMsg.pop_up_msg_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        pop_up_msg_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.CommonMsg.dmsg.verify(message.msg);
                if (error)
                    return "msg." + error;
            }
            return null;
        };

        return pop_up_msg_resp;
    })();

    return BaseMsg;
})();

$root.BroadCastMsg = (function() {

    /**
     * Namespace BroadCastMsg.
     * @exports BroadCastMsg
     * @namespace
     */
    var BroadCastMsg = {};

    /**
     * c_cmd enum.
     * @name BroadCastMsg.c_cmd
     * @enum {string}
     * @property {number} bcast_world_resp=1 bcast_world_resp value
     * @property {number} bcast_room_resp=2 bcast_room_resp value
     * @property {number} bcast_msg_resp=3 bcast_msg_resp value
     */
    BroadCastMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "bcast_world_resp"] = 1;
        values[valuesById[2] = "bcast_room_resp"] = 2;
        values[valuesById[3] = "bcast_msg_resp"] = 3;
        return values;
    })();

    BroadCastMsg.msg_broadcast_service = (function() {

        /**
         * Constructs a new msg_broadcast_service service.
         * @memberof BroadCastMsg
         * @classdesc Represents a msg_broadcast_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_broadcast_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_broadcast_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_broadcast_service;

        /**
         * Creates new msg_broadcast_service service using the specified rpc implementation.
         * @function create
         * @memberof BroadCastMsg.msg_broadcast_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_broadcast_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_broadcast_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link BroadCastMsg.msg_broadcast_service#broadcastWorld}.
         * @memberof BroadCastMsg.msg_broadcast_service
         * @typedef broadcastWorldCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {BroadCastMsg.bcast_world_resp} [response] bcast_world_resp
         */

        /**
         * Calls broadcastWorld.
         * @function broadcastWorld
         * @memberof BroadCastMsg.msg_broadcast_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {BroadCastMsg.msg_broadcast_service.broadcastWorldCallback} callback Node-style callback called with the error, if any, and bcast_world_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_broadcast_service.prototype.broadcastWorld = function broadcastWorld(request, callback) {
            return this.rpcCall(broadcastWorld, $root.CommonMsg.undefined, $root.BroadCastMsg.bcast_world_resp, request, callback);
        }, "name", { value: "broadcastWorld" });

        /**
         * Calls broadcastWorld.
         * @function broadcastWorld
         * @memberof BroadCastMsg.msg_broadcast_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<BroadCastMsg.bcast_world_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link BroadCastMsg.msg_broadcast_service#broadcastRoom}.
         * @memberof BroadCastMsg.msg_broadcast_service
         * @typedef broadcastRoomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {BroadCastMsg.bcast_room_resp} [response] bcast_room_resp
         */

        /**
         * Calls broadcastRoom.
         * @function broadcastRoom
         * @memberof BroadCastMsg.msg_broadcast_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {BroadCastMsg.msg_broadcast_service.broadcastRoomCallback} callback Node-style callback called with the error, if any, and bcast_room_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_broadcast_service.prototype.broadcastRoom = function broadcastRoom(request, callback) {
            return this.rpcCall(broadcastRoom, $root.CommonMsg.undefined, $root.BroadCastMsg.bcast_room_resp, request, callback);
        }, "name", { value: "broadcastRoom" });

        /**
         * Calls broadcastRoom.
         * @function broadcastRoom
         * @memberof BroadCastMsg.msg_broadcast_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<BroadCastMsg.bcast_room_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link BroadCastMsg.msg_broadcast_service#broadcastMsg}.
         * @memberof BroadCastMsg.msg_broadcast_service
         * @typedef broadcastMsgCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {BroadCastMsg.bcast_msg_resp} [response] bcast_msg_resp
         */

        /**
         * Calls broadcastMsg.
         * @function broadcastMsg
         * @memberof BroadCastMsg.msg_broadcast_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {BroadCastMsg.msg_broadcast_service.broadcastMsgCallback} callback Node-style callback called with the error, if any, and bcast_msg_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_broadcast_service.prototype.broadcastMsg = function broadcastMsg(request, callback) {
            return this.rpcCall(broadcastMsg, $root.CommonMsg.undefined, $root.BroadCastMsg.bcast_msg_resp, request, callback);
        }, "name", { value: "broadcastMsg" });

        /**
         * Calls broadcastMsg.
         * @function broadcastMsg
         * @memberof BroadCastMsg.msg_broadcast_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<BroadCastMsg.bcast_msg_resp>} Promise
         * @variation 2
         */

        return msg_broadcast_service;
    })();

    BroadCastMsg.bcast_world_resp = (function() {

        /**
         * Properties of a bcast_world_resp.
         * @memberof BroadCastMsg
         * @interface Ibcast_world_resp
         * @property {string} content bcast_world_resp content
         */

        /**
         * Constructs a new bcast_world_resp.
         * @memberof BroadCastMsg
         * @classdesc Represents a bcast_world_resp.
         * @implements Ibcast_world_resp
         * @constructor
         * @param {BroadCastMsg.Ibcast_world_resp=} [properties] Properties to set
         */
        function bcast_world_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bcast_world_resp content.
         * @member {string} content
         * @memberof BroadCastMsg.bcast_world_resp
         * @instance
         */
        bcast_world_resp.prototype.content = "";

        /**
         * Creates a new bcast_world_resp instance using the specified properties.
         * @function create
         * @memberof BroadCastMsg.bcast_world_resp
         * @static
         * @param {BroadCastMsg.Ibcast_world_resp=} [properties] Properties to set
         * @returns {BroadCastMsg.bcast_world_resp} bcast_world_resp instance
         */
        bcast_world_resp.create = function create(properties) {
            return new bcast_world_resp(properties);
        };

        /**
         * Encodes the specified bcast_world_resp message. Does not implicitly {@link BroadCastMsg.bcast_world_resp.verify|verify} messages.
         * @function encode
         * @memberof BroadCastMsg.bcast_world_resp
         * @static
         * @param {BroadCastMsg.Ibcast_world_resp} message bcast_world_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_world_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
            return writer;
        };

        /**
         * Encodes the specified bcast_world_resp message, length delimited. Does not implicitly {@link BroadCastMsg.bcast_world_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BroadCastMsg.bcast_world_resp
         * @static
         * @param {BroadCastMsg.Ibcast_world_resp} message bcast_world_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_world_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bcast_world_resp message from the specified reader or buffer.
         * @function decode
         * @memberof BroadCastMsg.bcast_world_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BroadCastMsg.bcast_world_resp} bcast_world_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_world_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BroadCastMsg.bcast_world_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.content = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("content"))
                throw $util.ProtocolError("missing required 'content'", { instance: message });
            return message;
        };

        /**
         * Decodes a bcast_world_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BroadCastMsg.bcast_world_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BroadCastMsg.bcast_world_resp} bcast_world_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_world_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bcast_world_resp message.
         * @function verify
         * @memberof BroadCastMsg.bcast_world_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bcast_world_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.content))
                return "content: string expected";
            return null;
        };

        return bcast_world_resp;
    })();

    BroadCastMsg.bcast_room_resp = (function() {

        /**
         * Properties of a bcast_room_resp.
         * @memberof BroadCastMsg
         * @interface Ibcast_room_resp
         * @property {string} content bcast_room_resp content
         */

        /**
         * Constructs a new bcast_room_resp.
         * @memberof BroadCastMsg
         * @classdesc Represents a bcast_room_resp.
         * @implements Ibcast_room_resp
         * @constructor
         * @param {BroadCastMsg.Ibcast_room_resp=} [properties] Properties to set
         */
        function bcast_room_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bcast_room_resp content.
         * @member {string} content
         * @memberof BroadCastMsg.bcast_room_resp
         * @instance
         */
        bcast_room_resp.prototype.content = "";

        /**
         * Creates a new bcast_room_resp instance using the specified properties.
         * @function create
         * @memberof BroadCastMsg.bcast_room_resp
         * @static
         * @param {BroadCastMsg.Ibcast_room_resp=} [properties] Properties to set
         * @returns {BroadCastMsg.bcast_room_resp} bcast_room_resp instance
         */
        bcast_room_resp.create = function create(properties) {
            return new bcast_room_resp(properties);
        };

        /**
         * Encodes the specified bcast_room_resp message. Does not implicitly {@link BroadCastMsg.bcast_room_resp.verify|verify} messages.
         * @function encode
         * @memberof BroadCastMsg.bcast_room_resp
         * @static
         * @param {BroadCastMsg.Ibcast_room_resp} message bcast_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_room_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
            return writer;
        };

        /**
         * Encodes the specified bcast_room_resp message, length delimited. Does not implicitly {@link BroadCastMsg.bcast_room_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BroadCastMsg.bcast_room_resp
         * @static
         * @param {BroadCastMsg.Ibcast_room_resp} message bcast_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_room_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bcast_room_resp message from the specified reader or buffer.
         * @function decode
         * @memberof BroadCastMsg.bcast_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BroadCastMsg.bcast_room_resp} bcast_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_room_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BroadCastMsg.bcast_room_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.content = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("content"))
                throw $util.ProtocolError("missing required 'content'", { instance: message });
            return message;
        };

        /**
         * Decodes a bcast_room_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BroadCastMsg.bcast_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BroadCastMsg.bcast_room_resp} bcast_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_room_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bcast_room_resp message.
         * @function verify
         * @memberof BroadCastMsg.bcast_room_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bcast_room_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.content))
                return "content: string expected";
            return null;
        };

        return bcast_room_resp;
    })();

    BroadCastMsg.bcast_msg_resp = (function() {

        /**
         * Properties of a bcast_msg_resp.
         * @memberof BroadCastMsg
         * @interface Ibcast_msg_resp
         * @property {CommonMsg.Idmsg} msg bcast_msg_resp msg
         */

        /**
         * Constructs a new bcast_msg_resp.
         * @memberof BroadCastMsg
         * @classdesc Represents a bcast_msg_resp.
         * @implements Ibcast_msg_resp
         * @constructor
         * @param {BroadCastMsg.Ibcast_msg_resp=} [properties] Properties to set
         */
        function bcast_msg_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bcast_msg_resp msg.
         * @member {CommonMsg.Idmsg} msg
         * @memberof BroadCastMsg.bcast_msg_resp
         * @instance
         */
        bcast_msg_resp.prototype.msg = null;

        /**
         * Creates a new bcast_msg_resp instance using the specified properties.
         * @function create
         * @memberof BroadCastMsg.bcast_msg_resp
         * @static
         * @param {BroadCastMsg.Ibcast_msg_resp=} [properties] Properties to set
         * @returns {BroadCastMsg.bcast_msg_resp} bcast_msg_resp instance
         */
        bcast_msg_resp.create = function create(properties) {
            return new bcast_msg_resp(properties);
        };

        /**
         * Encodes the specified bcast_msg_resp message. Does not implicitly {@link BroadCastMsg.bcast_msg_resp.verify|verify} messages.
         * @function encode
         * @memberof BroadCastMsg.bcast_msg_resp
         * @static
         * @param {BroadCastMsg.Ibcast_msg_resp} message bcast_msg_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_msg_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.CommonMsg.dmsg.encode(message.msg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified bcast_msg_resp message, length delimited. Does not implicitly {@link BroadCastMsg.bcast_msg_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BroadCastMsg.bcast_msg_resp
         * @static
         * @param {BroadCastMsg.Ibcast_msg_resp} message bcast_msg_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_msg_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bcast_msg_resp message from the specified reader or buffer.
         * @function decode
         * @memberof BroadCastMsg.bcast_msg_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BroadCastMsg.bcast_msg_resp} bcast_msg_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_msg_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BroadCastMsg.bcast_msg_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.msg = $root.CommonMsg.dmsg.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("msg"))
                throw $util.ProtocolError("missing required 'msg'", { instance: message });
            return message;
        };

        /**
         * Decodes a bcast_msg_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BroadCastMsg.bcast_msg_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BroadCastMsg.bcast_msg_resp} bcast_msg_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_msg_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bcast_msg_resp message.
         * @function verify
         * @memberof BroadCastMsg.bcast_msg_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bcast_msg_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.CommonMsg.dmsg.verify(message.msg);
                if (error)
                    return "msg." + error;
            }
            return null;
        };

        return bcast_msg_resp;
    })();

    return BroadCastMsg;
})();

$root.CodeMsg = (function() {

    /**
     * Namespace CodeMsg.
     * @exports CodeMsg
     * @namespace
     */
    var CodeMsg = {};

    /**
     * msg_code enum.
     * @name CodeMsg.msg_code
     * @enum {string}
     * @property {number} CODE_SUCCESS=1 CODE_SUCCESS value
     * @property {number} CODE_FAIL=2 CODE_FAIL value
     */
    CodeMsg.msg_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "CODE_SUCCESS"] = 1;
        values[valuesById[2] = "CODE_FAIL"] = 2;
        return values;
    })();

    return CodeMsg;
})();

$root.ExtendMsg = (function() {

    /**
     * Namespace ExtendMsg.
     * @exports ExtendMsg
     * @namespace
     */
    var ExtendMsg = {};

    /**
     * c_cmd enum.
     * @name ExtendMsg.c_cmd
     * @enum {string}
     * @property {number} extend_box_req=0 extend_box_req value
     * @property {number} extend_box_resp=1 extend_box_resp value
     * @property {number} furious_fish_resp=2 furious_fish_resp value
     */
    ExtendMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "extend_box_req"] = 0;
        values[valuesById[1] = "extend_box_resp"] = 1;
        values[valuesById[2] = "furious_fish_resp"] = 2;
        return values;
    })();

    ExtendMsg.msg_extend_service = (function() {

        /**
         * Constructs a new msg_extend_service service.
         * @memberof ExtendMsg
         * @classdesc Represents a msg_extend_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_extend_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_extend_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_extend_service;

        /**
         * Creates new msg_extend_service service using the specified rpc implementation.
         * @function create
         * @memberof ExtendMsg.msg_extend_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_extend_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_extend_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link ExtendMsg.msg_extend_service#extend_box}.
         * @memberof ExtendMsg.msg_extend_service
         * @typedef extend_boxCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ExtendMsg.extend_box_resp} [response] extend_box_resp
         */

        /**
         * Calls extend_box.
         * @function extend_box
         * @memberof ExtendMsg.msg_extend_service
         * @instance
         * @param {ExtendMsg.Iextend_box_req} request extend_box_req message or plain object
         * @param {ExtendMsg.msg_extend_service.extend_boxCallback} callback Node-style callback called with the error, if any, and extend_box_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_extend_service.prototype.extend_box = function extend_box(request, callback) {
            return this.rpcCall(extend_box, $root.ExtendMsg.extend_box_req, $root.ExtendMsg.extend_box_resp, request, callback);
        }, "name", { value: "extend_box" });

        /**
         * Calls extend_box.
         * @function extend_box
         * @memberof ExtendMsg.msg_extend_service
         * @instance
         * @param {ExtendMsg.Iextend_box_req} request extend_box_req message or plain object
         * @returns {Promise<ExtendMsg.extend_box_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ExtendMsg.msg_extend_service#extend_furious}.
         * @memberof ExtendMsg.msg_extend_service
         * @typedef extend_furiousCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ExtendMsg.furious_fish_resp} [response] furious_fish_resp
         */

        /**
         * Calls extend_furious.
         * @function extend_furious
         * @memberof ExtendMsg.msg_extend_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {ExtendMsg.msg_extend_service.extend_furiousCallback} callback Node-style callback called with the error, if any, and furious_fish_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_extend_service.prototype.extend_furious = function extend_furious(request, callback) {
            return this.rpcCall(extend_furious, $root.CommonMsg.undefined, $root.ExtendMsg.furious_fish_resp, request, callback);
        }, "name", { value: "extend_furious" });

        /**
         * Calls extend_furious.
         * @function extend_furious
         * @memberof ExtendMsg.msg_extend_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<ExtendMsg.furious_fish_resp>} Promise
         * @variation 2
         */

        return msg_extend_service;
    })();

    ExtendMsg.extend_box_req = (function() {

        /**
         * Properties of an extend_box_req.
         * @memberof ExtendMsg
         * @interface Iextend_box_req
         */

        /**
         * Constructs a new extend_box_req.
         * @memberof ExtendMsg
         * @classdesc Represents an extend_box_req.
         * @implements Iextend_box_req
         * @constructor
         * @param {ExtendMsg.Iextend_box_req=} [properties] Properties to set
         */
        function extend_box_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new extend_box_req instance using the specified properties.
         * @function create
         * @memberof ExtendMsg.extend_box_req
         * @static
         * @param {ExtendMsg.Iextend_box_req=} [properties] Properties to set
         * @returns {ExtendMsg.extend_box_req} extend_box_req instance
         */
        extend_box_req.create = function create(properties) {
            return new extend_box_req(properties);
        };

        /**
         * Encodes the specified extend_box_req message. Does not implicitly {@link ExtendMsg.extend_box_req.verify|verify} messages.
         * @function encode
         * @memberof ExtendMsg.extend_box_req
         * @static
         * @param {ExtendMsg.Iextend_box_req} message extend_box_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extend_box_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified extend_box_req message, length delimited. Does not implicitly {@link ExtendMsg.extend_box_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ExtendMsg.extend_box_req
         * @static
         * @param {ExtendMsg.Iextend_box_req} message extend_box_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extend_box_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an extend_box_req message from the specified reader or buffer.
         * @function decode
         * @memberof ExtendMsg.extend_box_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ExtendMsg.extend_box_req} extend_box_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extend_box_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExtendMsg.extend_box_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an extend_box_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ExtendMsg.extend_box_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ExtendMsg.extend_box_req} extend_box_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extend_box_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an extend_box_req message.
         * @function verify
         * @memberof ExtendMsg.extend_box_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        extend_box_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return extend_box_req;
    })();

    ExtendMsg.extend_box_resp = (function() {

        /**
         * Properties of an extend_box_resp.
         * @memberof ExtendMsg
         * @interface Iextend_box_resp
         * @property {number|Long} uid extend_box_resp uid
         * @property {number} score extend_box_resp score
         * @property {number} hit_num extend_box_resp hit_num
         * @property {number|Long|null} [chips] extend_box_resp chips
         * @property {number|Long|null} [show_chips] extend_box_resp show_chips
         */

        /**
         * Constructs a new extend_box_resp.
         * @memberof ExtendMsg
         * @classdesc Represents an extend_box_resp.
         * @implements Iextend_box_resp
         * @constructor
         * @param {ExtendMsg.Iextend_box_resp=} [properties] Properties to set
         */
        function extend_box_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * extend_box_resp uid.
         * @member {number|Long} uid
         * @memberof ExtendMsg.extend_box_resp
         * @instance
         */
        extend_box_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * extend_box_resp score.
         * @member {number} score
         * @memberof ExtendMsg.extend_box_resp
         * @instance
         */
        extend_box_resp.prototype.score = 0;

        /**
         * extend_box_resp hit_num.
         * @member {number} hit_num
         * @memberof ExtendMsg.extend_box_resp
         * @instance
         */
        extend_box_resp.prototype.hit_num = 0;

        /**
         * extend_box_resp chips.
         * @member {number|Long} chips
         * @memberof ExtendMsg.extend_box_resp
         * @instance
         */
        extend_box_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * extend_box_resp show_chips.
         * @member {number|Long} show_chips
         * @memberof ExtendMsg.extend_box_resp
         * @instance
         */
        extend_box_resp.prototype.show_chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new extend_box_resp instance using the specified properties.
         * @function create
         * @memberof ExtendMsg.extend_box_resp
         * @static
         * @param {ExtendMsg.Iextend_box_resp=} [properties] Properties to set
         * @returns {ExtendMsg.extend_box_resp} extend_box_resp instance
         */
        extend_box_resp.create = function create(properties) {
            return new extend_box_resp(properties);
        };

        /**
         * Encodes the specified extend_box_resp message. Does not implicitly {@link ExtendMsg.extend_box_resp.verify|verify} messages.
         * @function encode
         * @memberof ExtendMsg.extend_box_resp
         * @static
         * @param {ExtendMsg.Iextend_box_resp} message extend_box_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extend_box_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.score);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.hit_num);
            if (message.chips != null && message.hasOwnProperty("chips"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chips);
            if (message.show_chips != null && message.hasOwnProperty("show_chips"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.show_chips);
            return writer;
        };

        /**
         * Encodes the specified extend_box_resp message, length delimited. Does not implicitly {@link ExtendMsg.extend_box_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ExtendMsg.extend_box_resp
         * @static
         * @param {ExtendMsg.Iextend_box_resp} message extend_box_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extend_box_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an extend_box_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ExtendMsg.extend_box_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ExtendMsg.extend_box_resp} extend_box_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extend_box_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExtendMsg.extend_box_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.score = reader.uint32();
                    break;
                case 3:
                    message.hit_num = reader.uint32();
                    break;
                case 4:
                    message.chips = reader.uint64();
                    break;
                case 5:
                    message.show_chips = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("hit_num"))
                throw $util.ProtocolError("missing required 'hit_num'", { instance: message });
            return message;
        };

        /**
         * Decodes an extend_box_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ExtendMsg.extend_box_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ExtendMsg.extend_box_resp} extend_box_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extend_box_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an extend_box_resp message.
         * @function verify
         * @memberof ExtendMsg.extend_box_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        extend_box_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.score))
                return "score: integer expected";
            if (!$util.isInteger(message.hit_num))
                return "hit_num: integer expected";
            if (message.chips != null && message.hasOwnProperty("chips"))
                if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                    return "chips: integer|Long expected";
            if (message.show_chips != null && message.hasOwnProperty("show_chips"))
                if (!$util.isInteger(message.show_chips) && !(message.show_chips && $util.isInteger(message.show_chips.low) && $util.isInteger(message.show_chips.high)))
                    return "show_chips: integer|Long expected";
            return null;
        };

        return extend_box_resp;
    })();

    ExtendMsg.furious_fish_resp = (function() {

        /**
         * Properties of a furious_fish_resp.
         * @memberof ExtendMsg
         * @interface Ifurious_fish_resp
         * @property {number} type furious_fish_resp type
         * @property {number|Long} id furious_fish_resp id
         * @property {number} level furious_fish_resp level
         * @property {number} fish_rate furious_fish_resp fish_rate
         */

        /**
         * Constructs a new furious_fish_resp.
         * @memberof ExtendMsg
         * @classdesc Represents a furious_fish_resp.
         * @implements Ifurious_fish_resp
         * @constructor
         * @param {ExtendMsg.Ifurious_fish_resp=} [properties] Properties to set
         */
        function furious_fish_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * furious_fish_resp type.
         * @member {number} type
         * @memberof ExtendMsg.furious_fish_resp
         * @instance
         */
        furious_fish_resp.prototype.type = 0;

        /**
         * furious_fish_resp id.
         * @member {number|Long} id
         * @memberof ExtendMsg.furious_fish_resp
         * @instance
         */
        furious_fish_resp.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * furious_fish_resp level.
         * @member {number} level
         * @memberof ExtendMsg.furious_fish_resp
         * @instance
         */
        furious_fish_resp.prototype.level = 0;

        /**
         * furious_fish_resp fish_rate.
         * @member {number} fish_rate
         * @memberof ExtendMsg.furious_fish_resp
         * @instance
         */
        furious_fish_resp.prototype.fish_rate = 0;

        /**
         * Creates a new furious_fish_resp instance using the specified properties.
         * @function create
         * @memberof ExtendMsg.furious_fish_resp
         * @static
         * @param {ExtendMsg.Ifurious_fish_resp=} [properties] Properties to set
         * @returns {ExtendMsg.furious_fish_resp} furious_fish_resp instance
         */
        furious_fish_resp.create = function create(properties) {
            return new furious_fish_resp(properties);
        };

        /**
         * Encodes the specified furious_fish_resp message. Does not implicitly {@link ExtendMsg.furious_fish_resp.verify|verify} messages.
         * @function encode
         * @memberof ExtendMsg.furious_fish_resp
         * @static
         * @param {ExtendMsg.Ifurious_fish_resp} message furious_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        furious_fish_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.level);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.fish_rate);
            return writer;
        };

        /**
         * Encodes the specified furious_fish_resp message, length delimited. Does not implicitly {@link ExtendMsg.furious_fish_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ExtendMsg.furious_fish_resp
         * @static
         * @param {ExtendMsg.Ifurious_fish_resp} message furious_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        furious_fish_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a furious_fish_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ExtendMsg.furious_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ExtendMsg.furious_fish_resp} furious_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        furious_fish_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExtendMsg.furious_fish_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                case 2:
                    message.id = reader.uint64();
                    break;
                case 3:
                    message.level = reader.uint32();
                    break;
                case 4:
                    message.fish_rate = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("level"))
                throw $util.ProtocolError("missing required 'level'", { instance: message });
            if (!message.hasOwnProperty("fish_rate"))
                throw $util.ProtocolError("missing required 'fish_rate'", { instance: message });
            return message;
        };

        /**
         * Decodes a furious_fish_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ExtendMsg.furious_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ExtendMsg.furious_fish_resp} furious_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        furious_fish_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a furious_fish_resp message.
         * @function verify
         * @memberof ExtendMsg.furious_fish_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        furious_fish_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
            if (!$util.isInteger(message.level))
                return "level: integer expected";
            if (!$util.isInteger(message.fish_rate))
                return "fish_rate: integer expected";
            return null;
        };

        return furious_fish_resp;
    })();

    return ExtendMsg;
})();

$root.RoleMsg = (function() {

    /**
     * Namespace RoleMsg.
     * @exports RoleMsg
     * @namespace
     */
    var RoleMsg = {};

    /**
     * msg_role_code enum.
     * @name RoleMsg.msg_role_code
     * @enum {string}
     * @property {number} ROLE_CODE_SUCCESS=1 ROLE_CODE_SUCCESS value
     * @property {number} ROLE_CODE_FAIL=2 ROLE_CODE_FAIL value
     */
    RoleMsg.msg_role_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "ROLE_CODE_SUCCESS"] = 1;
        values[valuesById[2] = "ROLE_CODE_FAIL"] = 2;
        return values;
    })();

    /**
     * msg_relogin_code enum.
     * @name RoleMsg.msg_relogin_code
     * @enum {string}
     * @property {number} RELOGIN_NORMAL=1 RELOGIN_NORMAL value
     * @property {number} RELOGIN_RECONNECT=2 RELOGIN_RECONNECT value
     */
    RoleMsg.msg_relogin_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "RELOGIN_NORMAL"] = 1;
        values[valuesById[2] = "RELOGIN_RECONNECT"] = 2;
        return values;
    })();

    RoleMsg.role_info = (function() {

        /**
         * Properties of a role_info.
         * @memberof RoleMsg
         * @interface Irole_info
         * @property {number|Long} agent_id role_info agent_id
         * @property {number|Long} owner_id role_info owner_id
         * @property {string} account role_info account
         * @property {number|Long} jetton role_info jetton
         * @property {number} level role_info level
         * @property {string} nickname role_info nickname
         * @property {number|Long} roleId role_info roleId
         * @property {number|Long} jetton_show role_info jetton_show
         * @property {boolean|null} [is_new] role_info is_new
         * @property {number|Long|null} [main_wallet] role_info main_wallet
         * @property {number|Long|null} [auto_wallet] role_info auto_wallet
         * @property {number|null} [left_race_price] role_info left_race_price
         * @property {boolean|null} [is_wallet] role_info is_wallet
         * @property {number|Long|null} [exp] role_info exp
         * @property {number|Long|null} [need_exp] role_info need_exp
         * @property {number|Long|null} [top_agent_id] role_info top_agent_id
         */

        /**
         * Constructs a new role_info.
         * @memberof RoleMsg
         * @classdesc Represents a role_info.
         * @implements Irole_info
         * @constructor
         * @param {RoleMsg.Irole_info=} [properties] Properties to set
         */
        function role_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * role_info agent_id.
         * @member {number|Long} agent_id
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.agent_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * role_info owner_id.
         * @member {number|Long} owner_id
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.owner_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * role_info account.
         * @member {string} account
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.account = "";

        /**
         * role_info jetton.
         * @member {number|Long} jetton
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.jetton = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info level.
         * @member {number} level
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.level = 0;

        /**
         * role_info nickname.
         * @member {string} nickname
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.nickname = "";

        /**
         * role_info roleId.
         * @member {number|Long} roleId
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.roleId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info jetton_show.
         * @member {number|Long} jetton_show
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.jetton_show = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info is_new.
         * @member {boolean} is_new
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.is_new = false;

        /**
         * role_info main_wallet.
         * @member {number|Long} main_wallet
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.main_wallet = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info auto_wallet.
         * @member {number|Long} auto_wallet
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.auto_wallet = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info left_race_price.
         * @member {number} left_race_price
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.left_race_price = 0;

        /**
         * role_info is_wallet.
         * @member {boolean} is_wallet
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.is_wallet = false;

        /**
         * role_info exp.
         * @member {number|Long} exp
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info need_exp.
         * @member {number|Long} need_exp
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.need_exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * role_info top_agent_id.
         * @member {number|Long} top_agent_id
         * @memberof RoleMsg.role_info
         * @instance
         */
        role_info.prototype.top_agent_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new role_info instance using the specified properties.
         * @function create
         * @memberof RoleMsg.role_info
         * @static
         * @param {RoleMsg.Irole_info=} [properties] Properties to set
         * @returns {RoleMsg.role_info} role_info instance
         */
        role_info.create = function create(properties) {
            return new role_info(properties);
        };

        /**
         * Encodes the specified role_info message. Does not implicitly {@link RoleMsg.role_info.verify|verify} messages.
         * @function encode
         * @memberof RoleMsg.role_info
         * @static
         * @param {RoleMsg.Irole_info} message role_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        role_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.agent_id);
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.owner_id);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.account);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.jetton);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.level);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.nickname);
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.roleId);
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.jetton_show);
            if (message.is_new != null && message.hasOwnProperty("is_new"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.is_new);
            if (message.main_wallet != null && message.hasOwnProperty("main_wallet"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.main_wallet);
            if (message.auto_wallet != null && message.hasOwnProperty("auto_wallet"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.auto_wallet);
            if (message.left_race_price != null && message.hasOwnProperty("left_race_price"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.left_race_price);
            if (message.is_wallet != null && message.hasOwnProperty("is_wallet"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.is_wallet);
            if (message.exp != null && message.hasOwnProperty("exp"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint64(message.exp);
            if (message.need_exp != null && message.hasOwnProperty("need_exp"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.need_exp);
            if (message.top_agent_id != null && message.hasOwnProperty("top_agent_id"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint64(message.top_agent_id);
            return writer;
        };

        /**
         * Encodes the specified role_info message, length delimited. Does not implicitly {@link RoleMsg.role_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleMsg.role_info
         * @static
         * @param {RoleMsg.Irole_info} message role_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        role_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a role_info message from the specified reader or buffer.
         * @function decode
         * @memberof RoleMsg.role_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleMsg.role_info} role_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        role_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleMsg.role_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.agent_id = reader.int64();
                    break;
                case 2:
                    message.owner_id = reader.int64();
                    break;
                case 3:
                    message.account = reader.string();
                    break;
                case 4:
                    message.jetton = reader.uint64();
                    break;
                case 5:
                    message.level = reader.uint32();
                    break;
                case 6:
                    message.nickname = reader.string();
                    break;
                case 7:
                    message.roleId = reader.uint64();
                    break;
                case 8:
                    message.jetton_show = reader.uint64();
                    break;
                case 9:
                    message.is_new = reader.bool();
                    break;
                case 10:
                    message.main_wallet = reader.uint64();
                    break;
                case 11:
                    message.auto_wallet = reader.uint64();
                    break;
                case 12:
                    message.left_race_price = reader.uint32();
                    break;
                case 13:
                    message.is_wallet = reader.bool();
                    break;
                case 14:
                    message.exp = reader.uint64();
                    break;
                case 15:
                    message.need_exp = reader.uint64();
                    break;
                case 16:
                    message.top_agent_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("agent_id"))
                throw $util.ProtocolError("missing required 'agent_id'", { instance: message });
            if (!message.hasOwnProperty("owner_id"))
                throw $util.ProtocolError("missing required 'owner_id'", { instance: message });
            if (!message.hasOwnProperty("account"))
                throw $util.ProtocolError("missing required 'account'", { instance: message });
            if (!message.hasOwnProperty("jetton"))
                throw $util.ProtocolError("missing required 'jetton'", { instance: message });
            if (!message.hasOwnProperty("level"))
                throw $util.ProtocolError("missing required 'level'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("roleId"))
                throw $util.ProtocolError("missing required 'roleId'", { instance: message });
            if (!message.hasOwnProperty("jetton_show"))
                throw $util.ProtocolError("missing required 'jetton_show'", { instance: message });
            return message;
        };

        /**
         * Decodes a role_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleMsg.role_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleMsg.role_info} role_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        role_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a role_info message.
         * @function verify
         * @memberof RoleMsg.role_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        role_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.agent_id) && !(message.agent_id && $util.isInteger(message.agent_id.low) && $util.isInteger(message.agent_id.high)))
                return "agent_id: integer|Long expected";
            if (!$util.isInteger(message.owner_id) && !(message.owner_id && $util.isInteger(message.owner_id.low) && $util.isInteger(message.owner_id.high)))
                return "owner_id: integer|Long expected";
            if (!$util.isString(message.account))
                return "account: string expected";
            if (!$util.isInteger(message.jetton) && !(message.jetton && $util.isInteger(message.jetton.low) && $util.isInteger(message.jetton.high)))
                return "jetton: integer|Long expected";
            if (!$util.isInteger(message.level))
                return "level: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.roleId) && !(message.roleId && $util.isInteger(message.roleId.low) && $util.isInteger(message.roleId.high)))
                return "roleId: integer|Long expected";
            if (!$util.isInteger(message.jetton_show) && !(message.jetton_show && $util.isInteger(message.jetton_show.low) && $util.isInteger(message.jetton_show.high)))
                return "jetton_show: integer|Long expected";
            if (message.is_new != null && message.hasOwnProperty("is_new"))
                if (typeof message.is_new !== "boolean")
                    return "is_new: boolean expected";
            if (message.main_wallet != null && message.hasOwnProperty("main_wallet"))
                if (!$util.isInteger(message.main_wallet) && !(message.main_wallet && $util.isInteger(message.main_wallet.low) && $util.isInteger(message.main_wallet.high)))
                    return "main_wallet: integer|Long expected";
            if (message.auto_wallet != null && message.hasOwnProperty("auto_wallet"))
                if (!$util.isInteger(message.auto_wallet) && !(message.auto_wallet && $util.isInteger(message.auto_wallet.low) && $util.isInteger(message.auto_wallet.high)))
                    return "auto_wallet: integer|Long expected";
            if (message.left_race_price != null && message.hasOwnProperty("left_race_price"))
                if (!$util.isInteger(message.left_race_price))
                    return "left_race_price: integer expected";
            if (message.is_wallet != null && message.hasOwnProperty("is_wallet"))
                if (typeof message.is_wallet !== "boolean")
                    return "is_wallet: boolean expected";
            if (message.exp != null && message.hasOwnProperty("exp"))
                if (!$util.isInteger(message.exp) && !(message.exp && $util.isInteger(message.exp.low) && $util.isInteger(message.exp.high)))
                    return "exp: integer|Long expected";
            if (message.need_exp != null && message.hasOwnProperty("need_exp"))
                if (!$util.isInteger(message.need_exp) && !(message.need_exp && $util.isInteger(message.need_exp.low) && $util.isInteger(message.need_exp.high)))
                    return "need_exp: integer|Long expected";
            if (message.top_agent_id != null && message.hasOwnProperty("top_agent_id"))
                if (!$util.isInteger(message.top_agent_id) && !(message.top_agent_id && $util.isInteger(message.top_agent_id.low) && $util.isInteger(message.top_agent_id.high)))
                    return "top_agent_id: integer|Long expected";
            return null;
        };

        return role_info;
    })();

    RoleMsg.role_reconnect = (function() {

        /**
         * Properties of a role_reconnect.
         * @memberof RoleMsg
         * @interface Irole_reconnect
         * @property {RoleMsg.msg_relogin_code} code role_reconnect code
         * @property {CommonMsg.room_type} roomtype role_reconnect roomtype
         * @property {number|null} [raceid] role_reconnect raceid
         */

        /**
         * Constructs a new role_reconnect.
         * @memberof RoleMsg
         * @classdesc Represents a role_reconnect.
         * @implements Irole_reconnect
         * @constructor
         * @param {RoleMsg.Irole_reconnect=} [properties] Properties to set
         */
        function role_reconnect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * role_reconnect code.
         * @member {RoleMsg.msg_relogin_code} code
         * @memberof RoleMsg.role_reconnect
         * @instance
         */
        role_reconnect.prototype.code = 1;

        /**
         * role_reconnect roomtype.
         * @member {CommonMsg.room_type} roomtype
         * @memberof RoleMsg.role_reconnect
         * @instance
         */
        role_reconnect.prototype.roomtype = 0;

        /**
         * role_reconnect raceid.
         * @member {number} raceid
         * @memberof RoleMsg.role_reconnect
         * @instance
         */
        role_reconnect.prototype.raceid = 0;

        /**
         * Creates a new role_reconnect instance using the specified properties.
         * @function create
         * @memberof RoleMsg.role_reconnect
         * @static
         * @param {RoleMsg.Irole_reconnect=} [properties] Properties to set
         * @returns {RoleMsg.role_reconnect} role_reconnect instance
         */
        role_reconnect.create = function create(properties) {
            return new role_reconnect(properties);
        };

        /**
         * Encodes the specified role_reconnect message. Does not implicitly {@link RoleMsg.role_reconnect.verify|verify} messages.
         * @function encode
         * @memberof RoleMsg.role_reconnect
         * @static
         * @param {RoleMsg.Irole_reconnect} message role_reconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        role_reconnect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomtype);
            if (message.raceid != null && message.hasOwnProperty("raceid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.raceid);
            return writer;
        };

        /**
         * Encodes the specified role_reconnect message, length delimited. Does not implicitly {@link RoleMsg.role_reconnect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleMsg.role_reconnect
         * @static
         * @param {RoleMsg.Irole_reconnect} message role_reconnect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        role_reconnect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a role_reconnect message from the specified reader or buffer.
         * @function decode
         * @memberof RoleMsg.role_reconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleMsg.role_reconnect} role_reconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        role_reconnect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleMsg.role_reconnect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.roomtype = reader.int32();
                    break;
                case 3:
                    message.raceid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            if (!message.hasOwnProperty("roomtype"))
                throw $util.ProtocolError("missing required 'roomtype'", { instance: message });
            return message;
        };

        /**
         * Decodes a role_reconnect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleMsg.role_reconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleMsg.role_reconnect} role_reconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        role_reconnect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a role_reconnect message.
         * @function verify
         * @memberof RoleMsg.role_reconnect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        role_reconnect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
                break;
            }
            switch (message.roomtype) {
            default:
                return "roomtype: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 100:
            case 101:
                break;
            }
            if (message.raceid != null && message.hasOwnProperty("raceid"))
                if (!$util.isInteger(message.raceid))
                    return "raceid: integer expected";
            return null;
        };

        return role_reconnect;
    })();

    return RoleMsg;
})();

$root.LoginMsg = (function() {

    /**
     * Namespace LoginMsg.
     * @exports LoginMsg
     * @namespace
     */
    var LoginMsg = {};

    /**
     * c_cmd enum.
     * @name LoginMsg.c_cmd
     * @enum {string}
     * @property {number} login_req=0 login_req value
     * @property {number} login_resp=1 login_resp value
     * @property {number} time_req=3 time_req value
     * @property {number} time_resp=4 time_resp value
     * @property {number} login_account_req=5 login_account_req value
     * @property {number} kictout_resp=6 kictout_resp value
     * @property {number} update_token_resp=7 update_token_resp value
     * @property {number} switch_resp=8 switch_resp value
     */
    LoginMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "login_req"] = 0;
        values[valuesById[1] = "login_resp"] = 1;
        values[valuesById[3] = "time_req"] = 3;
        values[valuesById[4] = "time_resp"] = 4;
        values[valuesById[5] = "login_account_req"] = 5;
        values[valuesById[6] = "kictout_resp"] = 6;
        values[valuesById[7] = "update_token_resp"] = 7;
        values[valuesById[8] = "switch_resp"] = 8;
        return values;
    })();

    LoginMsg.msg_login_service = (function() {

        /**
         * Constructs a new msg_login_service service.
         * @memberof LoginMsg
         * @classdesc Represents a msg_login_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_login_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_login_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_login_service;

        /**
         * Creates new msg_login_service service using the specified rpc implementation.
         * @function create
         * @memberof LoginMsg.msg_login_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_login_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_login_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link LoginMsg.msg_login_service#login}.
         * @memberof LoginMsg.msg_login_service
         * @typedef loginCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {LoginMsg.login_resp} [response] login_resp
         */

        /**
         * Calls login.
         * @function login
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {LoginMsg.Ilogin_req} request login_req message or plain object
         * @param {LoginMsg.msg_login_service.loginCallback} callback Node-style callback called with the error, if any, and login_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_login_service.prototype.login = function login(request, callback) {
            return this.rpcCall(login, $root.LoginMsg.login_req, $root.LoginMsg.login_resp, request, callback);
        }, "name", { value: "login" });

        /**
         * Calls login.
         * @function login
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {LoginMsg.Ilogin_req} request login_req message or plain object
         * @returns {Promise<LoginMsg.login_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link LoginMsg.msg_login_service#time}.
         * @memberof LoginMsg.msg_login_service
         * @typedef timeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {LoginMsg.time_resp} [response] time_resp
         */

        /**
         * Calls time.
         * @function time
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {LoginMsg.Itime_req} request time_req message or plain object
         * @param {LoginMsg.msg_login_service.timeCallback} callback Node-style callback called with the error, if any, and time_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_login_service.prototype.time = function time(request, callback) {
            return this.rpcCall(time, $root.LoginMsg.time_req, $root.LoginMsg.time_resp, request, callback);
        }, "name", { value: "time" });

        /**
         * Calls time.
         * @function time
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {LoginMsg.Itime_req} request time_req message or plain object
         * @returns {Promise<LoginMsg.time_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link LoginMsg.msg_login_service#login_account}.
         * @memberof LoginMsg.msg_login_service
         * @typedef login_accountCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {LoginMsg.login_resp} [response] login_resp
         */

        /**
         * Calls login_account.
         * @function login_account
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {LoginMsg.Ilogin_account_req} request login_account_req message or plain object
         * @param {LoginMsg.msg_login_service.login_accountCallback} callback Node-style callback called with the error, if any, and login_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_login_service.prototype.login_account = function login_account(request, callback) {
            return this.rpcCall(login_account, $root.LoginMsg.login_account_req, $root.LoginMsg.login_resp, request, callback);
        }, "name", { value: "login_account" });

        /**
         * Calls login_account.
         * @function login_account
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {LoginMsg.Ilogin_account_req} request login_account_req message or plain object
         * @returns {Promise<LoginMsg.login_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link LoginMsg.msg_login_service#kictout}.
         * @memberof LoginMsg.msg_login_service
         * @typedef kictoutCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {LoginMsg.kictout_resp} [response] kictout_resp
         */

        /**
         * Calls kictout.
         * @function kictout
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {LoginMsg.msg_login_service.kictoutCallback} callback Node-style callback called with the error, if any, and kictout_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_login_service.prototype.kictout = function kictout(request, callback) {
            return this.rpcCall(kictout, $root.CommonMsg.undefined, $root.LoginMsg.kictout_resp, request, callback);
        }, "name", { value: "kictout" });

        /**
         * Calls kictout.
         * @function kictout
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<LoginMsg.kictout_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link LoginMsg.msg_login_service#update_token}.
         * @memberof LoginMsg.msg_login_service
         * @typedef update_tokenCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {LoginMsg.update_token_resp} [response] update_token_resp
         */

        /**
         * Calls update_token.
         * @function update_token
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {LoginMsg.msg_login_service.update_tokenCallback} callback Node-style callback called with the error, if any, and update_token_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_login_service.prototype.update_token = function update_token(request, callback) {
            return this.rpcCall(update_token, $root.CommonMsg.undefined, $root.LoginMsg.update_token_resp, request, callback);
        }, "name", { value: "update_token" });

        /**
         * Calls update_token.
         * @function update_token
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<LoginMsg.update_token_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link LoginMsg.msg_login_service#switch_}.
         * @memberof LoginMsg.msg_login_service
         * @typedef switchCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {LoginMsg.switch_resp} [response] switch_resp
         */

        /**
         * Calls switch.
         * @function switch
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {LoginMsg.msg_login_service.switchCallback} callback Node-style callback called with the error, if any, and switch_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_login_service.prototype["switch"] = function switch_(request, callback) {
            return this.rpcCall(switch_, $root.CommonMsg.undefined, $root.LoginMsg.switch_resp, request, callback);
        }, "name", { value: "switch" });

        /**
         * Calls switch.
         * @function switch
         * @memberof LoginMsg.msg_login_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<LoginMsg.switch_resp>} Promise
         * @variation 2
         */

        return msg_login_service;
    })();

    /**
     * login_mode_code enum.
     * @name LoginMsg.login_mode_code
     * @enum {string}
     * @property {number} normal=1 normal value
     * @property {number} reconnect=2 reconnect value
     */
    LoginMsg.login_mode_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "normal"] = 1;
        values[valuesById[2] = "reconnect"] = 2;
        return values;
    })();

    /**
     * login_code enum.
     * @name LoginMsg.login_code
     * @enum {string}
     * @property {number} SUCCESS=1 SUCCESS value
     * @property {number} FAIL=2 FAIL value
     * @property {number} ERR_ACCOUNT=3 ERR_ACCOUNT value
     * @property {number} TOKEN_TIMEOUT=4 TOKEN_TIMEOUT value
     * @property {number} TOKEN_ERROR=5 TOKEN_ERROR value
     * @property {number} OTHER_LOGIN=6 OTHER_LOGIN value
     * @property {number} FORCE_KICTOUT=7 FORCE_KICTOUT value
     * @property {number} MAINTAIN_KICTOUT=8 MAINTAIN_KICTOUT value
     */
    LoginMsg.login_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SUCCESS"] = 1;
        values[valuesById[2] = "FAIL"] = 2;
        values[valuesById[3] = "ERR_ACCOUNT"] = 3;
        values[valuesById[4] = "TOKEN_TIMEOUT"] = 4;
        values[valuesById[5] = "TOKEN_ERROR"] = 5;
        values[valuesById[6] = "OTHER_LOGIN"] = 6;
        values[valuesById[7] = "FORCE_KICTOUT"] = 7;
        values[valuesById[8] = "MAINTAIN_KICTOUT"] = 8;
        return values;
    })();

    LoginMsg.login_req = (function() {

        /**
         * Properties of a login_req.
         * @memberof LoginMsg
         * @interface Ilogin_req
         * @property {LoginMsg.login_mode_code} code login_req code
         * @property {string} token login_req token
         * @property {string} lang login_req lang
         */

        /**
         * Constructs a new login_req.
         * @memberof LoginMsg
         * @classdesc Represents a login_req.
         * @implements Ilogin_req
         * @constructor
         * @param {LoginMsg.Ilogin_req=} [properties] Properties to set
         */
        function login_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * login_req code.
         * @member {LoginMsg.login_mode_code} code
         * @memberof LoginMsg.login_req
         * @instance
         */
        login_req.prototype.code = 1;

        /**
         * login_req token.
         * @member {string} token
         * @memberof LoginMsg.login_req
         * @instance
         */
        login_req.prototype.token = "";

        /**
         * login_req lang.
         * @member {string} lang
         * @memberof LoginMsg.login_req
         * @instance
         */
        login_req.prototype.lang = "";

        /**
         * Creates a new login_req instance using the specified properties.
         * @function create
         * @memberof LoginMsg.login_req
         * @static
         * @param {LoginMsg.Ilogin_req=} [properties] Properties to set
         * @returns {LoginMsg.login_req} login_req instance
         */
        login_req.create = function create(properties) {
            return new login_req(properties);
        };

        /**
         * Encodes the specified login_req message. Does not implicitly {@link LoginMsg.login_req.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.login_req
         * @static
         * @param {LoginMsg.Ilogin_req} message login_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.lang);
            return writer;
        };

        /**
         * Encodes the specified login_req message, length delimited. Does not implicitly {@link LoginMsg.login_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.login_req
         * @static
         * @param {LoginMsg.Ilogin_req} message login_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a login_req message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.login_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.login_req} login_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.login_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                case 3:
                    message.lang = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            if (!message.hasOwnProperty("token"))
                throw $util.ProtocolError("missing required 'token'", { instance: message });
            if (!message.hasOwnProperty("lang"))
                throw $util.ProtocolError("missing required 'lang'", { instance: message });
            return message;
        };

        /**
         * Decodes a login_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.login_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.login_req} login_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a login_req message.
         * @function verify
         * @memberof LoginMsg.login_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        login_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
                break;
            }
            if (!$util.isString(message.token))
                return "token: string expected";
            if (!$util.isString(message.lang))
                return "lang: string expected";
            return null;
        };

        return login_req;
    })();

    LoginMsg.fish_config = (function() {

        /**
         * Properties of a fish_config.
         * @memberof LoginMsg
         * @interface Ifish_config
         * @property {number} fish_type fish_config fish_type
         * @property {number} fish_class fish_config fish_class
         * @property {number} fish_speed fish_config fish_speed
         * @property {number} fish_rate fish_config fish_rate
         * @property {boolean|null} [is_warning] fish_config is_warning
         */

        /**
         * Constructs a new fish_config.
         * @memberof LoginMsg
         * @classdesc Represents a fish_config.
         * @implements Ifish_config
         * @constructor
         * @param {LoginMsg.Ifish_config=} [properties] Properties to set
         */
        function fish_config(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_config fish_type.
         * @member {number} fish_type
         * @memberof LoginMsg.fish_config
         * @instance
         */
        fish_config.prototype.fish_type = 0;

        /**
         * fish_config fish_class.
         * @member {number} fish_class
         * @memberof LoginMsg.fish_config
         * @instance
         */
        fish_config.prototype.fish_class = 0;

        /**
         * fish_config fish_speed.
         * @member {number} fish_speed
         * @memberof LoginMsg.fish_config
         * @instance
         */
        fish_config.prototype.fish_speed = 0;

        /**
         * fish_config fish_rate.
         * @member {number} fish_rate
         * @memberof LoginMsg.fish_config
         * @instance
         */
        fish_config.prototype.fish_rate = 0;

        /**
         * fish_config is_warning.
         * @member {boolean} is_warning
         * @memberof LoginMsg.fish_config
         * @instance
         */
        fish_config.prototype.is_warning = false;

        /**
         * Creates a new fish_config instance using the specified properties.
         * @function create
         * @memberof LoginMsg.fish_config
         * @static
         * @param {LoginMsg.Ifish_config=} [properties] Properties to set
         * @returns {LoginMsg.fish_config} fish_config instance
         */
        fish_config.create = function create(properties) {
            return new fish_config(properties);
        };

        /**
         * Encodes the specified fish_config message. Does not implicitly {@link LoginMsg.fish_config.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.fish_config
         * @static
         * @param {LoginMsg.Ifish_config} message fish_config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_config.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fish_type);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.fish_class);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.fish_speed);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.fish_rate);
            if (message.is_warning != null && message.hasOwnProperty("is_warning"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_warning);
            return writer;
        };

        /**
         * Encodes the specified fish_config message, length delimited. Does not implicitly {@link LoginMsg.fish_config.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.fish_config
         * @static
         * @param {LoginMsg.Ifish_config} message fish_config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_config.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_config message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.fish_config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.fish_config} fish_config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_config.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.fish_config();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fish_type = reader.uint32();
                    break;
                case 2:
                    message.fish_class = reader.uint32();
                    break;
                case 3:
                    message.fish_speed = reader.uint32();
                    break;
                case 4:
                    message.fish_rate = reader.uint32();
                    break;
                case 5:
                    message.is_warning = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fish_type"))
                throw $util.ProtocolError("missing required 'fish_type'", { instance: message });
            if (!message.hasOwnProperty("fish_class"))
                throw $util.ProtocolError("missing required 'fish_class'", { instance: message });
            if (!message.hasOwnProperty("fish_speed"))
                throw $util.ProtocolError("missing required 'fish_speed'", { instance: message });
            if (!message.hasOwnProperty("fish_rate"))
                throw $util.ProtocolError("missing required 'fish_rate'", { instance: message });
            return message;
        };

        /**
         * Decodes a fish_config message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.fish_config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.fish_config} fish_config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_config.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_config message.
         * @function verify
         * @memberof LoginMsg.fish_config
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_config.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fish_type))
                return "fish_type: integer expected";
            if (!$util.isInteger(message.fish_class))
                return "fish_class: integer expected";
            if (!$util.isInteger(message.fish_speed))
                return "fish_speed: integer expected";
            if (!$util.isInteger(message.fish_rate))
                return "fish_rate: integer expected";
            if (message.is_warning != null && message.hasOwnProperty("is_warning"))
                if (typeof message.is_warning !== "boolean")
                    return "is_warning: boolean expected";
            return null;
        };

        return fish_config;
    })();

    LoginMsg.login_resp = (function() {

        /**
         * Properties of a login_resp.
         * @memberof LoginMsg
         * @interface Ilogin_resp
         * @property {LoginMsg.login_code} code login_resp code
         * @property {RoleMsg.Irole_info|null} [role] login_resp role
         * @property {RoleMsg.Irole_reconnect|null} [reconnect] login_resp reconnect
         * @property {Array.<LoginMsg.Ilogin_room_info>|null} [room_info] login_resp room_info
         * @property {Array.<LoginMsg.Ifish_config>|null} [fish_info] login_resp fish_info
         * @property {string|null} [jwt_token] login_resp jwt_token
         * @property {Uint8Array|null} [wave_info] login_resp wave_info
         * @property {string|null} [err_msg] login_resp err_msg
         */

        /**
         * Constructs a new login_resp.
         * @memberof LoginMsg
         * @classdesc Represents a login_resp.
         * @implements Ilogin_resp
         * @constructor
         * @param {LoginMsg.Ilogin_resp=} [properties] Properties to set
         */
        function login_resp(properties) {
            this.room_info = [];
            this.fish_info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * login_resp code.
         * @member {LoginMsg.login_code} code
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.code = 1;

        /**
         * login_resp role.
         * @member {RoleMsg.Irole_info|null|undefined} role
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.role = null;

        /**
         * login_resp reconnect.
         * @member {RoleMsg.Irole_reconnect|null|undefined} reconnect
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.reconnect = null;

        /**
         * login_resp room_info.
         * @member {Array.<LoginMsg.Ilogin_room_info>} room_info
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.room_info = $util.emptyArray;

        /**
         * login_resp fish_info.
         * @member {Array.<LoginMsg.Ifish_config>} fish_info
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.fish_info = $util.emptyArray;

        /**
         * login_resp jwt_token.
         * @member {string} jwt_token
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.jwt_token = "";

        /**
         * login_resp wave_info.
         * @member {Uint8Array} wave_info
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.wave_info = $util.newBuffer([]);

        /**
         * login_resp err_msg.
         * @member {string} err_msg
         * @memberof LoginMsg.login_resp
         * @instance
         */
        login_resp.prototype.err_msg = "";

        /**
         * Creates a new login_resp instance using the specified properties.
         * @function create
         * @memberof LoginMsg.login_resp
         * @static
         * @param {LoginMsg.Ilogin_resp=} [properties] Properties to set
         * @returns {LoginMsg.login_resp} login_resp instance
         */
        login_resp.create = function create(properties) {
            return new login_resp(properties);
        };

        /**
         * Encodes the specified login_resp message. Does not implicitly {@link LoginMsg.login_resp.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.login_resp
         * @static
         * @param {LoginMsg.Ilogin_resp} message login_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.role != null && message.hasOwnProperty("role"))
                $root.RoleMsg.role_info.encode(message.role, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.reconnect != null && message.hasOwnProperty("reconnect"))
                $root.RoleMsg.role_reconnect.encode(message.reconnect, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.room_info != null && message.room_info.length)
                for (var i = 0; i < message.room_info.length; ++i)
                    $root.LoginMsg.login_room_info.encode(message.room_info[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.fish_info != null && message.fish_info.length)
                for (var i = 0; i < message.fish_info.length; ++i)
                    $root.LoginMsg.fish_config.encode(message.fish_info[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.jwt_token != null && message.hasOwnProperty("jwt_token"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.jwt_token);
            if (message.wave_info != null && message.hasOwnProperty("wave_info"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.wave_info);
            if (message.err_msg != null && message.hasOwnProperty("err_msg"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.err_msg);
            return writer;
        };

        /**
         * Encodes the specified login_resp message, length delimited. Does not implicitly {@link LoginMsg.login_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.login_resp
         * @static
         * @param {LoginMsg.Ilogin_resp} message login_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a login_resp message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.login_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.login_resp} login_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.login_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.role = $root.RoleMsg.role_info.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.reconnect = $root.RoleMsg.role_reconnect.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.room_info && message.room_info.length))
                        message.room_info = [];
                    message.room_info.push($root.LoginMsg.login_room_info.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.fish_info && message.fish_info.length))
                        message.fish_info = [];
                    message.fish_info.push($root.LoginMsg.fish_config.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.jwt_token = reader.string();
                    break;
                case 7:
                    message.wave_info = reader.bytes();
                    break;
                case 8:
                    message.err_msg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a login_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.login_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.login_resp} login_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a login_resp message.
         * @function verify
         * @memberof LoginMsg.login_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        login_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            }
            if (message.role != null && message.hasOwnProperty("role")) {
                var error = $root.RoleMsg.role_info.verify(message.role);
                if (error)
                    return "role." + error;
            }
            if (message.reconnect != null && message.hasOwnProperty("reconnect")) {
                var error = $root.RoleMsg.role_reconnect.verify(message.reconnect);
                if (error)
                    return "reconnect." + error;
            }
            if (message.room_info != null && message.hasOwnProperty("room_info")) {
                if (!Array.isArray(message.room_info))
                    return "room_info: array expected";
                for (var i = 0; i < message.room_info.length; ++i) {
                    var error = $root.LoginMsg.login_room_info.verify(message.room_info[i]);
                    if (error)
                        return "room_info." + error;
                }
            }
            if (message.fish_info != null && message.hasOwnProperty("fish_info")) {
                if (!Array.isArray(message.fish_info))
                    return "fish_info: array expected";
                for (var i = 0; i < message.fish_info.length; ++i) {
                    var error = $root.LoginMsg.fish_config.verify(message.fish_info[i]);
                    if (error)
                        return "fish_info." + error;
                }
            }
            if (message.jwt_token != null && message.hasOwnProperty("jwt_token"))
                if (!$util.isString(message.jwt_token))
                    return "jwt_token: string expected";
            if (message.wave_info != null && message.hasOwnProperty("wave_info"))
                if (!(message.wave_info && typeof message.wave_info.length === "number" || $util.isString(message.wave_info)))
                    return "wave_info: buffer expected";
            if (message.err_msg != null && message.hasOwnProperty("err_msg"))
                if (!$util.isString(message.err_msg))
                    return "err_msg: string expected";
            return null;
        };

        return login_resp;
    })();

    LoginMsg.switch_info = (function() {

        /**
         * Properties of a switch_info.
         * @memberof LoginMsg
         * @interface Iswitch_info
         * @property {number} type switch_info type
         * @property {boolean} is_on switch_info is_on
         */

        /**
         * Constructs a new switch_info.
         * @memberof LoginMsg
         * @classdesc Represents a switch_info.
         * @implements Iswitch_info
         * @constructor
         * @param {LoginMsg.Iswitch_info=} [properties] Properties to set
         */
        function switch_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * switch_info type.
         * @member {number} type
         * @memberof LoginMsg.switch_info
         * @instance
         */
        switch_info.prototype.type = 0;

        /**
         * switch_info is_on.
         * @member {boolean} is_on
         * @memberof LoginMsg.switch_info
         * @instance
         */
        switch_info.prototype.is_on = false;

        /**
         * Creates a new switch_info instance using the specified properties.
         * @function create
         * @memberof LoginMsg.switch_info
         * @static
         * @param {LoginMsg.Iswitch_info=} [properties] Properties to set
         * @returns {LoginMsg.switch_info} switch_info instance
         */
        switch_info.create = function create(properties) {
            return new switch_info(properties);
        };

        /**
         * Encodes the specified switch_info message. Does not implicitly {@link LoginMsg.switch_info.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.switch_info
         * @static
         * @param {LoginMsg.Iswitch_info} message switch_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        switch_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_on);
            return writer;
        };

        /**
         * Encodes the specified switch_info message, length delimited. Does not implicitly {@link LoginMsg.switch_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.switch_info
         * @static
         * @param {LoginMsg.Iswitch_info} message switch_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        switch_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a switch_info message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.switch_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.switch_info} switch_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        switch_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.switch_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                case 2:
                    message.is_on = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("is_on"))
                throw $util.ProtocolError("missing required 'is_on'", { instance: message });
            return message;
        };

        /**
         * Decodes a switch_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.switch_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.switch_info} switch_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        switch_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a switch_info message.
         * @function verify
         * @memberof LoginMsg.switch_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        switch_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (typeof message.is_on !== "boolean")
                return "is_on: boolean expected";
            return null;
        };

        return switch_info;
    })();

    LoginMsg.switch_resp = (function() {

        /**
         * Properties of a switch_resp.
         * @memberof LoginMsg
         * @interface Iswitch_resp
         * @property {Array.<LoginMsg.Iswitch_info>|null} ["switch"] switch_resp switch
         */

        /**
         * Constructs a new switch_resp.
         * @memberof LoginMsg
         * @classdesc Represents a switch_resp.
         * @implements Iswitch_resp
         * @constructor
         * @param {LoginMsg.Iswitch_resp=} [properties] Properties to set
         */
        function switch_resp(properties) {
            this["switch"] = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * switch_resp switch.
         * @member {Array.<LoginMsg.Iswitch_info>} switch
         * @memberof LoginMsg.switch_resp
         * @instance
         */
        switch_resp.prototype["switch"] = $util.emptyArray;

        /**
         * Creates a new switch_resp instance using the specified properties.
         * @function create
         * @memberof LoginMsg.switch_resp
         * @static
         * @param {LoginMsg.Iswitch_resp=} [properties] Properties to set
         * @returns {LoginMsg.switch_resp} switch_resp instance
         */
        switch_resp.create = function create(properties) {
            return new switch_resp(properties);
        };

        /**
         * Encodes the specified switch_resp message. Does not implicitly {@link LoginMsg.switch_resp.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.switch_resp
         * @static
         * @param {LoginMsg.Iswitch_resp} message switch_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        switch_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message["switch"] != null && message["switch"].length)
                for (var i = 0; i < message["switch"].length; ++i)
                    $root.LoginMsg.switch_info.encode(message["switch"][i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified switch_resp message, length delimited. Does not implicitly {@link LoginMsg.switch_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.switch_resp
         * @static
         * @param {LoginMsg.Iswitch_resp} message switch_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        switch_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a switch_resp message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.switch_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.switch_resp} switch_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        switch_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.switch_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message["switch"] && message["switch"].length))
                        message["switch"] = [];
                    message["switch"].push($root.LoginMsg.switch_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a switch_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.switch_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.switch_resp} switch_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        switch_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a switch_resp message.
         * @function verify
         * @memberof LoginMsg.switch_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        switch_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["switch"] != null && message.hasOwnProperty("switch")) {
                if (!Array.isArray(message["switch"]))
                    return "switch: array expected";
                for (var i = 0; i < message["switch"].length; ++i) {
                    var error = $root.LoginMsg.switch_info.verify(message["switch"][i]);
                    if (error)
                        return "switch." + error;
                }
            }
            return null;
        };

        return switch_resp;
    })();

    LoginMsg.login_account_req = (function() {

        /**
         * Properties of a login_account_req.
         * @memberof LoginMsg
         * @interface Ilogin_account_req
         * @property {string} account login_account_req account
         * @property {string} token login_account_req token
         * @property {string} lang login_account_req lang
         */

        /**
         * Constructs a new login_account_req.
         * @memberof LoginMsg
         * @classdesc Represents a login_account_req.
         * @implements Ilogin_account_req
         * @constructor
         * @param {LoginMsg.Ilogin_account_req=} [properties] Properties to set
         */
        function login_account_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * login_account_req account.
         * @member {string} account
         * @memberof LoginMsg.login_account_req
         * @instance
         */
        login_account_req.prototype.account = "";

        /**
         * login_account_req token.
         * @member {string} token
         * @memberof LoginMsg.login_account_req
         * @instance
         */
        login_account_req.prototype.token = "";

        /**
         * login_account_req lang.
         * @member {string} lang
         * @memberof LoginMsg.login_account_req
         * @instance
         */
        login_account_req.prototype.lang = "";

        /**
         * Creates a new login_account_req instance using the specified properties.
         * @function create
         * @memberof LoginMsg.login_account_req
         * @static
         * @param {LoginMsg.Ilogin_account_req=} [properties] Properties to set
         * @returns {LoginMsg.login_account_req} login_account_req instance
         */
        login_account_req.create = function create(properties) {
            return new login_account_req(properties);
        };

        /**
         * Encodes the specified login_account_req message. Does not implicitly {@link LoginMsg.login_account_req.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.login_account_req
         * @static
         * @param {LoginMsg.Ilogin_account_req} message login_account_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_account_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.account);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.lang);
            return writer;
        };

        /**
         * Encodes the specified login_account_req message, length delimited. Does not implicitly {@link LoginMsg.login_account_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.login_account_req
         * @static
         * @param {LoginMsg.Ilogin_account_req} message login_account_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_account_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a login_account_req message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.login_account_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.login_account_req} login_account_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_account_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.login_account_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                case 3:
                    message.lang = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("account"))
                throw $util.ProtocolError("missing required 'account'", { instance: message });
            if (!message.hasOwnProperty("token"))
                throw $util.ProtocolError("missing required 'token'", { instance: message });
            if (!message.hasOwnProperty("lang"))
                throw $util.ProtocolError("missing required 'lang'", { instance: message });
            return message;
        };

        /**
         * Decodes a login_account_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.login_account_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.login_account_req} login_account_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_account_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a login_account_req message.
         * @function verify
         * @memberof LoginMsg.login_account_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        login_account_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.account))
                return "account: string expected";
            if (!$util.isString(message.token))
                return "token: string expected";
            if (!$util.isString(message.lang))
                return "lang: string expected";
            return null;
        };

        return login_account_req;
    })();

    LoginMsg.time_req = (function() {

        /**
         * Properties of a time_req.
         * @memberof LoginMsg
         * @interface Itime_req
         */

        /**
         * Constructs a new time_req.
         * @memberof LoginMsg
         * @classdesc Represents a time_req.
         * @implements Itime_req
         * @constructor
         * @param {LoginMsg.Itime_req=} [properties] Properties to set
         */
        function time_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new time_req instance using the specified properties.
         * @function create
         * @memberof LoginMsg.time_req
         * @static
         * @param {LoginMsg.Itime_req=} [properties] Properties to set
         * @returns {LoginMsg.time_req} time_req instance
         */
        time_req.create = function create(properties) {
            return new time_req(properties);
        };

        /**
         * Encodes the specified time_req message. Does not implicitly {@link LoginMsg.time_req.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.time_req
         * @static
         * @param {LoginMsg.Itime_req} message time_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        time_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified time_req message, length delimited. Does not implicitly {@link LoginMsg.time_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.time_req
         * @static
         * @param {LoginMsg.Itime_req} message time_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        time_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a time_req message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.time_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.time_req} time_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        time_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.time_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a time_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.time_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.time_req} time_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        time_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a time_req message.
         * @function verify
         * @memberof LoginMsg.time_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        time_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return time_req;
    })();

    LoginMsg.time_resp = (function() {

        /**
         * Properties of a time_resp.
         * @memberof LoginMsg
         * @interface Itime_resp
         * @property {number|Long} time time_resp time
         */

        /**
         * Constructs a new time_resp.
         * @memberof LoginMsg
         * @classdesc Represents a time_resp.
         * @implements Itime_resp
         * @constructor
         * @param {LoginMsg.Itime_resp=} [properties] Properties to set
         */
        function time_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * time_resp time.
         * @member {number|Long} time
         * @memberof LoginMsg.time_resp
         * @instance
         */
        time_resp.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new time_resp instance using the specified properties.
         * @function create
         * @memberof LoginMsg.time_resp
         * @static
         * @param {LoginMsg.Itime_resp=} [properties] Properties to set
         * @returns {LoginMsg.time_resp} time_resp instance
         */
        time_resp.create = function create(properties) {
            return new time_resp(properties);
        };

        /**
         * Encodes the specified time_resp message. Does not implicitly {@link LoginMsg.time_resp.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.time_resp
         * @static
         * @param {LoginMsg.Itime_resp} message time_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        time_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.time);
            return writer;
        };

        /**
         * Encodes the specified time_resp message, length delimited. Does not implicitly {@link LoginMsg.time_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.time_resp
         * @static
         * @param {LoginMsg.Itime_resp} message time_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        time_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a time_resp message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.time_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.time_resp} time_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        time_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.time_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            return message;
        };

        /**
         * Decodes a time_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.time_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.time_resp} time_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        time_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a time_resp message.
         * @function verify
         * @memberof LoginMsg.time_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        time_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
            return null;
        };

        return time_resp;
    })();

    LoginMsg.kictout_resp = (function() {

        /**
         * Properties of a kictout_resp.
         * @memberof LoginMsg
         * @interface Ikictout_resp
         * @property {LoginMsg.login_code} code kictout_resp code
         * @property {string|null} [err_msg] kictout_resp err_msg
         */

        /**
         * Constructs a new kictout_resp.
         * @memberof LoginMsg
         * @classdesc Represents a kictout_resp.
         * @implements Ikictout_resp
         * @constructor
         * @param {LoginMsg.Ikictout_resp=} [properties] Properties to set
         */
        function kictout_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * kictout_resp code.
         * @member {LoginMsg.login_code} code
         * @memberof LoginMsg.kictout_resp
         * @instance
         */
        kictout_resp.prototype.code = 1;

        /**
         * kictout_resp err_msg.
         * @member {string} err_msg
         * @memberof LoginMsg.kictout_resp
         * @instance
         */
        kictout_resp.prototype.err_msg = "";

        /**
         * Creates a new kictout_resp instance using the specified properties.
         * @function create
         * @memberof LoginMsg.kictout_resp
         * @static
         * @param {LoginMsg.Ikictout_resp=} [properties] Properties to set
         * @returns {LoginMsg.kictout_resp} kictout_resp instance
         */
        kictout_resp.create = function create(properties) {
            return new kictout_resp(properties);
        };

        /**
         * Encodes the specified kictout_resp message. Does not implicitly {@link LoginMsg.kictout_resp.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.kictout_resp
         * @static
         * @param {LoginMsg.Ikictout_resp} message kictout_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kictout_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.err_msg != null && message.hasOwnProperty("err_msg"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.err_msg);
            return writer;
        };

        /**
         * Encodes the specified kictout_resp message, length delimited. Does not implicitly {@link LoginMsg.kictout_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.kictout_resp
         * @static
         * @param {LoginMsg.Ikictout_resp} message kictout_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kictout_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a kictout_resp message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.kictout_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.kictout_resp} kictout_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        kictout_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.kictout_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.err_msg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a kictout_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.kictout_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.kictout_resp} kictout_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        kictout_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a kictout_resp message.
         * @function verify
         * @memberof LoginMsg.kictout_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        kictout_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                break;
            }
            if (message.err_msg != null && message.hasOwnProperty("err_msg"))
                if (!$util.isString(message.err_msg))
                    return "err_msg: string expected";
            return null;
        };

        return kictout_resp;
    })();

    LoginMsg.login_room_info = (function() {

        /**
         * Properties of a login_room_info.
         * @memberof LoginMsg
         * @interface Ilogin_room_info
         * @property {number} room_type login_room_info room_type
         * @property {number} ante login_room_info ante
         * @property {number|Long} lowest login_room_info lowest
         * @property {Array.<number>|null} [battery] login_room_info battery
         */

        /**
         * Constructs a new login_room_info.
         * @memberof LoginMsg
         * @classdesc Represents a login_room_info.
         * @implements Ilogin_room_info
         * @constructor
         * @param {LoginMsg.Ilogin_room_info=} [properties] Properties to set
         */
        function login_room_info(properties) {
            this.battery = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * login_room_info room_type.
         * @member {number} room_type
         * @memberof LoginMsg.login_room_info
         * @instance
         */
        login_room_info.prototype.room_type = 0;

        /**
         * login_room_info ante.
         * @member {number} ante
         * @memberof LoginMsg.login_room_info
         * @instance
         */
        login_room_info.prototype.ante = 0;

        /**
         * login_room_info lowest.
         * @member {number|Long} lowest
         * @memberof LoginMsg.login_room_info
         * @instance
         */
        login_room_info.prototype.lowest = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * login_room_info battery.
         * @member {Array.<number>} battery
         * @memberof LoginMsg.login_room_info
         * @instance
         */
        login_room_info.prototype.battery = $util.emptyArray;

        /**
         * Creates a new login_room_info instance using the specified properties.
         * @function create
         * @memberof LoginMsg.login_room_info
         * @static
         * @param {LoginMsg.Ilogin_room_info=} [properties] Properties to set
         * @returns {LoginMsg.login_room_info} login_room_info instance
         */
        login_room_info.create = function create(properties) {
            return new login_room_info(properties);
        };

        /**
         * Encodes the specified login_room_info message. Does not implicitly {@link LoginMsg.login_room_info.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.login_room_info
         * @static
         * @param {LoginMsg.Ilogin_room_info} message login_room_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_room_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.room_type);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ante);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.lowest);
            if (message.battery != null && message.battery.length)
                for (var i = 0; i < message.battery.length; ++i)
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.battery[i]);
            return writer;
        };

        /**
         * Encodes the specified login_room_info message, length delimited. Does not implicitly {@link LoginMsg.login_room_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.login_room_info
         * @static
         * @param {LoginMsg.Ilogin_room_info} message login_room_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login_room_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a login_room_info message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.login_room_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.login_room_info} login_room_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_room_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.login_room_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.room_type = reader.uint32();
                    break;
                case 2:
                    message.ante = reader.uint32();
                    break;
                case 3:
                    message.lowest = reader.uint64();
                    break;
                case 4:
                    if (!(message.battery && message.battery.length))
                        message.battery = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.battery.push(reader.uint32());
                    } else
                        message.battery.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("room_type"))
                throw $util.ProtocolError("missing required 'room_type'", { instance: message });
            if (!message.hasOwnProperty("ante"))
                throw $util.ProtocolError("missing required 'ante'", { instance: message });
            if (!message.hasOwnProperty("lowest"))
                throw $util.ProtocolError("missing required 'lowest'", { instance: message });
            return message;
        };

        /**
         * Decodes a login_room_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.login_room_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.login_room_info} login_room_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login_room_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a login_room_info message.
         * @function verify
         * @memberof LoginMsg.login_room_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        login_room_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.room_type))
                return "room_type: integer expected";
            if (!$util.isInteger(message.ante))
                return "ante: integer expected";
            if (!$util.isInteger(message.lowest) && !(message.lowest && $util.isInteger(message.lowest.low) && $util.isInteger(message.lowest.high)))
                return "lowest: integer|Long expected";
            if (message.battery != null && message.hasOwnProperty("battery")) {
                if (!Array.isArray(message.battery))
                    return "battery: array expected";
                for (var i = 0; i < message.battery.length; ++i)
                    if (!$util.isInteger(message.battery[i]))
                        return "battery: integer[] expected";
            }
            return null;
        };

        return login_room_info;
    })();

    LoginMsg.update_token_resp = (function() {

        /**
         * Properties of an update_token_resp.
         * @memberof LoginMsg
         * @interface Iupdate_token_resp
         * @property {string|null} [jwt_token] update_token_resp jwt_token
         */

        /**
         * Constructs a new update_token_resp.
         * @memberof LoginMsg
         * @classdesc Represents an update_token_resp.
         * @implements Iupdate_token_resp
         * @constructor
         * @param {LoginMsg.Iupdate_token_resp=} [properties] Properties to set
         */
        function update_token_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * update_token_resp jwt_token.
         * @member {string} jwt_token
         * @memberof LoginMsg.update_token_resp
         * @instance
         */
        update_token_resp.prototype.jwt_token = "";

        /**
         * Creates a new update_token_resp instance using the specified properties.
         * @function create
         * @memberof LoginMsg.update_token_resp
         * @static
         * @param {LoginMsg.Iupdate_token_resp=} [properties] Properties to set
         * @returns {LoginMsg.update_token_resp} update_token_resp instance
         */
        update_token_resp.create = function create(properties) {
            return new update_token_resp(properties);
        };

        /**
         * Encodes the specified update_token_resp message. Does not implicitly {@link LoginMsg.update_token_resp.verify|verify} messages.
         * @function encode
         * @memberof LoginMsg.update_token_resp
         * @static
         * @param {LoginMsg.Iupdate_token_resp} message update_token_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_token_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.jwt_token != null && message.hasOwnProperty("jwt_token"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.jwt_token);
            return writer;
        };

        /**
         * Encodes the specified update_token_resp message, length delimited. Does not implicitly {@link LoginMsg.update_token_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof LoginMsg.update_token_resp
         * @static
         * @param {LoginMsg.Iupdate_token_resp} message update_token_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_token_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an update_token_resp message from the specified reader or buffer.
         * @function decode
         * @memberof LoginMsg.update_token_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {LoginMsg.update_token_resp} update_token_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_token_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LoginMsg.update_token_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.jwt_token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an update_token_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof LoginMsg.update_token_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {LoginMsg.update_token_resp} update_token_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_token_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an update_token_resp message.
         * @function verify
         * @memberof LoginMsg.update_token_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        update_token_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.jwt_token != null && message.hasOwnProperty("jwt_token"))
                if (!$util.isString(message.jwt_token))
                    return "jwt_token: string expected";
            return null;
        };

        return update_token_resp;
    })();

    return LoginMsg;
})();

$root.MailMsg = (function() {

    /**
     * Namespace MailMsg.
     * @exports MailMsg
     * @namespace
     */
    var MailMsg = {};

    /**
     * c_cmd enum.
     * @name MailMsg.c_cmd
     * @enum {string}
     * @property {number} mail_resp=1 mail_resp value
     */
    MailMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "mail_resp"] = 1;
        return values;
    })();

    MailMsg.msg_mail_service = (function() {

        /**
         * Constructs a new msg_mail_service service.
         * @memberof MailMsg
         * @classdesc Represents a msg_mail_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_mail_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_mail_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_mail_service;

        /**
         * Creates new msg_mail_service service using the specified rpc implementation.
         * @function create
         * @memberof MailMsg.msg_mail_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_mail_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_mail_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link MailMsg.msg_mail_service#mail}.
         * @memberof MailMsg.msg_mail_service
         * @typedef mailCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {MailMsg.mail_resp} [response] mail_resp
         */

        /**
         * Calls mail.
         * @function mail
         * @memberof MailMsg.msg_mail_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {MailMsg.msg_mail_service.mailCallback} callback Node-style callback called with the error, if any, and mail_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_mail_service.prototype.mail = function mail(request, callback) {
            return this.rpcCall(mail, $root.CommonMsg.undefined, $root.MailMsg.mail_resp, request, callback);
        }, "name", { value: "mail" });

        /**
         * Calls mail.
         * @function mail
         * @memberof MailMsg.msg_mail_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<MailMsg.mail_resp>} Promise
         * @variation 2
         */

        return msg_mail_service;
    })();

    MailMsg.mail_resp = (function() {

        /**
         * Properties of a mail_resp.
         * @memberof MailMsg
         * @interface Imail_resp
         * @property {string} title mail_resp title
         * @property {string} text mail_resp text
         * @property {number|Long} chips mail_resp chips
         */

        /**
         * Constructs a new mail_resp.
         * @memberof MailMsg
         * @classdesc Represents a mail_resp.
         * @implements Imail_resp
         * @constructor
         * @param {MailMsg.Imail_resp=} [properties] Properties to set
         */
        function mail_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * mail_resp title.
         * @member {string} title
         * @memberof MailMsg.mail_resp
         * @instance
         */
        mail_resp.prototype.title = "";

        /**
         * mail_resp text.
         * @member {string} text
         * @memberof MailMsg.mail_resp
         * @instance
         */
        mail_resp.prototype.text = "";

        /**
         * mail_resp chips.
         * @member {number|Long} chips
         * @memberof MailMsg.mail_resp
         * @instance
         */
        mail_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new mail_resp instance using the specified properties.
         * @function create
         * @memberof MailMsg.mail_resp
         * @static
         * @param {MailMsg.Imail_resp=} [properties] Properties to set
         * @returns {MailMsg.mail_resp} mail_resp instance
         */
        mail_resp.create = function create(properties) {
            return new mail_resp(properties);
        };

        /**
         * Encodes the specified mail_resp message. Does not implicitly {@link MailMsg.mail_resp.verify|verify} messages.
         * @function encode
         * @memberof MailMsg.mail_resp
         * @static
         * @param {MailMsg.Imail_resp} message mail_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        mail_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chips);
            return writer;
        };

        /**
         * Encodes the specified mail_resp message, length delimited. Does not implicitly {@link MailMsg.mail_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MailMsg.mail_resp
         * @static
         * @param {MailMsg.Imail_resp} message mail_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        mail_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a mail_resp message from the specified reader or buffer.
         * @function decode
         * @memberof MailMsg.mail_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {MailMsg.mail_resp} mail_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        mail_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MailMsg.mail_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                case 3:
                    message.chips = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("title"))
                throw $util.ProtocolError("missing required 'title'", { instance: message });
            if (!message.hasOwnProperty("text"))
                throw $util.ProtocolError("missing required 'text'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a mail_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof MailMsg.mail_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {MailMsg.mail_resp} mail_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        mail_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a mail_resp message.
         * @function verify
         * @memberof MailMsg.mail_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        mail_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.title))
                return "title: string expected";
            if (!$util.isString(message.text))
                return "text: string expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            return null;
        };

        return mail_resp;
    })();

    return MailMsg;
})();

$root.PoolMsg = (function() {

    /**
     * Namespace PoolMsg.
     * @exports PoolMsg
     * @namespace
     */
    var PoolMsg = {};

    /**
     * c_cmd enum.
     * @name PoolMsg.c_cmd
     * @enum {string}
     * @property {number} bcast_jp_resp=1 bcast_jp_resp value
     * @property {number} amount_jp_resp=2 amount_jp_resp value
     */
    PoolMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "bcast_jp_resp"] = 1;
        values[valuesById[2] = "amount_jp_resp"] = 2;
        return values;
    })();

    PoolMsg.msg_pool_service = (function() {

        /**
         * Constructs a new msg_pool_service service.
         * @memberof PoolMsg
         * @classdesc Represents a msg_pool_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_pool_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_pool_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_pool_service;

        /**
         * Creates new msg_pool_service service using the specified rpc implementation.
         * @function create
         * @memberof PoolMsg.msg_pool_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_pool_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_pool_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link PoolMsg.msg_pool_service#broadcast_jp_req}.
         * @memberof PoolMsg.msg_pool_service
         * @typedef broadcast_jp_reqCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {PoolMsg.bcast_jp_resp} [response] bcast_jp_resp
         */

        /**
         * Calls broadcast_jp_req.
         * @function broadcast_jp_req
         * @memberof PoolMsg.msg_pool_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {PoolMsg.msg_pool_service.broadcast_jp_reqCallback} callback Node-style callback called with the error, if any, and bcast_jp_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_pool_service.prototype.broadcast_jp_req = function broadcast_jp_req(request, callback) {
            return this.rpcCall(broadcast_jp_req, $root.CommonMsg.undefined, $root.PoolMsg.bcast_jp_resp, request, callback);
        }, "name", { value: "broadcast_jp_req" });

        /**
         * Calls broadcast_jp_req.
         * @function broadcast_jp_req
         * @memberof PoolMsg.msg_pool_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<PoolMsg.bcast_jp_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link PoolMsg.msg_pool_service#amount_jp_req}.
         * @memberof PoolMsg.msg_pool_service
         * @typedef amount_jp_reqCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {PoolMsg.amount_jp_resp} [response] amount_jp_resp
         */

        /**
         * Calls amount_jp_req.
         * @function amount_jp_req
         * @memberof PoolMsg.msg_pool_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {PoolMsg.msg_pool_service.amount_jp_reqCallback} callback Node-style callback called with the error, if any, and amount_jp_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_pool_service.prototype.amount_jp_req = function amount_jp_req(request, callback) {
            return this.rpcCall(amount_jp_req, $root.CommonMsg.undefined, $root.PoolMsg.amount_jp_resp, request, callback);
        }, "name", { value: "amount_jp_req" });

        /**
         * Calls amount_jp_req.
         * @function amount_jp_req
         * @memberof PoolMsg.msg_pool_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<PoolMsg.amount_jp_resp>} Promise
         * @variation 2
         */

        return msg_pool_service;
    })();

    PoolMsg.amount_jp_resp = (function() {

        /**
         * Properties of an amount_jp_resp.
         * @memberof PoolMsg
         * @interface Iamount_jp_resp
         * @property {number|Long} amount amount_jp_resp amount
         */

        /**
         * Constructs a new amount_jp_resp.
         * @memberof PoolMsg
         * @classdesc Represents an amount_jp_resp.
         * @implements Iamount_jp_resp
         * @constructor
         * @param {PoolMsg.Iamount_jp_resp=} [properties] Properties to set
         */
        function amount_jp_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * amount_jp_resp amount.
         * @member {number|Long} amount
         * @memberof PoolMsg.amount_jp_resp
         * @instance
         */
        amount_jp_resp.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new amount_jp_resp instance using the specified properties.
         * @function create
         * @memberof PoolMsg.amount_jp_resp
         * @static
         * @param {PoolMsg.Iamount_jp_resp=} [properties] Properties to set
         * @returns {PoolMsg.amount_jp_resp} amount_jp_resp instance
         */
        amount_jp_resp.create = function create(properties) {
            return new amount_jp_resp(properties);
        };

        /**
         * Encodes the specified amount_jp_resp message. Does not implicitly {@link PoolMsg.amount_jp_resp.verify|verify} messages.
         * @function encode
         * @memberof PoolMsg.amount_jp_resp
         * @static
         * @param {PoolMsg.Iamount_jp_resp} message amount_jp_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        amount_jp_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.amount);
            return writer;
        };

        /**
         * Encodes the specified amount_jp_resp message, length delimited. Does not implicitly {@link PoolMsg.amount_jp_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PoolMsg.amount_jp_resp
         * @static
         * @param {PoolMsg.Iamount_jp_resp} message amount_jp_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        amount_jp_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an amount_jp_resp message from the specified reader or buffer.
         * @function decode
         * @memberof PoolMsg.amount_jp_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PoolMsg.amount_jp_resp} amount_jp_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        amount_jp_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PoolMsg.amount_jp_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.amount = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("amount"))
                throw $util.ProtocolError("missing required 'amount'", { instance: message });
            return message;
        };

        /**
         * Decodes an amount_jp_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PoolMsg.amount_jp_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PoolMsg.amount_jp_resp} amount_jp_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        amount_jp_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an amount_jp_resp message.
         * @function verify
         * @memberof PoolMsg.amount_jp_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        amount_jp_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                return "amount: integer|Long expected";
            return null;
        };

        return amount_jp_resp;
    })();

    PoolMsg.bcast_jp_resp = (function() {

        /**
         * Properties of a bcast_jp_resp.
         * @memberof PoolMsg
         * @interface Ibcast_jp_resp
         * @property {number|Long} uid bcast_jp_resp uid
         * @property {number|Long} score bcast_jp_resp score
         * @property {number} score_level bcast_jp_resp score_level
         * @property {CommonMsg.Idmsg} content bcast_jp_resp content
         * @property {number|Long} amount bcast_jp_resp amount
         */

        /**
         * Constructs a new bcast_jp_resp.
         * @memberof PoolMsg
         * @classdesc Represents a bcast_jp_resp.
         * @implements Ibcast_jp_resp
         * @constructor
         * @param {PoolMsg.Ibcast_jp_resp=} [properties] Properties to set
         */
        function bcast_jp_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bcast_jp_resp uid.
         * @member {number|Long} uid
         * @memberof PoolMsg.bcast_jp_resp
         * @instance
         */
        bcast_jp_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bcast_jp_resp score.
         * @member {number|Long} score
         * @memberof PoolMsg.bcast_jp_resp
         * @instance
         */
        bcast_jp_resp.prototype.score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bcast_jp_resp score_level.
         * @member {number} score_level
         * @memberof PoolMsg.bcast_jp_resp
         * @instance
         */
        bcast_jp_resp.prototype.score_level = 0;

        /**
         * bcast_jp_resp content.
         * @member {CommonMsg.Idmsg} content
         * @memberof PoolMsg.bcast_jp_resp
         * @instance
         */
        bcast_jp_resp.prototype.content = null;

        /**
         * bcast_jp_resp amount.
         * @member {number|Long} amount
         * @memberof PoolMsg.bcast_jp_resp
         * @instance
         */
        bcast_jp_resp.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new bcast_jp_resp instance using the specified properties.
         * @function create
         * @memberof PoolMsg.bcast_jp_resp
         * @static
         * @param {PoolMsg.Ibcast_jp_resp=} [properties] Properties to set
         * @returns {PoolMsg.bcast_jp_resp} bcast_jp_resp instance
         */
        bcast_jp_resp.create = function create(properties) {
            return new bcast_jp_resp(properties);
        };

        /**
         * Encodes the specified bcast_jp_resp message. Does not implicitly {@link PoolMsg.bcast_jp_resp.verify|verify} messages.
         * @function encode
         * @memberof PoolMsg.bcast_jp_resp
         * @static
         * @param {PoolMsg.Ibcast_jp_resp} message bcast_jp_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_jp_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.score);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.score_level);
            $root.CommonMsg.dmsg.encode(message.content, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.amount);
            return writer;
        };

        /**
         * Encodes the specified bcast_jp_resp message, length delimited. Does not implicitly {@link PoolMsg.bcast_jp_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PoolMsg.bcast_jp_resp
         * @static
         * @param {PoolMsg.Ibcast_jp_resp} message bcast_jp_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bcast_jp_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bcast_jp_resp message from the specified reader or buffer.
         * @function decode
         * @memberof PoolMsg.bcast_jp_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PoolMsg.bcast_jp_resp} bcast_jp_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_jp_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PoolMsg.bcast_jp_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.score = reader.uint64();
                    break;
                case 3:
                    message.score_level = reader.uint32();
                    break;
                case 4:
                    message.content = $root.CommonMsg.dmsg.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.amount = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("score_level"))
                throw $util.ProtocolError("missing required 'score_level'", { instance: message });
            if (!message.hasOwnProperty("content"))
                throw $util.ProtocolError("missing required 'content'", { instance: message });
            if (!message.hasOwnProperty("amount"))
                throw $util.ProtocolError("missing required 'amount'", { instance: message });
            return message;
        };

        /**
         * Decodes a bcast_jp_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PoolMsg.bcast_jp_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PoolMsg.bcast_jp_resp} bcast_jp_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bcast_jp_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bcast_jp_resp message.
         * @function verify
         * @memberof PoolMsg.bcast_jp_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bcast_jp_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (!$util.isInteger(message.score_level))
                return "score_level: integer expected";
            {
                var error = $root.CommonMsg.dmsg.verify(message.content);
                if (error)
                    return "content." + error;
            }
            if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                return "amount: integer|Long expected";
            return null;
        };

        return bcast_jp_resp;
    })();

    return PoolMsg;
})();

$root.RankMsg = (function() {

    /**
     * Namespace RankMsg.
     * @exports RankMsg
     * @namespace
     */
    var RankMsg = {};

    /**
     * c_cmd enum.
     * @name RankMsg.c_cmd
     * @enum {string}
     * @property {number} rank_req=0 rank_req value
     * @property {number} rank_total_req=1 rank_total_req value
     * @property {number} rank_resp=2 rank_resp value
     */
    RankMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "rank_req"] = 0;
        values[valuesById[1] = "rank_total_req"] = 1;
        values[valuesById[2] = "rank_resp"] = 2;
        return values;
    })();

    /**
     * rank_type enum.
     * @name RankMsg.rank_type
     * @enum {string}
     * @property {number} rank_last_week=1 rank_last_week value
     * @property {number} rank_this_week=2 rank_this_week value
     * @property {number} rank_act=3 rank_act value
     */
    RankMsg.rank_type = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "rank_last_week"] = 1;
        values[valuesById[2] = "rank_this_week"] = 2;
        values[valuesById[3] = "rank_act"] = 3;
        return values;
    })();

    RankMsg.msg_rank_service = (function() {

        /**
         * Constructs a new msg_rank_service service.
         * @memberof RankMsg
         * @classdesc Represents a msg_rank_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_rank_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_rank_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_rank_service;

        /**
         * Creates new msg_rank_service service using the specified rpc implementation.
         * @function create
         * @memberof RankMsg.msg_rank_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_rank_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_rank_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link RankMsg.msg_rank_service#rank}.
         * @memberof RankMsg.msg_rank_service
         * @typedef rankCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RankMsg.rank_resp} [response] rank_resp
         */

        /**
         * Calls rank.
         * @function rank
         * @memberof RankMsg.msg_rank_service
         * @instance
         * @param {RankMsg.Irank_req} request rank_req message or plain object
         * @param {RankMsg.msg_rank_service.rankCallback} callback Node-style callback called with the error, if any, and rank_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_rank_service.prototype.rank = function rank(request, callback) {
            return this.rpcCall(rank, $root.RankMsg.rank_req, $root.RankMsg.rank_resp, request, callback);
        }, "name", { value: "rank" });

        /**
         * Calls rank.
         * @function rank
         * @memberof RankMsg.msg_rank_service
         * @instance
         * @param {RankMsg.Irank_req} request rank_req message or plain object
         * @returns {Promise<RankMsg.rank_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RankMsg.msg_rank_service#rank_total}.
         * @memberof RankMsg.msg_rank_service
         * @typedef rank_totalCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RankMsg.rank_resp} [response] rank_resp
         */

        /**
         * Calls rank_total.
         * @function rank_total
         * @memberof RankMsg.msg_rank_service
         * @instance
         * @param {RankMsg.Irank_total_req} request rank_total_req message or plain object
         * @param {RankMsg.msg_rank_service.rank_totalCallback} callback Node-style callback called with the error, if any, and rank_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_rank_service.prototype.rank_total = function rank_total(request, callback) {
            return this.rpcCall(rank_total, $root.RankMsg.rank_total_req, $root.RankMsg.rank_resp, request, callback);
        }, "name", { value: "rank_total" });

        /**
         * Calls rank_total.
         * @function rank_total
         * @memberof RankMsg.msg_rank_service
         * @instance
         * @param {RankMsg.Irank_total_req} request rank_total_req message or plain object
         * @returns {Promise<RankMsg.rank_resp>} Promise
         * @variation 2
         */

        return msg_rank_service;
    })();

    RankMsg.rank_info = (function() {

        /**
         * Properties of a rank_info.
         * @memberof RankMsg
         * @interface Irank_info
         * @property {string} nickname rank_info nickname
         * @property {number|Long} score rank_info score
         * @property {number|Long|null} [chips] rank_info chips
         * @property {number|null} [rank] rank_info rank
         */

        /**
         * Constructs a new rank_info.
         * @memberof RankMsg
         * @classdesc Represents a rank_info.
         * @implements Irank_info
         * @constructor
         * @param {RankMsg.Irank_info=} [properties] Properties to set
         */
        function rank_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * rank_info nickname.
         * @member {string} nickname
         * @memberof RankMsg.rank_info
         * @instance
         */
        rank_info.prototype.nickname = "";

        /**
         * rank_info score.
         * @member {number|Long} score
         * @memberof RankMsg.rank_info
         * @instance
         */
        rank_info.prototype.score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * rank_info chips.
         * @member {number|Long} chips
         * @memberof RankMsg.rank_info
         * @instance
         */
        rank_info.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * rank_info rank.
         * @member {number} rank
         * @memberof RankMsg.rank_info
         * @instance
         */
        rank_info.prototype.rank = 0;

        /**
         * Creates a new rank_info instance using the specified properties.
         * @function create
         * @memberof RankMsg.rank_info
         * @static
         * @param {RankMsg.Irank_info=} [properties] Properties to set
         * @returns {RankMsg.rank_info} rank_info instance
         */
        rank_info.create = function create(properties) {
            return new rank_info(properties);
        };

        /**
         * Encodes the specified rank_info message. Does not implicitly {@link RankMsg.rank_info.verify|verify} messages.
         * @function encode
         * @memberof RankMsg.rank_info
         * @static
         * @param {RankMsg.Irank_info} message rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nickname);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.score);
            if (message.chips != null && message.hasOwnProperty("chips"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.chips);
            if (message.rank != null && message.hasOwnProperty("rank"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rank);
            return writer;
        };

        /**
         * Encodes the specified rank_info message, length delimited. Does not implicitly {@link RankMsg.rank_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RankMsg.rank_info
         * @static
         * @param {RankMsg.Irank_info} message rank_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a rank_info message from the specified reader or buffer.
         * @function decode
         * @memberof RankMsg.rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RankMsg.rank_info} rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankMsg.rank_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.nickname = reader.string();
                    break;
                case 2:
                    message.score = reader.uint64();
                    break;
                case 3:
                    message.chips = reader.uint64();
                    break;
                case 4:
                    message.rank = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            return message;
        };

        /**
         * Decodes a rank_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RankMsg.rank_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RankMsg.rank_info} rank_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a rank_info message.
         * @function verify
         * @memberof RankMsg.rank_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        rank_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (message.chips != null && message.hasOwnProperty("chips"))
                if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                    return "chips: integer|Long expected";
            if (message.rank != null && message.hasOwnProperty("rank"))
                if (!$util.isInteger(message.rank))
                    return "rank: integer expected";
            return null;
        };

        return rank_info;
    })();

    /**
     * act_rank_type enum.
     * @name RankMsg.act_rank_type
     * @enum {string}
     * @property {number} main_list=1 main_list value
     * @property {number} daily_list=2 daily_list value
     * @property {number} race_list=3 race_list value
     */
    RankMsg.act_rank_type = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "main_list"] = 1;
        values[valuesById[2] = "daily_list"] = 2;
        values[valuesById[3] = "race_list"] = 3;
        return values;
    })();

    RankMsg.act_id = (function() {

        /**
         * Properties of an act_id.
         * @memberof RankMsg
         * @interface Iact_id
         * @property {number|Long} act_uid act_id act_uid
         * @property {RankMsg.act_rank_type} type act_id type
         * @property {number|Long|null} [act_race_uid] act_id act_race_uid
         */

        /**
         * Constructs a new act_id.
         * @memberof RankMsg
         * @classdesc Represents an act_id.
         * @implements Iact_id
         * @constructor
         * @param {RankMsg.Iact_id=} [properties] Properties to set
         */
        function act_id(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_id act_uid.
         * @member {number|Long} act_uid
         * @memberof RankMsg.act_id
         * @instance
         */
        act_id.prototype.act_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * act_id type.
         * @member {RankMsg.act_rank_type} type
         * @memberof RankMsg.act_id
         * @instance
         */
        act_id.prototype.type = 1;

        /**
         * act_id act_race_uid.
         * @member {number|Long} act_race_uid
         * @memberof RankMsg.act_id
         * @instance
         */
        act_id.prototype.act_race_uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new act_id instance using the specified properties.
         * @function create
         * @memberof RankMsg.act_id
         * @static
         * @param {RankMsg.Iact_id=} [properties] Properties to set
         * @returns {RankMsg.act_id} act_id instance
         */
        act_id.create = function create(properties) {
            return new act_id(properties);
        };

        /**
         * Encodes the specified act_id message. Does not implicitly {@link RankMsg.act_id.verify|verify} messages.
         * @function encode
         * @memberof RankMsg.act_id
         * @static
         * @param {RankMsg.Iact_id} message act_id message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_id.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.act_uid);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.act_race_uid != null && message.hasOwnProperty("act_race_uid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.act_race_uid);
            return writer;
        };

        /**
         * Encodes the specified act_id message, length delimited. Does not implicitly {@link RankMsg.act_id.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RankMsg.act_id
         * @static
         * @param {RankMsg.Iact_id} message act_id message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_id.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_id message from the specified reader or buffer.
         * @function decode
         * @memberof RankMsg.act_id
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RankMsg.act_id} act_id
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_id.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankMsg.act_id();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.act_uid = reader.uint64();
                    break;
                case 2:
                    message.type = reader.int32();
                    break;
                case 3:
                    message.act_race_uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("act_uid"))
                throw $util.ProtocolError("missing required 'act_uid'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            return message;
        };

        /**
         * Decodes an act_id message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RankMsg.act_id
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RankMsg.act_id} act_id
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_id.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_id message.
         * @function verify
         * @memberof RankMsg.act_id
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_id.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.act_uid) && !(message.act_uid && $util.isInteger(message.act_uid.low) && $util.isInteger(message.act_uid.high)))
                return "act_uid: integer|Long expected";
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
            if (message.act_race_uid != null && message.hasOwnProperty("act_race_uid"))
                if (!$util.isInteger(message.act_race_uid) && !(message.act_race_uid && $util.isInteger(message.act_race_uid.low) && $util.isInteger(message.act_race_uid.high)))
                    return "act_race_uid: integer|Long expected";
            return null;
        };

        return act_id;
    })();

    RankMsg.rank_req = (function() {

        /**
         * Properties of a rank_req.
         * @memberof RankMsg
         * @interface Irank_req
         * @property {number} index rank_req index
         * @property {RankMsg.rank_type} type rank_req type
         * @property {RankMsg.Iact_id|null} [uid] rank_req uid
         */

        /**
         * Constructs a new rank_req.
         * @memberof RankMsg
         * @classdesc Represents a rank_req.
         * @implements Irank_req
         * @constructor
         * @param {RankMsg.Irank_req=} [properties] Properties to set
         */
        function rank_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * rank_req index.
         * @member {number} index
         * @memberof RankMsg.rank_req
         * @instance
         */
        rank_req.prototype.index = 0;

        /**
         * rank_req type.
         * @member {RankMsg.rank_type} type
         * @memberof RankMsg.rank_req
         * @instance
         */
        rank_req.prototype.type = 1;

        /**
         * rank_req uid.
         * @member {RankMsg.Iact_id|null|undefined} uid
         * @memberof RankMsg.rank_req
         * @instance
         */
        rank_req.prototype.uid = null;

        /**
         * Creates a new rank_req instance using the specified properties.
         * @function create
         * @memberof RankMsg.rank_req
         * @static
         * @param {RankMsg.Irank_req=} [properties] Properties to set
         * @returns {RankMsg.rank_req} rank_req instance
         */
        rank_req.create = function create(properties) {
            return new rank_req(properties);
        };

        /**
         * Encodes the specified rank_req message. Does not implicitly {@link RankMsg.rank_req.verify|verify} messages.
         * @function encode
         * @memberof RankMsg.rank_req
         * @static
         * @param {RankMsg.Irank_req} message rank_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
            if (message.uid != null && message.hasOwnProperty("uid"))
                $root.RankMsg.act_id.encode(message.uid, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified rank_req message, length delimited. Does not implicitly {@link RankMsg.rank_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RankMsg.rank_req
         * @static
         * @param {RankMsg.Irank_req} message rank_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a rank_req message from the specified reader or buffer.
         * @function decode
         * @memberof RankMsg.rank_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RankMsg.rank_req} rank_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankMsg.rank_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.uint32();
                    break;
                case 2:
                    message.type = reader.int32();
                    break;
                case 3:
                    message.uid = $root.RankMsg.act_id.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("index"))
                throw $util.ProtocolError("missing required 'index'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            return message;
        };

        /**
         * Decodes a rank_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RankMsg.rank_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RankMsg.rank_req} rank_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a rank_req message.
         * @function verify
         * @memberof RankMsg.rank_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        rank_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.index))
                return "index: integer expected";
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
            if (message.uid != null && message.hasOwnProperty("uid")) {
                var error = $root.RankMsg.act_id.verify(message.uid);
                if (error)
                    return "uid." + error;
            }
            return null;
        };

        return rank_req;
    })();

    RankMsg.rank_total_req = (function() {

        /**
         * Properties of a rank_total_req.
         * @memberof RankMsg
         * @interface Irank_total_req
         * @property {RankMsg.rank_type} type rank_total_req type
         * @property {RankMsg.Iact_id|null} [uid] rank_total_req uid
         */

        /**
         * Constructs a new rank_total_req.
         * @memberof RankMsg
         * @classdesc Represents a rank_total_req.
         * @implements Irank_total_req
         * @constructor
         * @param {RankMsg.Irank_total_req=} [properties] Properties to set
         */
        function rank_total_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * rank_total_req type.
         * @member {RankMsg.rank_type} type
         * @memberof RankMsg.rank_total_req
         * @instance
         */
        rank_total_req.prototype.type = 1;

        /**
         * rank_total_req uid.
         * @member {RankMsg.Iact_id|null|undefined} uid
         * @memberof RankMsg.rank_total_req
         * @instance
         */
        rank_total_req.prototype.uid = null;

        /**
         * Creates a new rank_total_req instance using the specified properties.
         * @function create
         * @memberof RankMsg.rank_total_req
         * @static
         * @param {RankMsg.Irank_total_req=} [properties] Properties to set
         * @returns {RankMsg.rank_total_req} rank_total_req instance
         */
        rank_total_req.create = function create(properties) {
            return new rank_total_req(properties);
        };

        /**
         * Encodes the specified rank_total_req message. Does not implicitly {@link RankMsg.rank_total_req.verify|verify} messages.
         * @function encode
         * @memberof RankMsg.rank_total_req
         * @static
         * @param {RankMsg.Irank_total_req} message rank_total_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_total_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.uid != null && message.hasOwnProperty("uid"))
                $root.RankMsg.act_id.encode(message.uid, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified rank_total_req message, length delimited. Does not implicitly {@link RankMsg.rank_total_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RankMsg.rank_total_req
         * @static
         * @param {RankMsg.Irank_total_req} message rank_total_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_total_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a rank_total_req message from the specified reader or buffer.
         * @function decode
         * @memberof RankMsg.rank_total_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RankMsg.rank_total_req} rank_total_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_total_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankMsg.rank_total_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.uid = $root.RankMsg.act_id.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            return message;
        };

        /**
         * Decodes a rank_total_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RankMsg.rank_total_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RankMsg.rank_total_req} rank_total_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_total_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a rank_total_req message.
         * @function verify
         * @memberof RankMsg.rank_total_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        rank_total_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
            if (message.uid != null && message.hasOwnProperty("uid")) {
                var error = $root.RankMsg.act_id.verify(message.uid);
                if (error)
                    return "uid." + error;
            }
            return null;
        };

        return rank_total_req;
    })();

    RankMsg.rank_resp = (function() {

        /**
         * Properties of a rank_resp.
         * @memberof RankMsg
         * @interface Irank_resp
         * @property {Array.<RankMsg.Irank_info>|null} [role] rank_resp role
         * @property {number} self_rank rank_resp self_rank
         * @property {number|Long|null} [score] rank_resp score
         * @property {number|Long|null} [last_score] rank_resp last_score
         * @property {RankMsg.Iact_role_info|null} [role_act] rank_resp role_act
         */

        /**
         * Constructs a new rank_resp.
         * @memberof RankMsg
         * @classdesc Represents a rank_resp.
         * @implements Irank_resp
         * @constructor
         * @param {RankMsg.Irank_resp=} [properties] Properties to set
         */
        function rank_resp(properties) {
            this.role = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * rank_resp role.
         * @member {Array.<RankMsg.Irank_info>} role
         * @memberof RankMsg.rank_resp
         * @instance
         */
        rank_resp.prototype.role = $util.emptyArray;

        /**
         * rank_resp self_rank.
         * @member {number} self_rank
         * @memberof RankMsg.rank_resp
         * @instance
         */
        rank_resp.prototype.self_rank = 0;

        /**
         * rank_resp score.
         * @member {number|Long} score
         * @memberof RankMsg.rank_resp
         * @instance
         */
        rank_resp.prototype.score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * rank_resp last_score.
         * @member {number|Long} last_score
         * @memberof RankMsg.rank_resp
         * @instance
         */
        rank_resp.prototype.last_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * rank_resp role_act.
         * @member {RankMsg.Iact_role_info|null|undefined} role_act
         * @memberof RankMsg.rank_resp
         * @instance
         */
        rank_resp.prototype.role_act = null;

        /**
         * Creates a new rank_resp instance using the specified properties.
         * @function create
         * @memberof RankMsg.rank_resp
         * @static
         * @param {RankMsg.Irank_resp=} [properties] Properties to set
         * @returns {RankMsg.rank_resp} rank_resp instance
         */
        rank_resp.create = function create(properties) {
            return new rank_resp(properties);
        };

        /**
         * Encodes the specified rank_resp message. Does not implicitly {@link RankMsg.rank_resp.verify|verify} messages.
         * @function encode
         * @memberof RankMsg.rank_resp
         * @static
         * @param {RankMsg.Irank_resp} message rank_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.role != null && message.role.length)
                for (var i = 0; i < message.role.length; ++i)
                    $root.RankMsg.rank_info.encode(message.role[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.self_rank);
            if (message.score != null && message.hasOwnProperty("score"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.score);
            if (message.last_score != null && message.hasOwnProperty("last_score"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.last_score);
            if (message.role_act != null && message.hasOwnProperty("role_act"))
                $root.RankMsg.act_role_info.encode(message.role_act, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified rank_resp message, length delimited. Does not implicitly {@link RankMsg.rank_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RankMsg.rank_resp
         * @static
         * @param {RankMsg.Irank_resp} message rank_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rank_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a rank_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RankMsg.rank_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RankMsg.rank_resp} rank_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankMsg.rank_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.role && message.role.length))
                        message.role = [];
                    message.role.push($root.RankMsg.rank_info.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.self_rank = reader.uint32();
                    break;
                case 3:
                    message.score = reader.uint64();
                    break;
                case 4:
                    message.last_score = reader.uint64();
                    break;
                case 5:
                    message.role_act = $root.RankMsg.act_role_info.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("self_rank"))
                throw $util.ProtocolError("missing required 'self_rank'", { instance: message });
            return message;
        };

        /**
         * Decodes a rank_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RankMsg.rank_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RankMsg.rank_resp} rank_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rank_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a rank_resp message.
         * @function verify
         * @memberof RankMsg.rank_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        rank_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.role != null && message.hasOwnProperty("role")) {
                if (!Array.isArray(message.role))
                    return "role: array expected";
                for (var i = 0; i < message.role.length; ++i) {
                    var error = $root.RankMsg.rank_info.verify(message.role[i]);
                    if (error)
                        return "role." + error;
                }
            }
            if (!$util.isInteger(message.self_rank))
                return "self_rank: integer expected";
            if (message.score != null && message.hasOwnProperty("score"))
                if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                    return "score: integer|Long expected";
            if (message.last_score != null && message.hasOwnProperty("last_score"))
                if (!$util.isInteger(message.last_score) && !(message.last_score && $util.isInteger(message.last_score.low) && $util.isInteger(message.last_score.high)))
                    return "last_score: integer|Long expected";
            if (message.role_act != null && message.hasOwnProperty("role_act")) {
                var error = $root.RankMsg.act_role_info.verify(message.role_act);
                if (error)
                    return "role_act." + error;
            }
            return null;
        };

        return rank_resp;
    })();

    RankMsg.act_role_info = (function() {

        /**
         * Properties of an act_role_info.
         * @memberof RankMsg
         * @interface Iact_role_info
         * @property {number|Long} self_score act_role_info self_score
         * @property {number|Long} self_reward act_role_info self_reward
         */

        /**
         * Constructs a new act_role_info.
         * @memberof RankMsg
         * @classdesc Represents an act_role_info.
         * @implements Iact_role_info
         * @constructor
         * @param {RankMsg.Iact_role_info=} [properties] Properties to set
         */
        function act_role_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * act_role_info self_score.
         * @member {number|Long} self_score
         * @memberof RankMsg.act_role_info
         * @instance
         */
        act_role_info.prototype.self_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * act_role_info self_reward.
         * @member {number|Long} self_reward
         * @memberof RankMsg.act_role_info
         * @instance
         */
        act_role_info.prototype.self_reward = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new act_role_info instance using the specified properties.
         * @function create
         * @memberof RankMsg.act_role_info
         * @static
         * @param {RankMsg.Iact_role_info=} [properties] Properties to set
         * @returns {RankMsg.act_role_info} act_role_info instance
         */
        act_role_info.create = function create(properties) {
            return new act_role_info(properties);
        };

        /**
         * Encodes the specified act_role_info message. Does not implicitly {@link RankMsg.act_role_info.verify|verify} messages.
         * @function encode
         * @memberof RankMsg.act_role_info
         * @static
         * @param {RankMsg.Iact_role_info} message act_role_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_role_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.self_score);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.self_reward);
            return writer;
        };

        /**
         * Encodes the specified act_role_info message, length delimited. Does not implicitly {@link RankMsg.act_role_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RankMsg.act_role_info
         * @static
         * @param {RankMsg.Iact_role_info} message act_role_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        act_role_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an act_role_info message from the specified reader or buffer.
         * @function decode
         * @memberof RankMsg.act_role_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RankMsg.act_role_info} act_role_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_role_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankMsg.act_role_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.self_score = reader.uint64();
                    break;
                case 2:
                    message.self_reward = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("self_score"))
                throw $util.ProtocolError("missing required 'self_score'", { instance: message });
            if (!message.hasOwnProperty("self_reward"))
                throw $util.ProtocolError("missing required 'self_reward'", { instance: message });
            return message;
        };

        /**
         * Decodes an act_role_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RankMsg.act_role_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RankMsg.act_role_info} act_role_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        act_role_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an act_role_info message.
         * @function verify
         * @memberof RankMsg.act_role_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        act_role_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.self_score) && !(message.self_score && $util.isInteger(message.self_score.low) && $util.isInteger(message.self_score.high)))
                return "self_score: integer|Long expected";
            if (!$util.isInteger(message.self_reward) && !(message.self_reward && $util.isInteger(message.self_reward.low) && $util.isInteger(message.self_reward.high)))
                return "self_reward: integer|Long expected";
            return null;
        };

        return act_role_info;
    })();

    return RankMsg;
})();

$root.ReportMsg = (function() {

    /**
     * Namespace ReportMsg.
     * @exports ReportMsg
     * @namespace
     */
    var ReportMsg = {};

    /**
     * c_cmd enum.
     * @name ReportMsg.c_cmd
     * @enum {string}
     * @property {number} detail_report_req=1 detail_report_req value
     * @property {number} detail_report_resp=2 detail_report_resp value
     * @property {number} screen_report_req=3 screen_report_req value
     * @property {number} rotate_canvas_req=4 rotate_canvas_req value
     */
    ReportMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "detail_report_req"] = 1;
        values[valuesById[2] = "detail_report_resp"] = 2;
        values[valuesById[3] = "screen_report_req"] = 3;
        values[valuesById[4] = "rotate_canvas_req"] = 4;
        return values;
    })();

    /**
     * screen_code enum.
     * @name ReportMsg.screen_code
     * @enum {string}
     * @property {number} PC=1 PC value
     * @property {number} IOS_WIDTH=2 IOS_WIDTH value
     * @property {number} IOS_HIGHT=3 IOS_HIGHT value
     * @property {number} AND_WIDTH=4 AND_WIDTH value
     * @property {number} AND_HIGHT=5 AND_HIGHT value
     * @property {number} OTR_WIGHT=6 OTR_WIGHT value
     * @property {number} ORT_HIGHT=7 ORT_HIGHT value
     */
    ReportMsg.screen_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "PC"] = 1;
        values[valuesById[2] = "IOS_WIDTH"] = 2;
        values[valuesById[3] = "IOS_HIGHT"] = 3;
        values[valuesById[4] = "AND_WIDTH"] = 4;
        values[valuesById[5] = "AND_HIGHT"] = 5;
        values[valuesById[6] = "OTR_WIGHT"] = 6;
        values[valuesById[7] = "ORT_HIGHT"] = 7;
        return values;
    })();

    ReportMsg.msg_report_service = (function() {

        /**
         * Constructs a new msg_report_service service.
         * @memberof ReportMsg
         * @classdesc Represents a msg_report_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_report_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_report_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_report_service;

        /**
         * Creates new msg_report_service service using the specified rpc implementation.
         * @function create
         * @memberof ReportMsg.msg_report_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_report_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_report_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link ReportMsg.msg_report_service#report_detail}.
         * @memberof ReportMsg.msg_report_service
         * @typedef report_detailCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {ReportMsg.detail_report_resp} [response] detail_report_resp
         */

        /**
         * Calls report_detail.
         * @function report_detail
         * @memberof ReportMsg.msg_report_service
         * @instance
         * @param {ReportMsg.Idetail_report_req} request detail_report_req message or plain object
         * @param {ReportMsg.msg_report_service.report_detailCallback} callback Node-style callback called with the error, if any, and detail_report_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_report_service.prototype.report_detail = function report_detail(request, callback) {
            return this.rpcCall(report_detail, $root.ReportMsg.detail_report_req, $root.ReportMsg.detail_report_resp, request, callback);
        }, "name", { value: "report_detail" });

        /**
         * Calls report_detail.
         * @function report_detail
         * @memberof ReportMsg.msg_report_service
         * @instance
         * @param {ReportMsg.Idetail_report_req} request detail_report_req message or plain object
         * @returns {Promise<ReportMsg.detail_report_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ReportMsg.msg_report_service#screen_detail}.
         * @memberof ReportMsg.msg_report_service
         * @typedef screen_detailCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls screen_detail.
         * @function screen_detail
         * @memberof ReportMsg.msg_report_service
         * @instance
         * @param {ReportMsg.Iscreen_report_req} request screen_report_req message or plain object
         * @param {ReportMsg.msg_report_service.screen_detailCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_report_service.prototype.screen_detail = function screen_detail(request, callback) {
            return this.rpcCall(screen_detail, $root.ReportMsg.screen_report_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "screen_detail" });

        /**
         * Calls screen_detail.
         * @function screen_detail
         * @memberof ReportMsg.msg_report_service
         * @instance
         * @param {ReportMsg.Iscreen_report_req} request screen_report_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link ReportMsg.msg_report_service#rotate_canvas}.
         * @memberof ReportMsg.msg_report_service
         * @typedef rotate_canvasCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls rotate_canvas.
         * @function rotate_canvas
         * @memberof ReportMsg.msg_report_service
         * @instance
         * @param {ReportMsg.Irotate_canvas_req} request rotate_canvas_req message or plain object
         * @param {ReportMsg.msg_report_service.rotate_canvasCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_report_service.prototype.rotate_canvas = function rotate_canvas(request, callback) {
            return this.rpcCall(rotate_canvas, $root.ReportMsg.rotate_canvas_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "rotate_canvas" });

        /**
         * Calls rotate_canvas.
         * @function rotate_canvas
         * @memberof ReportMsg.msg_report_service
         * @instance
         * @param {ReportMsg.Irotate_canvas_req} request rotate_canvas_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        return msg_report_service;
    })();

    ReportMsg.detail_report_info = (function() {

        /**
         * Properties of a detail_report_info.
         * @memberof ReportMsg
         * @interface Idetail_report_info
         * @property {number|Long} serial_id detail_report_info serial_id
         * @property {number|Long} fish_id detail_report_info fish_id
         * @property {number} bullet_chips detail_report_info bullet_chips
         * @property {number} room_ante detail_report_info room_ante
         * @property {number} fish_type detail_report_info fish_type
         * @property {number} fish_chips detail_report_info fish_chips
         * @property {boolean} is_dead detail_report_info is_dead
         * @property {number} fish_price detail_report_info fish_price
         * @property {number} time detail_report_info time
         */

        /**
         * Constructs a new detail_report_info.
         * @memberof ReportMsg
         * @classdesc Represents a detail_report_info.
         * @implements Idetail_report_info
         * @constructor
         * @param {ReportMsg.Idetail_report_info=} [properties] Properties to set
         */
        function detail_report_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * detail_report_info serial_id.
         * @member {number|Long} serial_id
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.serial_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * detail_report_info fish_id.
         * @member {number|Long} fish_id
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.fish_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * detail_report_info bullet_chips.
         * @member {number} bullet_chips
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.bullet_chips = 0;

        /**
         * detail_report_info room_ante.
         * @member {number} room_ante
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.room_ante = 0;

        /**
         * detail_report_info fish_type.
         * @member {number} fish_type
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.fish_type = 0;

        /**
         * detail_report_info fish_chips.
         * @member {number} fish_chips
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.fish_chips = 0;

        /**
         * detail_report_info is_dead.
         * @member {boolean} is_dead
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.is_dead = false;

        /**
         * detail_report_info fish_price.
         * @member {number} fish_price
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.fish_price = 0;

        /**
         * detail_report_info time.
         * @member {number} time
         * @memberof ReportMsg.detail_report_info
         * @instance
         */
        detail_report_info.prototype.time = 0;

        /**
         * Creates a new detail_report_info instance using the specified properties.
         * @function create
         * @memberof ReportMsg.detail_report_info
         * @static
         * @param {ReportMsg.Idetail_report_info=} [properties] Properties to set
         * @returns {ReportMsg.detail_report_info} detail_report_info instance
         */
        detail_report_info.create = function create(properties) {
            return new detail_report_info(properties);
        };

        /**
         * Encodes the specified detail_report_info message. Does not implicitly {@link ReportMsg.detail_report_info.verify|verify} messages.
         * @function encode
         * @memberof ReportMsg.detail_report_info
         * @static
         * @param {ReportMsg.Idetail_report_info} message detail_report_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        detail_report_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.serial_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fish_id);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bullet_chips);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.room_ante);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.fish_type);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.fish_chips);
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.is_dead);
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.fish_price);
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.time);
            return writer;
        };

        /**
         * Encodes the specified detail_report_info message, length delimited. Does not implicitly {@link ReportMsg.detail_report_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReportMsg.detail_report_info
         * @static
         * @param {ReportMsg.Idetail_report_info} message detail_report_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        detail_report_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a detail_report_info message from the specified reader or buffer.
         * @function decode
         * @memberof ReportMsg.detail_report_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReportMsg.detail_report_info} detail_report_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        detail_report_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportMsg.detail_report_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.serial_id = reader.uint64();
                    break;
                case 2:
                    message.fish_id = reader.uint64();
                    break;
                case 3:
                    message.bullet_chips = reader.uint32();
                    break;
                case 4:
                    message.room_ante = reader.uint32();
                    break;
                case 5:
                    message.fish_type = reader.uint32();
                    break;
                case 6:
                    message.fish_chips = reader.uint32();
                    break;
                case 7:
                    message.is_dead = reader.bool();
                    break;
                case 8:
                    message.fish_price = reader.uint32();
                    break;
                case 9:
                    message.time = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("serial_id"))
                throw $util.ProtocolError("missing required 'serial_id'", { instance: message });
            if (!message.hasOwnProperty("fish_id"))
                throw $util.ProtocolError("missing required 'fish_id'", { instance: message });
            if (!message.hasOwnProperty("bullet_chips"))
                throw $util.ProtocolError("missing required 'bullet_chips'", { instance: message });
            if (!message.hasOwnProperty("room_ante"))
                throw $util.ProtocolError("missing required 'room_ante'", { instance: message });
            if (!message.hasOwnProperty("fish_type"))
                throw $util.ProtocolError("missing required 'fish_type'", { instance: message });
            if (!message.hasOwnProperty("fish_chips"))
                throw $util.ProtocolError("missing required 'fish_chips'", { instance: message });
            if (!message.hasOwnProperty("is_dead"))
                throw $util.ProtocolError("missing required 'is_dead'", { instance: message });
            if (!message.hasOwnProperty("fish_price"))
                throw $util.ProtocolError("missing required 'fish_price'", { instance: message });
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            return message;
        };

        /**
         * Decodes a detail_report_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReportMsg.detail_report_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReportMsg.detail_report_info} detail_report_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        detail_report_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a detail_report_info message.
         * @function verify
         * @memberof ReportMsg.detail_report_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        detail_report_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.serial_id) && !(message.serial_id && $util.isInteger(message.serial_id.low) && $util.isInteger(message.serial_id.high)))
                return "serial_id: integer|Long expected";
            if (!$util.isInteger(message.fish_id) && !(message.fish_id && $util.isInteger(message.fish_id.low) && $util.isInteger(message.fish_id.high)))
                return "fish_id: integer|Long expected";
            if (!$util.isInteger(message.bullet_chips))
                return "bullet_chips: integer expected";
            if (!$util.isInteger(message.room_ante))
                return "room_ante: integer expected";
            if (!$util.isInteger(message.fish_type))
                return "fish_type: integer expected";
            if (!$util.isInteger(message.fish_chips))
                return "fish_chips: integer expected";
            if (typeof message.is_dead !== "boolean")
                return "is_dead: boolean expected";
            if (!$util.isInteger(message.fish_price))
                return "fish_price: integer expected";
            if (!$util.isInteger(message.time))
                return "time: integer expected";
            return null;
        };

        return detail_report_info;
    })();

    ReportMsg.detail_report_req = (function() {

        /**
         * Properties of a detail_report_req.
         * @memberof ReportMsg
         * @interface Idetail_report_req
         * @property {number} page detail_report_req page
         * @property {number} page_num detail_report_req page_num
         */

        /**
         * Constructs a new detail_report_req.
         * @memberof ReportMsg
         * @classdesc Represents a detail_report_req.
         * @implements Idetail_report_req
         * @constructor
         * @param {ReportMsg.Idetail_report_req=} [properties] Properties to set
         */
        function detail_report_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * detail_report_req page.
         * @member {number} page
         * @memberof ReportMsg.detail_report_req
         * @instance
         */
        detail_report_req.prototype.page = 0;

        /**
         * detail_report_req page_num.
         * @member {number} page_num
         * @memberof ReportMsg.detail_report_req
         * @instance
         */
        detail_report_req.prototype.page_num = 0;

        /**
         * Creates a new detail_report_req instance using the specified properties.
         * @function create
         * @memberof ReportMsg.detail_report_req
         * @static
         * @param {ReportMsg.Idetail_report_req=} [properties] Properties to set
         * @returns {ReportMsg.detail_report_req} detail_report_req instance
         */
        detail_report_req.create = function create(properties) {
            return new detail_report_req(properties);
        };

        /**
         * Encodes the specified detail_report_req message. Does not implicitly {@link ReportMsg.detail_report_req.verify|verify} messages.
         * @function encode
         * @memberof ReportMsg.detail_report_req
         * @static
         * @param {ReportMsg.Idetail_report_req} message detail_report_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        detail_report_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.page);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.page_num);
            return writer;
        };

        /**
         * Encodes the specified detail_report_req message, length delimited. Does not implicitly {@link ReportMsg.detail_report_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReportMsg.detail_report_req
         * @static
         * @param {ReportMsg.Idetail_report_req} message detail_report_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        detail_report_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a detail_report_req message from the specified reader or buffer.
         * @function decode
         * @memberof ReportMsg.detail_report_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReportMsg.detail_report_req} detail_report_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        detail_report_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportMsg.detail_report_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.page = reader.uint32();
                    break;
                case 2:
                    message.page_num = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("page"))
                throw $util.ProtocolError("missing required 'page'", { instance: message });
            if (!message.hasOwnProperty("page_num"))
                throw $util.ProtocolError("missing required 'page_num'", { instance: message });
            return message;
        };

        /**
         * Decodes a detail_report_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReportMsg.detail_report_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReportMsg.detail_report_req} detail_report_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        detail_report_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a detail_report_req message.
         * @function verify
         * @memberof ReportMsg.detail_report_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        detail_report_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.page))
                return "page: integer expected";
            if (!$util.isInteger(message.page_num))
                return "page_num: integer expected";
            return null;
        };

        return detail_report_req;
    })();

    ReportMsg.detail_report_resp = (function() {

        /**
         * Properties of a detail_report_resp.
         * @memberof ReportMsg
         * @interface Idetail_report_resp
         * @property {number|Long} total_bullet_chips detail_report_resp total_bullet_chips
         * @property {number|Long} total_fish_chips detail_report_resp total_fish_chips
         * @property {number|Long} total_fish_price detail_report_resp total_fish_price
         * @property {number} total_page detail_report_resp total_page
         * @property {Array.<ReportMsg.Idetail_report_info>|null} [info] detail_report_resp info
         */

        /**
         * Constructs a new detail_report_resp.
         * @memberof ReportMsg
         * @classdesc Represents a detail_report_resp.
         * @implements Idetail_report_resp
         * @constructor
         * @param {ReportMsg.Idetail_report_resp=} [properties] Properties to set
         */
        function detail_report_resp(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * detail_report_resp total_bullet_chips.
         * @member {number|Long} total_bullet_chips
         * @memberof ReportMsg.detail_report_resp
         * @instance
         */
        detail_report_resp.prototype.total_bullet_chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * detail_report_resp total_fish_chips.
         * @member {number|Long} total_fish_chips
         * @memberof ReportMsg.detail_report_resp
         * @instance
         */
        detail_report_resp.prototype.total_fish_chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * detail_report_resp total_fish_price.
         * @member {number|Long} total_fish_price
         * @memberof ReportMsg.detail_report_resp
         * @instance
         */
        detail_report_resp.prototype.total_fish_price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * detail_report_resp total_page.
         * @member {number} total_page
         * @memberof ReportMsg.detail_report_resp
         * @instance
         */
        detail_report_resp.prototype.total_page = 0;

        /**
         * detail_report_resp info.
         * @member {Array.<ReportMsg.Idetail_report_info>} info
         * @memberof ReportMsg.detail_report_resp
         * @instance
         */
        detail_report_resp.prototype.info = $util.emptyArray;

        /**
         * Creates a new detail_report_resp instance using the specified properties.
         * @function create
         * @memberof ReportMsg.detail_report_resp
         * @static
         * @param {ReportMsg.Idetail_report_resp=} [properties] Properties to set
         * @returns {ReportMsg.detail_report_resp} detail_report_resp instance
         */
        detail_report_resp.create = function create(properties) {
            return new detail_report_resp(properties);
        };

        /**
         * Encodes the specified detail_report_resp message. Does not implicitly {@link ReportMsg.detail_report_resp.verify|verify} messages.
         * @function encode
         * @memberof ReportMsg.detail_report_resp
         * @static
         * @param {ReportMsg.Idetail_report_resp} message detail_report_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        detail_report_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.total_bullet_chips);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.total_fish_chips);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.total_fish_price);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.total_page);
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.ReportMsg.detail_report_info.encode(message.info[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified detail_report_resp message, length delimited. Does not implicitly {@link ReportMsg.detail_report_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReportMsg.detail_report_resp
         * @static
         * @param {ReportMsg.Idetail_report_resp} message detail_report_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        detail_report_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a detail_report_resp message from the specified reader or buffer.
         * @function decode
         * @memberof ReportMsg.detail_report_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReportMsg.detail_report_resp} detail_report_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        detail_report_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportMsg.detail_report_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.total_bullet_chips = reader.uint64();
                    break;
                case 2:
                    message.total_fish_chips = reader.uint64();
                    break;
                case 3:
                    message.total_fish_price = reader.uint64();
                    break;
                case 4:
                    message.total_page = reader.uint32();
                    break;
                case 5:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.ReportMsg.detail_report_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("total_bullet_chips"))
                throw $util.ProtocolError("missing required 'total_bullet_chips'", { instance: message });
            if (!message.hasOwnProperty("total_fish_chips"))
                throw $util.ProtocolError("missing required 'total_fish_chips'", { instance: message });
            if (!message.hasOwnProperty("total_fish_price"))
                throw $util.ProtocolError("missing required 'total_fish_price'", { instance: message });
            if (!message.hasOwnProperty("total_page"))
                throw $util.ProtocolError("missing required 'total_page'", { instance: message });
            return message;
        };

        /**
         * Decodes a detail_report_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReportMsg.detail_report_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReportMsg.detail_report_resp} detail_report_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        detail_report_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a detail_report_resp message.
         * @function verify
         * @memberof ReportMsg.detail_report_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        detail_report_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.total_bullet_chips) && !(message.total_bullet_chips && $util.isInteger(message.total_bullet_chips.low) && $util.isInteger(message.total_bullet_chips.high)))
                return "total_bullet_chips: integer|Long expected";
            if (!$util.isInteger(message.total_fish_chips) && !(message.total_fish_chips && $util.isInteger(message.total_fish_chips.low) && $util.isInteger(message.total_fish_chips.high)))
                return "total_fish_chips: integer|Long expected";
            if (!$util.isInteger(message.total_fish_price) && !(message.total_fish_price && $util.isInteger(message.total_fish_price.low) && $util.isInteger(message.total_fish_price.high)))
                return "total_fish_price: integer|Long expected";
            if (!$util.isInteger(message.total_page))
                return "total_page: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.ReportMsg.detail_report_info.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            return null;
        };

        return detail_report_resp;
    })();

    ReportMsg.screen_report_req = (function() {

        /**
         * Properties of a screen_report_req.
         * @memberof ReportMsg
         * @interface Iscreen_report_req
         * @property {ReportMsg.screen_code} srceen screen_report_req srceen
         */

        /**
         * Constructs a new screen_report_req.
         * @memberof ReportMsg
         * @classdesc Represents a screen_report_req.
         * @implements Iscreen_report_req
         * @constructor
         * @param {ReportMsg.Iscreen_report_req=} [properties] Properties to set
         */
        function screen_report_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * screen_report_req srceen.
         * @member {ReportMsg.screen_code} srceen
         * @memberof ReportMsg.screen_report_req
         * @instance
         */
        screen_report_req.prototype.srceen = 1;

        /**
         * Creates a new screen_report_req instance using the specified properties.
         * @function create
         * @memberof ReportMsg.screen_report_req
         * @static
         * @param {ReportMsg.Iscreen_report_req=} [properties] Properties to set
         * @returns {ReportMsg.screen_report_req} screen_report_req instance
         */
        screen_report_req.create = function create(properties) {
            return new screen_report_req(properties);
        };

        /**
         * Encodes the specified screen_report_req message. Does not implicitly {@link ReportMsg.screen_report_req.verify|verify} messages.
         * @function encode
         * @memberof ReportMsg.screen_report_req
         * @static
         * @param {ReportMsg.Iscreen_report_req} message screen_report_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        screen_report_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.srceen);
            return writer;
        };

        /**
         * Encodes the specified screen_report_req message, length delimited. Does not implicitly {@link ReportMsg.screen_report_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReportMsg.screen_report_req
         * @static
         * @param {ReportMsg.Iscreen_report_req} message screen_report_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        screen_report_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a screen_report_req message from the specified reader or buffer.
         * @function decode
         * @memberof ReportMsg.screen_report_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReportMsg.screen_report_req} screen_report_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        screen_report_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportMsg.screen_report_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.srceen = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("srceen"))
                throw $util.ProtocolError("missing required 'srceen'", { instance: message });
            return message;
        };

        /**
         * Decodes a screen_report_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReportMsg.screen_report_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReportMsg.screen_report_req} screen_report_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        screen_report_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a screen_report_req message.
         * @function verify
         * @memberof ReportMsg.screen_report_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        screen_report_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.srceen) {
            default:
                return "srceen: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
            return null;
        };

        return screen_report_req;
    })();

    ReportMsg.rotate_canvas_req = (function() {

        /**
         * Properties of a rotate_canvas_req.
         * @memberof ReportMsg
         * @interface Irotate_canvas_req
         * @property {number} mark rotate_canvas_req mark
         */

        /**
         * Constructs a new rotate_canvas_req.
         * @memberof ReportMsg
         * @classdesc Represents a rotate_canvas_req.
         * @implements Irotate_canvas_req
         * @constructor
         * @param {ReportMsg.Irotate_canvas_req=} [properties] Properties to set
         */
        function rotate_canvas_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * rotate_canvas_req mark.
         * @member {number} mark
         * @memberof ReportMsg.rotate_canvas_req
         * @instance
         */
        rotate_canvas_req.prototype.mark = 0;

        /**
         * Creates a new rotate_canvas_req instance using the specified properties.
         * @function create
         * @memberof ReportMsg.rotate_canvas_req
         * @static
         * @param {ReportMsg.Irotate_canvas_req=} [properties] Properties to set
         * @returns {ReportMsg.rotate_canvas_req} rotate_canvas_req instance
         */
        rotate_canvas_req.create = function create(properties) {
            return new rotate_canvas_req(properties);
        };

        /**
         * Encodes the specified rotate_canvas_req message. Does not implicitly {@link ReportMsg.rotate_canvas_req.verify|verify} messages.
         * @function encode
         * @memberof ReportMsg.rotate_canvas_req
         * @static
         * @param {ReportMsg.Irotate_canvas_req} message rotate_canvas_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rotate_canvas_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mark);
            return writer;
        };

        /**
         * Encodes the specified rotate_canvas_req message, length delimited. Does not implicitly {@link ReportMsg.rotate_canvas_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReportMsg.rotate_canvas_req
         * @static
         * @param {ReportMsg.Irotate_canvas_req} message rotate_canvas_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rotate_canvas_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a rotate_canvas_req message from the specified reader or buffer.
         * @function decode
         * @memberof ReportMsg.rotate_canvas_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReportMsg.rotate_canvas_req} rotate_canvas_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rotate_canvas_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportMsg.rotate_canvas_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mark = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("mark"))
                throw $util.ProtocolError("missing required 'mark'", { instance: message });
            return message;
        };

        /**
         * Decodes a rotate_canvas_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReportMsg.rotate_canvas_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReportMsg.rotate_canvas_req} rotate_canvas_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rotate_canvas_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a rotate_canvas_req message.
         * @function verify
         * @memberof ReportMsg.rotate_canvas_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        rotate_canvas_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.mark))
                return "mark: integer expected";
            return null;
        };

        return rotate_canvas_req;
    })();

    return ReportMsg;
})();

$root.RoleInfoMsg = (function() {

    /**
     * Namespace RoleInfoMsg.
     * @exports RoleInfoMsg
     * @namespace
     */
    var RoleInfoMsg = {};

    /**
     * c_cmd enum.
     * @name RoleInfoMsg.c_cmd
     * @enum {string}
     * @property {number} lv_info_req=0 lv_info_req value
     * @property {number} lv_info_resp=1 lv_info_resp value
     * @property {number} lv_config_req=3 lv_config_req value
     * @property {number} lv_config_resp=4 lv_config_resp value
     * @property {number} lv_notice_resp=5 lv_notice_resp value
     */
    RoleInfoMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "lv_info_req"] = 0;
        values[valuesById[1] = "lv_info_resp"] = 1;
        values[valuesById[3] = "lv_config_req"] = 3;
        values[valuesById[4] = "lv_config_resp"] = 4;
        values[valuesById[5] = "lv_notice_resp"] = 5;
        return values;
    })();

    RoleInfoMsg.msg_role_info_service = (function() {

        /**
         * Constructs a new msg_role_info_service service.
         * @memberof RoleInfoMsg
         * @classdesc Represents a msg_role_info_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_role_info_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_role_info_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_role_info_service;

        /**
         * Creates new msg_role_info_service service using the specified rpc implementation.
         * @function create
         * @memberof RoleInfoMsg.msg_role_info_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_role_info_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_role_info_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link RoleInfoMsg.msg_role_info_service#lv_info}.
         * @memberof RoleInfoMsg.msg_role_info_service
         * @typedef lv_infoCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoleInfoMsg.lv_info_resp} [response] lv_info_resp
         */

        /**
         * Calls lv_info.
         * @function lv_info
         * @memberof RoleInfoMsg.msg_role_info_service
         * @instance
         * @param {RoleInfoMsg.Ilv_info_req} request lv_info_req message or plain object
         * @param {RoleInfoMsg.msg_role_info_service.lv_infoCallback} callback Node-style callback called with the error, if any, and lv_info_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_role_info_service.prototype.lv_info = function lv_info(request, callback) {
            return this.rpcCall(lv_info, $root.RoleInfoMsg.lv_info_req, $root.RoleInfoMsg.lv_info_resp, request, callback);
        }, "name", { value: "lv_info" });

        /**
         * Calls lv_info.
         * @function lv_info
         * @memberof RoleInfoMsg.msg_role_info_service
         * @instance
         * @param {RoleInfoMsg.Ilv_info_req} request lv_info_req message or plain object
         * @returns {Promise<RoleInfoMsg.lv_info_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoleInfoMsg.msg_role_info_service#lv_configs}.
         * @memberof RoleInfoMsg.msg_role_info_service
         * @typedef lv_configsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoleInfoMsg.lv_config_resp} [response] lv_config_resp
         */

        /**
         * Calls lv_configs.
         * @function lv_configs
         * @memberof RoleInfoMsg.msg_role_info_service
         * @instance
         * @param {RoleInfoMsg.Ilv_config_req} request lv_config_req message or plain object
         * @param {RoleInfoMsg.msg_role_info_service.lv_configsCallback} callback Node-style callback called with the error, if any, and lv_config_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_role_info_service.prototype.lv_configs = function lv_configs(request, callback) {
            return this.rpcCall(lv_configs, $root.RoleInfoMsg.lv_config_req, $root.RoleInfoMsg.lv_config_resp, request, callback);
        }, "name", { value: "lv_configs" });

        /**
         * Calls lv_configs.
         * @function lv_configs
         * @memberof RoleInfoMsg.msg_role_info_service
         * @instance
         * @param {RoleInfoMsg.Ilv_config_req} request lv_config_req message or plain object
         * @returns {Promise<RoleInfoMsg.lv_config_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoleInfoMsg.msg_role_info_service#lv_notice}.
         * @memberof RoleInfoMsg.msg_role_info_service
         * @typedef lv_noticeCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoleInfoMsg.lv_notice_resp} [response] lv_notice_resp
         */

        /**
         * Calls lv_notice.
         * @function lv_notice
         * @memberof RoleInfoMsg.msg_role_info_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoleInfoMsg.msg_role_info_service.lv_noticeCallback} callback Node-style callback called with the error, if any, and lv_notice_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_role_info_service.prototype.lv_notice = function lv_notice(request, callback) {
            return this.rpcCall(lv_notice, $root.CommonMsg.undefined, $root.RoleInfoMsg.lv_notice_resp, request, callback);
        }, "name", { value: "lv_notice" });

        /**
         * Calls lv_notice.
         * @function lv_notice
         * @memberof RoleInfoMsg.msg_role_info_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoleInfoMsg.lv_notice_resp>} Promise
         * @variation 2
         */

        return msg_role_info_service;
    })();

    /**
     * info_op_code enum.
     * @name RoleInfoMsg.info_op_code
     * @enum {string}
     * @property {number} success=0 success value
     * @property {number} fail=1 fail value
     * @property {number} out_of_cash=2 out_of_cash value
     * @property {number} same_nick=3 same_nick value
     */
    RoleInfoMsg.info_op_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "success"] = 0;
        values[valuesById[1] = "fail"] = 1;
        values[valuesById[2] = "out_of_cash"] = 2;
        values[valuesById[3] = "same_nick"] = 3;
        return values;
    })();

    RoleInfoMsg.lv_info_req = (function() {

        /**
         * Properties of a lv_info_req.
         * @memberof RoleInfoMsg
         * @interface Ilv_info_req
         */

        /**
         * Constructs a new lv_info_req.
         * @memberof RoleInfoMsg
         * @classdesc Represents a lv_info_req.
         * @implements Ilv_info_req
         * @constructor
         * @param {RoleInfoMsg.Ilv_info_req=} [properties] Properties to set
         */
        function lv_info_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new lv_info_req instance using the specified properties.
         * @function create
         * @memberof RoleInfoMsg.lv_info_req
         * @static
         * @param {RoleInfoMsg.Ilv_info_req=} [properties] Properties to set
         * @returns {RoleInfoMsg.lv_info_req} lv_info_req instance
         */
        lv_info_req.create = function create(properties) {
            return new lv_info_req(properties);
        };

        /**
         * Encodes the specified lv_info_req message. Does not implicitly {@link RoleInfoMsg.lv_info_req.verify|verify} messages.
         * @function encode
         * @memberof RoleInfoMsg.lv_info_req
         * @static
         * @param {RoleInfoMsg.Ilv_info_req} message lv_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_info_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified lv_info_req message, length delimited. Does not implicitly {@link RoleInfoMsg.lv_info_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleInfoMsg.lv_info_req
         * @static
         * @param {RoleInfoMsg.Ilv_info_req} message lv_info_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_info_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_info_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoleInfoMsg.lv_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleInfoMsg.lv_info_req} lv_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_info_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleInfoMsg.lv_info_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a lv_info_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleInfoMsg.lv_info_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleInfoMsg.lv_info_req} lv_info_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_info_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_info_req message.
         * @function verify
         * @memberof RoleInfoMsg.lv_info_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_info_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return lv_info_req;
    })();

    RoleInfoMsg.lv_info_resp = (function() {

        /**
         * Properties of a lv_info_resp.
         * @memberof RoleInfoMsg
         * @interface Ilv_info_resp
         * @property {number} lv lv_info_resp lv
         * @property {number|Long} exp lv_info_resp exp
         * @property {number|Long} need_exp lv_info_resp need_exp
         * @property {number} reward_lv lv_info_resp reward_lv
         * @property {number|Long} next_reward lv_info_resp next_reward
         * @property {number|Long} total_reward lv_info_resp total_reward
         * @property {number} fund_id lv_info_resp fund_id
         * @property {number} next_reward_lv lv_info_resp next_reward_lv
         * @property {number|Long} reward lv_info_resp reward
         * @property {number|Long|null} [total_exp] lv_info_resp total_exp
         */

        /**
         * Constructs a new lv_info_resp.
         * @memberof RoleInfoMsg
         * @classdesc Represents a lv_info_resp.
         * @implements Ilv_info_resp
         * @constructor
         * @param {RoleInfoMsg.Ilv_info_resp=} [properties] Properties to set
         */
        function lv_info_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_info_resp lv.
         * @member {number} lv
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.lv = 0;

        /**
         * lv_info_resp exp.
         * @member {number|Long} exp
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_info_resp need_exp.
         * @member {number|Long} need_exp
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.need_exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_info_resp reward_lv.
         * @member {number} reward_lv
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.reward_lv = 0;

        /**
         * lv_info_resp next_reward.
         * @member {number|Long} next_reward
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.next_reward = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_info_resp total_reward.
         * @member {number|Long} total_reward
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.total_reward = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_info_resp fund_id.
         * @member {number} fund_id
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.fund_id = 0;

        /**
         * lv_info_resp next_reward_lv.
         * @member {number} next_reward_lv
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.next_reward_lv = 0;

        /**
         * lv_info_resp reward.
         * @member {number|Long} reward
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.reward = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_info_resp total_exp.
         * @member {number|Long} total_exp
         * @memberof RoleInfoMsg.lv_info_resp
         * @instance
         */
        lv_info_resp.prototype.total_exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new lv_info_resp instance using the specified properties.
         * @function create
         * @memberof RoleInfoMsg.lv_info_resp
         * @static
         * @param {RoleInfoMsg.Ilv_info_resp=} [properties] Properties to set
         * @returns {RoleInfoMsg.lv_info_resp} lv_info_resp instance
         */
        lv_info_resp.create = function create(properties) {
            return new lv_info_resp(properties);
        };

        /**
         * Encodes the specified lv_info_resp message. Does not implicitly {@link RoleInfoMsg.lv_info_resp.verify|verify} messages.
         * @function encode
         * @memberof RoleInfoMsg.lv_info_resp
         * @static
         * @param {RoleInfoMsg.Ilv_info_resp} message lv_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_info_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.lv);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.exp);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.need_exp);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.reward_lv);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.next_reward);
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.total_reward);
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.fund_id);
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.next_reward_lv);
            writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.reward);
            if (message.total_exp != null && message.hasOwnProperty("total_exp"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.total_exp);
            return writer;
        };

        /**
         * Encodes the specified lv_info_resp message, length delimited. Does not implicitly {@link RoleInfoMsg.lv_info_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleInfoMsg.lv_info_resp
         * @static
         * @param {RoleInfoMsg.Ilv_info_resp} message lv_info_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_info_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_info_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoleInfoMsg.lv_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleInfoMsg.lv_info_resp} lv_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_info_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleInfoMsg.lv_info_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lv = reader.uint32();
                    break;
                case 2:
                    message.exp = reader.uint64();
                    break;
                case 3:
                    message.need_exp = reader.uint64();
                    break;
                case 4:
                    message.reward_lv = reader.uint32();
                    break;
                case 5:
                    message.next_reward = reader.uint64();
                    break;
                case 6:
                    message.total_reward = reader.uint64();
                    break;
                case 7:
                    message.fund_id = reader.uint32();
                    break;
                case 8:
                    message.next_reward_lv = reader.uint32();
                    break;
                case 9:
                    message.reward = reader.uint64();
                    break;
                case 10:
                    message.total_exp = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("lv"))
                throw $util.ProtocolError("missing required 'lv'", { instance: message });
            if (!message.hasOwnProperty("exp"))
                throw $util.ProtocolError("missing required 'exp'", { instance: message });
            if (!message.hasOwnProperty("need_exp"))
                throw $util.ProtocolError("missing required 'need_exp'", { instance: message });
            if (!message.hasOwnProperty("reward_lv"))
                throw $util.ProtocolError("missing required 'reward_lv'", { instance: message });
            if (!message.hasOwnProperty("next_reward"))
                throw $util.ProtocolError("missing required 'next_reward'", { instance: message });
            if (!message.hasOwnProperty("total_reward"))
                throw $util.ProtocolError("missing required 'total_reward'", { instance: message });
            if (!message.hasOwnProperty("fund_id"))
                throw $util.ProtocolError("missing required 'fund_id'", { instance: message });
            if (!message.hasOwnProperty("next_reward_lv"))
                throw $util.ProtocolError("missing required 'next_reward_lv'", { instance: message });
            if (!message.hasOwnProperty("reward"))
                throw $util.ProtocolError("missing required 'reward'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_info_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleInfoMsg.lv_info_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleInfoMsg.lv_info_resp} lv_info_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_info_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_info_resp message.
         * @function verify
         * @memberof RoleInfoMsg.lv_info_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_info_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.lv))
                return "lv: integer expected";
            if (!$util.isInteger(message.exp) && !(message.exp && $util.isInteger(message.exp.low) && $util.isInteger(message.exp.high)))
                return "exp: integer|Long expected";
            if (!$util.isInteger(message.need_exp) && !(message.need_exp && $util.isInteger(message.need_exp.low) && $util.isInteger(message.need_exp.high)))
                return "need_exp: integer|Long expected";
            if (!$util.isInteger(message.reward_lv))
                return "reward_lv: integer expected";
            if (!$util.isInteger(message.next_reward) && !(message.next_reward && $util.isInteger(message.next_reward.low) && $util.isInteger(message.next_reward.high)))
                return "next_reward: integer|Long expected";
            if (!$util.isInteger(message.total_reward) && !(message.total_reward && $util.isInteger(message.total_reward.low) && $util.isInteger(message.total_reward.high)))
                return "total_reward: integer|Long expected";
            if (!$util.isInteger(message.fund_id))
                return "fund_id: integer expected";
            if (!$util.isInteger(message.next_reward_lv))
                return "next_reward_lv: integer expected";
            if (!$util.isInteger(message.reward) && !(message.reward && $util.isInteger(message.reward.low) && $util.isInteger(message.reward.high)))
                return "reward: integer|Long expected";
            if (message.total_exp != null && message.hasOwnProperty("total_exp"))
                if (!$util.isInteger(message.total_exp) && !(message.total_exp && $util.isInteger(message.total_exp.low) && $util.isInteger(message.total_exp.high)))
                    return "total_exp: integer|Long expected";
            return null;
        };

        return lv_info_resp;
    })();

    RoleInfoMsg.lv_config_req = (function() {

        /**
         * Properties of a lv_config_req.
         * @memberof RoleInfoMsg
         * @interface Ilv_config_req
         * @property {number} fund_id lv_config_req fund_id
         */

        /**
         * Constructs a new lv_config_req.
         * @memberof RoleInfoMsg
         * @classdesc Represents a lv_config_req.
         * @implements Ilv_config_req
         * @constructor
         * @param {RoleInfoMsg.Ilv_config_req=} [properties] Properties to set
         */
        function lv_config_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_config_req fund_id.
         * @member {number} fund_id
         * @memberof RoleInfoMsg.lv_config_req
         * @instance
         */
        lv_config_req.prototype.fund_id = 0;

        /**
         * Creates a new lv_config_req instance using the specified properties.
         * @function create
         * @memberof RoleInfoMsg.lv_config_req
         * @static
         * @param {RoleInfoMsg.Ilv_config_req=} [properties] Properties to set
         * @returns {RoleInfoMsg.lv_config_req} lv_config_req instance
         */
        lv_config_req.create = function create(properties) {
            return new lv_config_req(properties);
        };

        /**
         * Encodes the specified lv_config_req message. Does not implicitly {@link RoleInfoMsg.lv_config_req.verify|verify} messages.
         * @function encode
         * @memberof RoleInfoMsg.lv_config_req
         * @static
         * @param {RoleInfoMsg.Ilv_config_req} message lv_config_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_config_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fund_id);
            return writer;
        };

        /**
         * Encodes the specified lv_config_req message, length delimited. Does not implicitly {@link RoleInfoMsg.lv_config_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleInfoMsg.lv_config_req
         * @static
         * @param {RoleInfoMsg.Ilv_config_req} message lv_config_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_config_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_config_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoleInfoMsg.lv_config_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleInfoMsg.lv_config_req} lv_config_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_config_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleInfoMsg.lv_config_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fund_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fund_id"))
                throw $util.ProtocolError("missing required 'fund_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_config_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleInfoMsg.lv_config_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleInfoMsg.lv_config_req} lv_config_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_config_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_config_req message.
         * @function verify
         * @memberof RoleInfoMsg.lv_config_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_config_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fund_id))
                return "fund_id: integer expected";
            return null;
        };

        return lv_config_req;
    })();

    RoleInfoMsg.lv_config_resp = (function() {

        /**
         * Properties of a lv_config_resp.
         * @memberof RoleInfoMsg
         * @interface Ilv_config_resp
         * @property {number} buy_mark lv_config_resp buy_mark
         * @property {number|Long} price lv_config_resp price
         * @property {Array.<RoleInfoMsg.Ilv_config>|null} [configs] lv_config_resp configs
         * @property {number|null} [fund_id] lv_config_resp fund_id
         */

        /**
         * Constructs a new lv_config_resp.
         * @memberof RoleInfoMsg
         * @classdesc Represents a lv_config_resp.
         * @implements Ilv_config_resp
         * @constructor
         * @param {RoleInfoMsg.Ilv_config_resp=} [properties] Properties to set
         */
        function lv_config_resp(properties) {
            this.configs = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_config_resp buy_mark.
         * @member {number} buy_mark
         * @memberof RoleInfoMsg.lv_config_resp
         * @instance
         */
        lv_config_resp.prototype.buy_mark = 0;

        /**
         * lv_config_resp price.
         * @member {number|Long} price
         * @memberof RoleInfoMsg.lv_config_resp
         * @instance
         */
        lv_config_resp.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_config_resp configs.
         * @member {Array.<RoleInfoMsg.Ilv_config>} configs
         * @memberof RoleInfoMsg.lv_config_resp
         * @instance
         */
        lv_config_resp.prototype.configs = $util.emptyArray;

        /**
         * lv_config_resp fund_id.
         * @member {number} fund_id
         * @memberof RoleInfoMsg.lv_config_resp
         * @instance
         */
        lv_config_resp.prototype.fund_id = 0;

        /**
         * Creates a new lv_config_resp instance using the specified properties.
         * @function create
         * @memberof RoleInfoMsg.lv_config_resp
         * @static
         * @param {RoleInfoMsg.Ilv_config_resp=} [properties] Properties to set
         * @returns {RoleInfoMsg.lv_config_resp} lv_config_resp instance
         */
        lv_config_resp.create = function create(properties) {
            return new lv_config_resp(properties);
        };

        /**
         * Encodes the specified lv_config_resp message. Does not implicitly {@link RoleInfoMsg.lv_config_resp.verify|verify} messages.
         * @function encode
         * @memberof RoleInfoMsg.lv_config_resp
         * @static
         * @param {RoleInfoMsg.Ilv_config_resp} message lv_config_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_config_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.buy_mark);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.price);
            if (message.configs != null && message.configs.length)
                for (var i = 0; i < message.configs.length; ++i)
                    $root.RoleInfoMsg.lv_config.encode(message.configs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.fund_id != null && message.hasOwnProperty("fund_id"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.fund_id);
            return writer;
        };

        /**
         * Encodes the specified lv_config_resp message, length delimited. Does not implicitly {@link RoleInfoMsg.lv_config_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleInfoMsg.lv_config_resp
         * @static
         * @param {RoleInfoMsg.Ilv_config_resp} message lv_config_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_config_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_config_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoleInfoMsg.lv_config_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleInfoMsg.lv_config_resp} lv_config_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_config_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleInfoMsg.lv_config_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.buy_mark = reader.uint32();
                    break;
                case 2:
                    message.price = reader.uint64();
                    break;
                case 3:
                    if (!(message.configs && message.configs.length))
                        message.configs = [];
                    message.configs.push($root.RoleInfoMsg.lv_config.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.fund_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("buy_mark"))
                throw $util.ProtocolError("missing required 'buy_mark'", { instance: message });
            if (!message.hasOwnProperty("price"))
                throw $util.ProtocolError("missing required 'price'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_config_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleInfoMsg.lv_config_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleInfoMsg.lv_config_resp} lv_config_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_config_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_config_resp message.
         * @function verify
         * @memberof RoleInfoMsg.lv_config_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_config_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.buy_mark))
                return "buy_mark: integer expected";
            if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))
                return "price: integer|Long expected";
            if (message.configs != null && message.hasOwnProperty("configs")) {
                if (!Array.isArray(message.configs))
                    return "configs: array expected";
                for (var i = 0; i < message.configs.length; ++i) {
                    var error = $root.RoleInfoMsg.lv_config.verify(message.configs[i]);
                    if (error)
                        return "configs." + error;
                }
            }
            if (message.fund_id != null && message.hasOwnProperty("fund_id"))
                if (!$util.isInteger(message.fund_id))
                    return "fund_id: integer expected";
            return null;
        };

        return lv_config_resp;
    })();

    RoleInfoMsg.lv_config = (function() {

        /**
         * Properties of a lv_config.
         * @memberof RoleInfoMsg
         * @interface Ilv_config
         * @property {number} lv lv_config lv
         * @property {number|Long} exp lv_config exp
         * @property {number|Long} award lv_config award
         */

        /**
         * Constructs a new lv_config.
         * @memberof RoleInfoMsg
         * @classdesc Represents a lv_config.
         * @implements Ilv_config
         * @constructor
         * @param {RoleInfoMsg.Ilv_config=} [properties] Properties to set
         */
        function lv_config(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_config lv.
         * @member {number} lv
         * @memberof RoleInfoMsg.lv_config
         * @instance
         */
        lv_config.prototype.lv = 0;

        /**
         * lv_config exp.
         * @member {number|Long} exp
         * @memberof RoleInfoMsg.lv_config
         * @instance
         */
        lv_config.prototype.exp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * lv_config award.
         * @member {number|Long} award
         * @memberof RoleInfoMsg.lv_config
         * @instance
         */
        lv_config.prototype.award = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new lv_config instance using the specified properties.
         * @function create
         * @memberof RoleInfoMsg.lv_config
         * @static
         * @param {RoleInfoMsg.Ilv_config=} [properties] Properties to set
         * @returns {RoleInfoMsg.lv_config} lv_config instance
         */
        lv_config.create = function create(properties) {
            return new lv_config(properties);
        };

        /**
         * Encodes the specified lv_config message. Does not implicitly {@link RoleInfoMsg.lv_config.verify|verify} messages.
         * @function encode
         * @memberof RoleInfoMsg.lv_config
         * @static
         * @param {RoleInfoMsg.Ilv_config} message lv_config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_config.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.lv);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.exp);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.award);
            return writer;
        };

        /**
         * Encodes the specified lv_config message, length delimited. Does not implicitly {@link RoleInfoMsg.lv_config.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleInfoMsg.lv_config
         * @static
         * @param {RoleInfoMsg.Ilv_config} message lv_config message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_config.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_config message from the specified reader or buffer.
         * @function decode
         * @memberof RoleInfoMsg.lv_config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleInfoMsg.lv_config} lv_config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_config.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleInfoMsg.lv_config();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lv = reader.uint32();
                    break;
                case 2:
                    message.exp = reader.uint64();
                    break;
                case 3:
                    message.award = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("lv"))
                throw $util.ProtocolError("missing required 'lv'", { instance: message });
            if (!message.hasOwnProperty("exp"))
                throw $util.ProtocolError("missing required 'exp'", { instance: message });
            if (!message.hasOwnProperty("award"))
                throw $util.ProtocolError("missing required 'award'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_config message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleInfoMsg.lv_config
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleInfoMsg.lv_config} lv_config
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_config.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_config message.
         * @function verify
         * @memberof RoleInfoMsg.lv_config
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_config.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.lv))
                return "lv: integer expected";
            if (!$util.isInteger(message.exp) && !(message.exp && $util.isInteger(message.exp.low) && $util.isInteger(message.exp.high)))
                return "exp: integer|Long expected";
            if (!$util.isInteger(message.award) && !(message.award && $util.isInteger(message.award.low) && $util.isInteger(message.award.high)))
                return "award: integer|Long expected";
            return null;
        };

        return lv_config;
    })();

    RoleInfoMsg.lv_notice_resp = (function() {

        /**
         * Properties of a lv_notice_resp.
         * @memberof RoleInfoMsg
         * @interface Ilv_notice_resp
         * @property {number} old_lv lv_notice_resp old_lv
         * @property {number} new_lv lv_notice_resp new_lv
         * @property {number|Long} uid lv_notice_resp uid
         */

        /**
         * Constructs a new lv_notice_resp.
         * @memberof RoleInfoMsg
         * @classdesc Represents a lv_notice_resp.
         * @implements Ilv_notice_resp
         * @constructor
         * @param {RoleInfoMsg.Ilv_notice_resp=} [properties] Properties to set
         */
        function lv_notice_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * lv_notice_resp old_lv.
         * @member {number} old_lv
         * @memberof RoleInfoMsg.lv_notice_resp
         * @instance
         */
        lv_notice_resp.prototype.old_lv = 0;

        /**
         * lv_notice_resp new_lv.
         * @member {number} new_lv
         * @memberof RoleInfoMsg.lv_notice_resp
         * @instance
         */
        lv_notice_resp.prototype.new_lv = 0;

        /**
         * lv_notice_resp uid.
         * @member {number|Long} uid
         * @memberof RoleInfoMsg.lv_notice_resp
         * @instance
         */
        lv_notice_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new lv_notice_resp instance using the specified properties.
         * @function create
         * @memberof RoleInfoMsg.lv_notice_resp
         * @static
         * @param {RoleInfoMsg.Ilv_notice_resp=} [properties] Properties to set
         * @returns {RoleInfoMsg.lv_notice_resp} lv_notice_resp instance
         */
        lv_notice_resp.create = function create(properties) {
            return new lv_notice_resp(properties);
        };

        /**
         * Encodes the specified lv_notice_resp message. Does not implicitly {@link RoleInfoMsg.lv_notice_resp.verify|verify} messages.
         * @function encode
         * @memberof RoleInfoMsg.lv_notice_resp
         * @static
         * @param {RoleInfoMsg.Ilv_notice_resp} message lv_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_notice_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.old_lv);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.new_lv);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified lv_notice_resp message, length delimited. Does not implicitly {@link RoleInfoMsg.lv_notice_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoleInfoMsg.lv_notice_resp
         * @static
         * @param {RoleInfoMsg.Ilv_notice_resp} message lv_notice_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        lv_notice_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a lv_notice_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoleInfoMsg.lv_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoleInfoMsg.lv_notice_resp} lv_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_notice_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoleInfoMsg.lv_notice_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.old_lv = reader.uint32();
                    break;
                case 2:
                    message.new_lv = reader.uint32();
                    break;
                case 3:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("old_lv"))
                throw $util.ProtocolError("missing required 'old_lv'", { instance: message });
            if (!message.hasOwnProperty("new_lv"))
                throw $util.ProtocolError("missing required 'new_lv'", { instance: message });
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a lv_notice_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoleInfoMsg.lv_notice_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoleInfoMsg.lv_notice_resp} lv_notice_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        lv_notice_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a lv_notice_resp message.
         * @function verify
         * @memberof RoleInfoMsg.lv_notice_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        lv_notice_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.old_lv))
                return "old_lv: integer expected";
            if (!$util.isInteger(message.new_lv))
                return "new_lv: integer expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return lv_notice_resp;
    })();

    return RoleInfoMsg;
})();

$root.RoomMsg = (function() {

    /**
     * Namespace RoomMsg.
     * @exports RoomMsg
     * @namespace
     */
    var RoomMsg = {};

    /**
     * c_cmd enum.
     * @name RoomMsg.c_cmd
     * @enum {string}
     * @property {number} enter_room_req=0 enter_room_req value
     * @property {number} enter_room_resp=1 enter_room_resp value
     * @property {number} ready_room_req=2 ready_room_req value
     * @property {number} ready_room_resp=3 ready_room_resp value
     * @property {number} syn_seat_req=4 syn_seat_req value
     * @property {number} syn_fish_resp=5 syn_fish_resp value
     * @property {number} hit_fish_req=6 hit_fish_req value
     * @property {number} hit_fish_resp=7 hit_fish_resp value
     * @property {number} shoot_bullet_req=8 shoot_bullet_req value
     * @property {number} shoot_bullet_resp=9 shoot_bullet_resp value
     * @property {number} change_battery_req=10 change_battery_req value
     * @property {number} change_battery_resp=11 change_battery_resp value
     * @property {number} leave_room_req=12 leave_room_req value
     * @property {number} update_fish_resp=13 update_fish_resp value
     * @property {number} fish_dead_resp=14 fish_dead_resp value
     * @property {number} leave_room_resp=15 leave_room_resp value
     * @property {number} update_chips_resp=16 update_chips_resp value
     * @property {number} shoot_err_resp=17 shoot_err_resp value
     * @property {number} battery_err_resp=18 battery_err_resp value
     * @property {number} sync_chips_rep=19 sync_chips_rep value
     * @property {number} sync_chips_resp=20 sync_chips_resp value
     * @property {number} room_status_resp=21 room_status_resp value
     * @property {number} syn_role_resp=22 syn_role_resp value
     * @property {number} novice_prompt_req=23 novice_prompt_req value
     * @property {number} bullet_useless_req=24 bullet_useless_req value
     * @property {number} bullet_useless_resp=25 bullet_useless_resp value
     * @property {number} bullet_pass_resp=26 bullet_pass_resp value
     * @property {number} sync_jp_jetton_resp=27 sync_jp_jetton_resp value
     * @property {number} fish_matrix_resp=28 fish_matrix_resp value
     * @property {number} clean_wave_resp=29 clean_wave_resp value
     * @property {number} one_piece_resp=30 one_piece_resp value
     * @property {number} hit_result_resp=31 hit_result_resp value
     * @property {number} extra_reward_req=32 extra_reward_req value
     * @property {number} extra_reward_resp=33 extra_reward_resp value
     * @property {number} wave_matrix_resp=34 wave_matrix_resp value
     * @property {number} mq_sync_chips_resp=35 mq_sync_chips_resp value
     * @property {number} fish_select_save_req=36 fish_select_save_req value
     * @property {number} fish_select_save_resp=37 fish_select_save_resp value
     * @property {number} fish_select_req=38 fish_select_req value
     * @property {number} fish_select_resp=39 fish_select_resp value
     * @property {number} update_valentine_score=40 update_valentine_score value
     * @property {number} rotate_canvas_resp=41 rotate_canvas_resp value
     * @property {number} weapon_chip_resp=42 weapon_chip_resp value
     */
    RoomMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "enter_room_req"] = 0;
        values[valuesById[1] = "enter_room_resp"] = 1;
        values[valuesById[2] = "ready_room_req"] = 2;
        values[valuesById[3] = "ready_room_resp"] = 3;
        values[valuesById[4] = "syn_seat_req"] = 4;
        values[valuesById[5] = "syn_fish_resp"] = 5;
        values[valuesById[6] = "hit_fish_req"] = 6;
        values[valuesById[7] = "hit_fish_resp"] = 7;
        values[valuesById[8] = "shoot_bullet_req"] = 8;
        values[valuesById[9] = "shoot_bullet_resp"] = 9;
        values[valuesById[10] = "change_battery_req"] = 10;
        values[valuesById[11] = "change_battery_resp"] = 11;
        values[valuesById[12] = "leave_room_req"] = 12;
        values[valuesById[13] = "update_fish_resp"] = 13;
        values[valuesById[14] = "fish_dead_resp"] = 14;
        values[valuesById[15] = "leave_room_resp"] = 15;
        values[valuesById[16] = "update_chips_resp"] = 16;
        values[valuesById[17] = "shoot_err_resp"] = 17;
        values[valuesById[18] = "battery_err_resp"] = 18;
        values[valuesById[19] = "sync_chips_rep"] = 19;
        values[valuesById[20] = "sync_chips_resp"] = 20;
        values[valuesById[21] = "room_status_resp"] = 21;
        values[valuesById[22] = "syn_role_resp"] = 22;
        values[valuesById[23] = "novice_prompt_req"] = 23;
        values[valuesById[24] = "bullet_useless_req"] = 24;
        values[valuesById[25] = "bullet_useless_resp"] = 25;
        values[valuesById[26] = "bullet_pass_resp"] = 26;
        values[valuesById[27] = "sync_jp_jetton_resp"] = 27;
        values[valuesById[28] = "fish_matrix_resp"] = 28;
        values[valuesById[29] = "clean_wave_resp"] = 29;
        values[valuesById[30] = "one_piece_resp"] = 30;
        values[valuesById[31] = "hit_result_resp"] = 31;
        values[valuesById[32] = "extra_reward_req"] = 32;
        values[valuesById[33] = "extra_reward_resp"] = 33;
        values[valuesById[34] = "wave_matrix_resp"] = 34;
        values[valuesById[35] = "mq_sync_chips_resp"] = 35;
        values[valuesById[36] = "fish_select_save_req"] = 36;
        values[valuesById[37] = "fish_select_save_resp"] = 37;
        values[valuesById[38] = "fish_select_req"] = 38;
        values[valuesById[39] = "fish_select_resp"] = 39;
        values[valuesById[40] = "update_valentine_score"] = 40;
        values[valuesById[41] = "rotate_canvas_resp"] = 41;
        values[valuesById[42] = "weapon_chip_resp"] = 42;
        return values;
    })();

    /**
     * msg_room_code enum.
     * @name RoomMsg.msg_room_code
     * @enum {string}
     * @property {number} SUCCESS_ENTER=1 SUCCESS_ENTER value
     * @property {number} FALSE_ENTER=2 FALSE_ENTER value
     * @property {number} ERR_BARBETTE=3 ERR_BARBETTE value
     * @property {number} ERR_CHIPS=4 ERR_CHIPS value
     * @property {number} LOW_CHIPS=5 LOW_CHIPS value
     * @property {number} HIGH_CHIPS=6 HIGH_CHIPS value
     * @property {number} UNFROZEN=7 UNFROZEN value
     * @property {number} RELOGIN_NORMAL=8 RELOGIN_NORMAL value
     * @property {number} RELOGIN_RECONNECT=9 RELOGIN_RECONNECT value
     * @property {number} ERR_HIT_REQ=10 ERR_HIT_REQ value
     * @property {number} ERR_SUMMON_ROLE=11 ERR_SUMMON_ROLE value
     * @property {number} ERR_SUMMON=12 ERR_SUMMON value
     * @property {number} FROZEN=13 FROZEN value
     * @property {number} RACE_OUT_TIME=14 RACE_OUT_TIME value
     * @property {number} TOO_MUCH_TRY=15 TOO_MUCH_TRY value
     * @property {number} LOCK_CHARID=16 LOCK_CHARID value
     */
    RoomMsg.msg_room_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SUCCESS_ENTER"] = 1;
        values[valuesById[2] = "FALSE_ENTER"] = 2;
        values[valuesById[3] = "ERR_BARBETTE"] = 3;
        values[valuesById[4] = "ERR_CHIPS"] = 4;
        values[valuesById[5] = "LOW_CHIPS"] = 5;
        values[valuesById[6] = "HIGH_CHIPS"] = 6;
        values[valuesById[7] = "UNFROZEN"] = 7;
        values[valuesById[8] = "RELOGIN_NORMAL"] = 8;
        values[valuesById[9] = "RELOGIN_RECONNECT"] = 9;
        values[valuesById[10] = "ERR_HIT_REQ"] = 10;
        values[valuesById[11] = "ERR_SUMMON_ROLE"] = 11;
        values[valuesById[12] = "ERR_SUMMON"] = 12;
        values[valuesById[13] = "FROZEN"] = 13;
        values[valuesById[14] = "RACE_OUT_TIME"] = 14;
        values[valuesById[15] = "TOO_MUCH_TRY"] = 15;
        values[valuesById[16] = "LOCK_CHARID"] = 16;
        return values;
    })();

    /**
     * msg_fish_save_code enum.
     * @name RoomMsg.msg_fish_save_code
     * @enum {string}
     * @property {number} SUCCESS=1 SUCCESS value
     * @property {number} FALSE=2 FALSE value
     */
    RoomMsg.msg_fish_save_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SUCCESS"] = 1;
        values[valuesById[2] = "FALSE"] = 2;
        return values;
    })();

    /**
     * msg_special_code enum.
     * @name RoomMsg.msg_special_code
     * @enum {string}
     * @property {number} NOEMAL=0 NOEMAL value
     * @property {number} ALTAIR=1 ALTAIR value
     * @property {number} VEGA=2 VEGA value
     * @property {number} AWARD=3 AWARD value
     */
    RoomMsg.msg_special_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NOEMAL"] = 0;
        values[valuesById[1] = "ALTAIR"] = 1;
        values[valuesById[2] = "VEGA"] = 2;
        values[valuesById[3] = "AWARD"] = 3;
        return values;
    })();

    RoomMsg.msg_room_service = (function() {

        /**
         * Constructs a new msg_room_service service.
         * @memberof RoomMsg
         * @classdesc Represents a msg_room_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_room_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_room_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_room_service;

        /**
         * Creates new msg_room_service service using the specified rpc implementation.
         * @function create
         * @memberof RoomMsg.msg_room_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_room_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_room_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#enter_room}.
         * @memberof RoomMsg.msg_room_service
         * @typedef enter_roomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.enter_room_resp} [response] enter_room_resp
         */

        /**
         * Calls enter_room.
         * @function enter_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ienter_room_req} request enter_room_req message or plain object
         * @param {RoomMsg.msg_room_service.enter_roomCallback} callback Node-style callback called with the error, if any, and enter_room_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.enter_room = function enter_room(request, callback) {
            return this.rpcCall(enter_room, $root.RoomMsg.enter_room_req, $root.RoomMsg.enter_room_resp, request, callback);
        }, "name", { value: "enter_room" });

        /**
         * Calls enter_room.
         * @function enter_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ienter_room_req} request enter_room_req message or plain object
         * @returns {Promise<RoomMsg.enter_room_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#ready_room}.
         * @memberof RoomMsg.msg_room_service
         * @typedef ready_roomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls ready_room.
         * @function ready_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Iready_room_req} request ready_room_req message or plain object
         * @param {RoomMsg.msg_room_service.ready_roomCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.ready_room = function ready_room(request, callback) {
            return this.rpcCall(ready_room, $root.RoomMsg.ready_room_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "ready_room" });

        /**
         * Calls ready_room.
         * @function ready_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Iready_room_req} request ready_room_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#other_ready_room}.
         * @memberof RoomMsg.msg_room_service
         * @typedef other_ready_roomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.ready_room_resp} [response] ready_room_resp
         */

        /**
         * Calls other_ready_room.
         * @function other_ready_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.other_ready_roomCallback} callback Node-style callback called with the error, if any, and ready_room_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.other_ready_room = function other_ready_room(request, callback) {
            return this.rpcCall(other_ready_room, $root.CommonMsg.undefined, $root.RoomMsg.ready_room_resp, request, callback);
        }, "name", { value: "other_ready_room" });

        /**
         * Calls other_ready_room.
         * @function other_ready_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.ready_room_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#syn_seat}.
         * @memberof RoomMsg.msg_room_service
         * @typedef syn_seatCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls syn_seat.
         * @function syn_seat
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Isyn_seat_req} request syn_seat_req message or plain object
         * @param {RoomMsg.msg_room_service.syn_seatCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.syn_seat = function syn_seat(request, callback) {
            return this.rpcCall(syn_seat, $root.RoomMsg.syn_seat_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "syn_seat" });

        /**
         * Calls syn_seat.
         * @function syn_seat
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Isyn_seat_req} request syn_seat_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#syn_fish}.
         * @memberof RoomMsg.msg_room_service
         * @typedef syn_fishCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.syn_fish_resp} [response] syn_fish_resp
         */

        /**
         * Calls syn_fish.
         * @function syn_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.syn_fishCallback} callback Node-style callback called with the error, if any, and syn_fish_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.syn_fish = function syn_fish(request, callback) {
            return this.rpcCall(syn_fish, $root.CommonMsg.undefined, $root.RoomMsg.syn_fish_resp, request, callback);
        }, "name", { value: "syn_fish" });

        /**
         * Calls syn_fish.
         * @function syn_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.syn_fish_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#hit_fish}.
         * @memberof RoomMsg.msg_room_service
         * @typedef hit_fishCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls hit_fish.
         * @function hit_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ihit_fish_req} request hit_fish_req message or plain object
         * @param {RoomMsg.msg_room_service.hit_fishCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.hit_fish = function hit_fish(request, callback) {
            return this.rpcCall(hit_fish, $root.RoomMsg.hit_fish_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "hit_fish" });

        /**
         * Calls hit_fish.
         * @function hit_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ihit_fish_req} request hit_fish_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#other_hit_fish}.
         * @memberof RoomMsg.msg_room_service
         * @typedef other_hit_fishCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.hit_fish_resp} [response] hit_fish_resp
         */

        /**
         * Calls other_hit_fish.
         * @function other_hit_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.other_hit_fishCallback} callback Node-style callback called with the error, if any, and hit_fish_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.other_hit_fish = function other_hit_fish(request, callback) {
            return this.rpcCall(other_hit_fish, $root.CommonMsg.undefined, $root.RoomMsg.hit_fish_resp, request, callback);
        }, "name", { value: "other_hit_fish" });

        /**
         * Calls other_hit_fish.
         * @function other_hit_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.hit_fish_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#fish_dead}.
         * @memberof RoomMsg.msg_room_service
         * @typedef fish_deadCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.fish_dead_resp} [response] fish_dead_resp
         */

        /**
         * Calls fish_dead.
         * @function fish_dead
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.fish_deadCallback} callback Node-style callback called with the error, if any, and fish_dead_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.fish_dead = function fish_dead(request, callback) {
            return this.rpcCall(fish_dead, $root.CommonMsg.undefined, $root.RoomMsg.fish_dead_resp, request, callback);
        }, "name", { value: "fish_dead" });

        /**
         * Calls fish_dead.
         * @function fish_dead
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.fish_dead_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#create_fish}.
         * @memberof RoomMsg.msg_room_service
         * @typedef create_fishCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.update_fish_resp} [response] update_fish_resp
         */

        /**
         * Calls create_fish.
         * @function create_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.create_fishCallback} callback Node-style callback called with the error, if any, and update_fish_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.create_fish = function create_fish(request, callback) {
            return this.rpcCall(create_fish, $root.CommonMsg.undefined, $root.RoomMsg.update_fish_resp, request, callback);
        }, "name", { value: "create_fish" });

        /**
         * Calls create_fish.
         * @function create_fish
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.update_fish_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#shoot_bullet}.
         * @memberof RoomMsg.msg_room_service
         * @typedef shoot_bulletCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls shoot_bullet.
         * @function shoot_bullet
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ishoot_bullet_req} request shoot_bullet_req message or plain object
         * @param {RoomMsg.msg_room_service.shoot_bulletCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.shoot_bullet = function shoot_bullet(request, callback) {
            return this.rpcCall(shoot_bullet, $root.RoomMsg.shoot_bullet_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "shoot_bullet" });

        /**
         * Calls shoot_bullet.
         * @function shoot_bullet
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ishoot_bullet_req} request shoot_bullet_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#sync_bullet}.
         * @memberof RoomMsg.msg_room_service
         * @typedef sync_bulletCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.shoot_bullet_resp} [response] shoot_bullet_resp
         */

        /**
         * Calls sync_bullet.
         * @function sync_bullet
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.sync_bulletCallback} callback Node-style callback called with the error, if any, and shoot_bullet_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.sync_bullet = function sync_bullet(request, callback) {
            return this.rpcCall(sync_bullet, $root.CommonMsg.undefined, $root.RoomMsg.shoot_bullet_resp, request, callback);
        }, "name", { value: "sync_bullet" });

        /**
         * Calls sync_bullet.
         * @function sync_bullet
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.shoot_bullet_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#change_battery}.
         * @memberof RoomMsg.msg_room_service
         * @typedef change_batteryCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls change_battery.
         * @function change_battery
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ichange_battery_req} request change_battery_req message or plain object
         * @param {RoomMsg.msg_room_service.change_batteryCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.change_battery = function change_battery(request, callback) {
            return this.rpcCall(change_battery, $root.RoomMsg.change_battery_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "change_battery" });

        /**
         * Calls change_battery.
         * @function change_battery
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ichange_battery_req} request change_battery_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#change_battery_resp}.
         * @memberof RoomMsg.msg_room_service
         * @typedef change_battery_respCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.change_battery_resp} [response] change_battery_resp
         */

        /**
         * Calls change_battery_resp.
         * @function change_battery_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.change_battery_respCallback} callback Node-style callback called with the error, if any, and change_battery_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.change_battery_resp = function change_battery_resp(request, callback) {
            return this.rpcCall(change_battery_resp, $root.CommonMsg.undefined, $root.RoomMsg.change_battery_resp, request, callback);
        }, "name", { value: "change_battery_resp" });

        /**
         * Calls change_battery_resp.
         * @function change_battery_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.change_battery_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#leave_room}.
         * @memberof RoomMsg.msg_room_service
         * @typedef leave_roomCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls leave_room.
         * @function leave_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ileave_room_req} request leave_room_req message or plain object
         * @param {RoomMsg.msg_room_service.leave_roomCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.leave_room = function leave_room(request, callback) {
            return this.rpcCall(leave_room, $root.RoomMsg.leave_room_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "leave_room" });

        /**
         * Calls leave_room.
         * @function leave_room
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ileave_room_req} request leave_room_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#leave_room_resp}.
         * @memberof RoomMsg.msg_room_service
         * @typedef leave_room_respCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.leave_room_resp} [response] leave_room_resp
         */

        /**
         * Calls leave_room_resp.
         * @function leave_room_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.leave_room_respCallback} callback Node-style callback called with the error, if any, and leave_room_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.leave_room_resp = function leave_room_resp(request, callback) {
            return this.rpcCall(leave_room_resp, $root.CommonMsg.undefined, $root.RoomMsg.leave_room_resp, request, callback);
        }, "name", { value: "leave_room_resp" });

        /**
         * Calls leave_room_resp.
         * @function leave_room_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.leave_room_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#update_chips}.
         * @memberof RoomMsg.msg_room_service
         * @typedef update_chipsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.update_chips_resp} [response] update_chips_resp
         */

        /**
         * Calls update_chips.
         * @function update_chips
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.update_chipsCallback} callback Node-style callback called with the error, if any, and update_chips_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.update_chips = function update_chips(request, callback) {
            return this.rpcCall(update_chips, $root.CommonMsg.undefined, $root.RoomMsg.update_chips_resp, request, callback);
        }, "name", { value: "update_chips" });

        /**
         * Calls update_chips.
         * @function update_chips
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.update_chips_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#shoot_err}.
         * @memberof RoomMsg.msg_room_service
         * @typedef shoot_errCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.shoot_err_resp} [response] shoot_err_resp
         */

        /**
         * Calls shoot_err.
         * @function shoot_err
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.shoot_errCallback} callback Node-style callback called with the error, if any, and shoot_err_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.shoot_err = function shoot_err(request, callback) {
            return this.rpcCall(shoot_err, $root.CommonMsg.undefined, $root.RoomMsg.shoot_err_resp, request, callback);
        }, "name", { value: "shoot_err" });

        /**
         * Calls shoot_err.
         * @function shoot_err
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.shoot_err_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#battery_err}.
         * @memberof RoomMsg.msg_room_service
         * @typedef battery_errCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.battery_err_resp} [response] battery_err_resp
         */

        /**
         * Calls battery_err.
         * @function battery_err
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.battery_errCallback} callback Node-style callback called with the error, if any, and battery_err_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.battery_err = function battery_err(request, callback) {
            return this.rpcCall(battery_err, $root.CommonMsg.undefined, $root.RoomMsg.battery_err_resp, request, callback);
        }, "name", { value: "battery_err" });

        /**
         * Calls battery_err.
         * @function battery_err
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.battery_err_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#sync_chips}.
         * @memberof RoomMsg.msg_room_service
         * @typedef sync_chipsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.sync_chips_resp} [response] sync_chips_resp
         */

        /**
         * Calls sync_chips.
         * @function sync_chips
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Isync_chips_rep} request sync_chips_rep message or plain object
         * @param {RoomMsg.msg_room_service.sync_chipsCallback} callback Node-style callback called with the error, if any, and sync_chips_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.sync_chips = function sync_chips(request, callback) {
            return this.rpcCall(sync_chips, $root.RoomMsg.sync_chips_rep, $root.RoomMsg.sync_chips_resp, request, callback);
        }, "name", { value: "sync_chips" });

        /**
         * Calls sync_chips.
         * @function sync_chips
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Isync_chips_rep} request sync_chips_rep message or plain object
         * @returns {Promise<RoomMsg.sync_chips_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#mq_sync_chips}.
         * @memberof RoomMsg.msg_room_service
         * @typedef mq_sync_chipsCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.mq_sync_chips_resp} [response] mq_sync_chips_resp
         */

        /**
         * Calls mq_sync_chips.
         * @function mq_sync_chips
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.mq_sync_chipsCallback} callback Node-style callback called with the error, if any, and mq_sync_chips_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.mq_sync_chips = function mq_sync_chips(request, callback) {
            return this.rpcCall(mq_sync_chips, $root.CommonMsg.undefined, $root.RoomMsg.mq_sync_chips_resp, request, callback);
        }, "name", { value: "mq_sync_chips" });

        /**
         * Calls mq_sync_chips.
         * @function mq_sync_chips
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.mq_sync_chips_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#room_status}.
         * @memberof RoomMsg.msg_room_service
         * @typedef room_statusCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.room_status_resp} [response] room_status_resp
         */

        /**
         * Calls room_status.
         * @function room_status
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.room_statusCallback} callback Node-style callback called with the error, if any, and room_status_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.room_status = function room_status(request, callback) {
            return this.rpcCall(room_status, $root.CommonMsg.undefined, $root.RoomMsg.room_status_resp, request, callback);
        }, "name", { value: "room_status" });

        /**
         * Calls room_status.
         * @function room_status
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.room_status_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#syn_role}.
         * @memberof RoomMsg.msg_room_service
         * @typedef syn_roleCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.syn_role_resp} [response] syn_role_resp
         */

        /**
         * Calls syn_role.
         * @function syn_role
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.syn_roleCallback} callback Node-style callback called with the error, if any, and syn_role_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.syn_role = function syn_role(request, callback) {
            return this.rpcCall(syn_role, $root.CommonMsg.undefined, $root.RoomMsg.syn_role_resp, request, callback);
        }, "name", { value: "syn_role" });

        /**
         * Calls syn_role.
         * @function syn_role
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.syn_role_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#novice_prompt}.
         * @memberof RoomMsg.msg_room_service
         * @typedef novice_promptCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls novice_prompt.
         * @function novice_prompt
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Inovice_prompt_req} request novice_prompt_req message or plain object
         * @param {RoomMsg.msg_room_service.novice_promptCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.novice_prompt = function novice_prompt(request, callback) {
            return this.rpcCall(novice_prompt, $root.RoomMsg.novice_prompt_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "novice_prompt" });

        /**
         * Calls novice_prompt.
         * @function novice_prompt
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Inovice_prompt_req} request novice_prompt_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#sync_useless_bullet}.
         * @memberof RoomMsg.msg_room_service
         * @typedef sync_useless_bulletCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {CommonMsg.undefined} [response] undefined
         */

        /**
         * Calls sync_useless_bullet.
         * @function sync_useless_bullet
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ibullet_useless_req} request bullet_useless_req message or plain object
         * @param {RoomMsg.msg_room_service.sync_useless_bulletCallback} callback Node-style callback called with the error, if any, and undefined
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.sync_useless_bullet = function sync_useless_bullet(request, callback) {
            return this.rpcCall(sync_useless_bullet, $root.RoomMsg.bullet_useless_req, $root.CommonMsg.undefined, request, callback);
        }, "name", { value: "sync_useless_bullet" });

        /**
         * Calls sync_useless_bullet.
         * @function sync_useless_bullet
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ibullet_useless_req} request bullet_useless_req message or plain object
         * @returns {Promise<CommonMsg.undefined>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#sync_useless_bullet_resp}.
         * @memberof RoomMsg.msg_room_service
         * @typedef sync_useless_bullet_respCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.bullet_useless_resp} [response] bullet_useless_resp
         */

        /**
         * Calls sync_useless_bullet_resp.
         * @function sync_useless_bullet_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.sync_useless_bullet_respCallback} callback Node-style callback called with the error, if any, and bullet_useless_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.sync_useless_bullet_resp = function sync_useless_bullet_resp(request, callback) {
            return this.rpcCall(sync_useless_bullet_resp, $root.CommonMsg.undefined, $root.RoomMsg.bullet_useless_resp, request, callback);
        }, "name", { value: "sync_useless_bullet_resp" });

        /**
         * Calls sync_useless_bullet_resp.
         * @function sync_useless_bullet_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.bullet_useless_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#pass_bullet_resp}.
         * @memberof RoomMsg.msg_room_service
         * @typedef pass_bullet_respCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.bullet_pass_resp} [response] bullet_pass_resp
         */

        /**
         * Calls pass_bullet_resp.
         * @function pass_bullet_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.pass_bullet_respCallback} callback Node-style callback called with the error, if any, and bullet_pass_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.pass_bullet_resp = function pass_bullet_resp(request, callback) {
            return this.rpcCall(pass_bullet_resp, $root.CommonMsg.undefined, $root.RoomMsg.bullet_pass_resp, request, callback);
        }, "name", { value: "pass_bullet_resp" });

        /**
         * Calls pass_bullet_resp.
         * @function pass_bullet_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.bullet_pass_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#jp_jetton_resp}.
         * @memberof RoomMsg.msg_room_service
         * @typedef jp_jetton_respCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.sync_jp_jetton_resp} [response] sync_jp_jetton_resp
         */

        /**
         * Calls jp_jetton_resp.
         * @function jp_jetton_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.jp_jetton_respCallback} callback Node-style callback called with the error, if any, and sync_jp_jetton_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.jp_jetton_resp = function jp_jetton_resp(request, callback) {
            return this.rpcCall(jp_jetton_resp, $root.CommonMsg.undefined, $root.RoomMsg.sync_jp_jetton_resp, request, callback);
        }, "name", { value: "jp_jetton_resp" });

        /**
         * Calls jp_jetton_resp.
         * @function jp_jetton_resp
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.sync_jp_jetton_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#fish_matrix}.
         * @memberof RoomMsg.msg_room_service
         * @typedef fish_matrixCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.fish_matrix_resp} [response] fish_matrix_resp
         */

        /**
         * Calls fish_matrix.
         * @function fish_matrix
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.fish_matrixCallback} callback Node-style callback called with the error, if any, and fish_matrix_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.fish_matrix = function fish_matrix(request, callback) {
            return this.rpcCall(fish_matrix, $root.CommonMsg.undefined, $root.RoomMsg.fish_matrix_resp, request, callback);
        }, "name", { value: "fish_matrix" });

        /**
         * Calls fish_matrix.
         * @function fish_matrix
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.fish_matrix_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#fish_wave_matrix}.
         * @memberof RoomMsg.msg_room_service
         * @typedef fish_wave_matrixCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.wave_matrix_resp} [response] wave_matrix_resp
         */

        /**
         * Calls fish_wave_matrix.
         * @function fish_wave_matrix
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.fish_wave_matrixCallback} callback Node-style callback called with the error, if any, and wave_matrix_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.fish_wave_matrix = function fish_wave_matrix(request, callback) {
            return this.rpcCall(fish_wave_matrix, $root.CommonMsg.undefined, $root.RoomMsg.wave_matrix_resp, request, callback);
        }, "name", { value: "fish_wave_matrix" });

        /**
         * Calls fish_wave_matrix.
         * @function fish_wave_matrix
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.wave_matrix_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#clean_wave}.
         * @memberof RoomMsg.msg_room_service
         * @typedef clean_waveCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.clean_wave_resp} [response] clean_wave_resp
         */

        /**
         * Calls clean_wave.
         * @function clean_wave
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.clean_waveCallback} callback Node-style callback called with the error, if any, and clean_wave_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.clean_wave = function clean_wave(request, callback) {
            return this.rpcCall(clean_wave, $root.CommonMsg.undefined, $root.RoomMsg.clean_wave_resp, request, callback);
        }, "name", { value: "clean_wave" });

        /**
         * Calls clean_wave.
         * @function clean_wave
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.clean_wave_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#hit_result}.
         * @memberof RoomMsg.msg_room_service
         * @typedef hit_resultCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.hit_result_resp} [response] hit_result_resp
         */

        /**
         * Calls hit_result.
         * @function hit_result
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.hit_resultCallback} callback Node-style callback called with the error, if any, and hit_result_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.hit_result = function hit_result(request, callback) {
            return this.rpcCall(hit_result, $root.CommonMsg.undefined, $root.RoomMsg.hit_result_resp, request, callback);
        }, "name", { value: "hit_result" });

        /**
         * Calls hit_result.
         * @function hit_result
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.hit_result_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#extra_reward}.
         * @memberof RoomMsg.msg_room_service
         * @typedef extra_rewardCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.extra_reward_resp} [response] extra_reward_resp
         */

        /**
         * Calls extra_reward.
         * @function extra_reward
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Iextra_reward_req} request extra_reward_req message or plain object
         * @param {RoomMsg.msg_room_service.extra_rewardCallback} callback Node-style callback called with the error, if any, and extra_reward_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.extra_reward = function extra_reward(request, callback) {
            return this.rpcCall(extra_reward, $root.RoomMsg.extra_reward_req, $root.RoomMsg.extra_reward_resp, request, callback);
        }, "name", { value: "extra_reward" });

        /**
         * Calls extra_reward.
         * @function extra_reward
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Iextra_reward_req} request extra_reward_req message or plain object
         * @returns {Promise<RoomMsg.extra_reward_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#save_fish_set}.
         * @memberof RoomMsg.msg_room_service
         * @typedef save_fish_setCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.fish_select_save_resp} [response] fish_select_save_resp
         */

        /**
         * Calls save_fish_set.
         * @function save_fish_set
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ifish_select_save_req} request fish_select_save_req message or plain object
         * @param {RoomMsg.msg_room_service.save_fish_setCallback} callback Node-style callback called with the error, if any, and fish_select_save_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.save_fish_set = function save_fish_set(request, callback) {
            return this.rpcCall(save_fish_set, $root.RoomMsg.fish_select_save_req, $root.RoomMsg.fish_select_save_resp, request, callback);
        }, "name", { value: "save_fish_set" });

        /**
         * Calls save_fish_set.
         * @function save_fish_set
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ifish_select_save_req} request fish_select_save_req message or plain object
         * @returns {Promise<RoomMsg.fish_select_save_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#get_fish_set}.
         * @memberof RoomMsg.msg_room_service
         * @typedef get_fish_setCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.fish_select_resp} [response] fish_select_resp
         */

        /**
         * Calls get_fish_set.
         * @function get_fish_set
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ifish_select_req} request fish_select_req message or plain object
         * @param {RoomMsg.msg_room_service.get_fish_setCallback} callback Node-style callback called with the error, if any, and fish_select_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.get_fish_set = function get_fish_set(request, callback) {
            return this.rpcCall(get_fish_set, $root.RoomMsg.fish_select_req, $root.RoomMsg.fish_select_resp, request, callback);
        }, "name", { value: "get_fish_set" });

        /**
         * Calls get_fish_set.
         * @function get_fish_set
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {RoomMsg.Ifish_select_req} request fish_select_req message or plain object
         * @returns {Promise<RoomMsg.fish_select_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#valentine_score}.
         * @memberof RoomMsg.msg_room_service
         * @typedef valentine_scoreCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.update_valentine_score} [response] update_valentine_score
         */

        /**
         * Calls valentine_score.
         * @function valentine_score
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.valentine_scoreCallback} callback Node-style callback called with the error, if any, and update_valentine_score
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.valentine_score = function valentine_score(request, callback) {
            return this.rpcCall(valentine_score, $root.CommonMsg.undefined, $root.RoomMsg.update_valentine_score, request, callback);
        }, "name", { value: "valentine_score" });

        /**
         * Calls valentine_score.
         * @function valentine_score
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.update_valentine_score>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#rotate_canvas_broadcast}.
         * @memberof RoomMsg.msg_room_service
         * @typedef rotate_canvas_broadcastCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.rotate_canvas_resp} [response] rotate_canvas_resp
         */

        /**
         * Calls rotate_canvas_broadcast.
         * @function rotate_canvas_broadcast
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.rotate_canvas_broadcastCallback} callback Node-style callback called with the error, if any, and rotate_canvas_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.rotate_canvas_broadcast = function rotate_canvas_broadcast(request, callback) {
            return this.rpcCall(rotate_canvas_broadcast, $root.CommonMsg.undefined, $root.RoomMsg.rotate_canvas_resp, request, callback);
        }, "name", { value: "rotate_canvas_broadcast" });

        /**
         * Calls rotate_canvas_broadcast.
         * @function rotate_canvas_broadcast
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.rotate_canvas_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link RoomMsg.msg_room_service#weapon_chip}.
         * @memberof RoomMsg.msg_room_service
         * @typedef weapon_chipCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {RoomMsg.weapon_chip_resp} [response] weapon_chip_resp
         */

        /**
         * Calls weapon_chip.
         * @function weapon_chip
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @param {RoomMsg.msg_room_service.weapon_chipCallback} callback Node-style callback called with the error, if any, and weapon_chip_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_room_service.prototype.weapon_chip = function weapon_chip(request, callback) {
            return this.rpcCall(weapon_chip, $root.CommonMsg.undefined, $root.RoomMsg.weapon_chip_resp, request, callback);
        }, "name", { value: "weapon_chip" });

        /**
         * Calls weapon_chip.
         * @function weapon_chip
         * @memberof RoomMsg.msg_room_service
         * @instance
         * @param {CommonMsg.Iundefined} request undefined message or plain object
         * @returns {Promise<RoomMsg.weapon_chip_resp>} Promise
         * @variation 2
         */

        return msg_room_service;
    })();

    RoomMsg.enter_room_req = (function() {

        /**
         * Properties of an enter_room_req.
         * @memberof RoomMsg
         * @interface Ienter_room_req
         * @property {CommonMsg.room_type} type enter_room_req type
         * @property {RoleMsg.msg_relogin_code} code enter_room_req code
         * @property {number|null} [race_id] enter_room_req race_id
         * @property {number|Long|null} [uid] enter_room_req uid
         * @property {number|null} [select_role] enter_room_req select_role
         */

        /**
         * Constructs a new enter_room_req.
         * @memberof RoomMsg
         * @classdesc Represents an enter_room_req.
         * @implements Ienter_room_req
         * @constructor
         * @param {RoomMsg.Ienter_room_req=} [properties] Properties to set
         */
        function enter_room_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * enter_room_req type.
         * @member {CommonMsg.room_type} type
         * @memberof RoomMsg.enter_room_req
         * @instance
         */
        enter_room_req.prototype.type = 0;

        /**
         * enter_room_req code.
         * @member {RoleMsg.msg_relogin_code} code
         * @memberof RoomMsg.enter_room_req
         * @instance
         */
        enter_room_req.prototype.code = 1;

        /**
         * enter_room_req race_id.
         * @member {number} race_id
         * @memberof RoomMsg.enter_room_req
         * @instance
         */
        enter_room_req.prototype.race_id = 0;

        /**
         * enter_room_req uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.enter_room_req
         * @instance
         */
        enter_room_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * enter_room_req select_role.
         * @member {number} select_role
         * @memberof RoomMsg.enter_room_req
         * @instance
         */
        enter_room_req.prototype.select_role = 0;

        /**
         * Creates a new enter_room_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.enter_room_req
         * @static
         * @param {RoomMsg.Ienter_room_req=} [properties] Properties to set
         * @returns {RoomMsg.enter_room_req} enter_room_req instance
         */
        enter_room_req.create = function create(properties) {
            return new enter_room_req(properties);
        };

        /**
         * Encodes the specified enter_room_req message. Does not implicitly {@link RoomMsg.enter_room_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.enter_room_req
         * @static
         * @param {RoomMsg.Ienter_room_req} message enter_room_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter_room_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.code);
            if (message.race_id != null && message.hasOwnProperty("race_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.race_id);
            if (message.uid != null && message.hasOwnProperty("uid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.uid);
            if (message.select_role != null && message.hasOwnProperty("select_role"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.select_role);
            return writer;
        };

        /**
         * Encodes the specified enter_room_req message, length delimited. Does not implicitly {@link RoomMsg.enter_room_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.enter_room_req
         * @static
         * @param {RoomMsg.Ienter_room_req} message enter_room_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter_room_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an enter_room_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.enter_room_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.enter_room_req} enter_room_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        enter_room_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.enter_room_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.code = reader.int32();
                    break;
                case 3:
                    message.race_id = reader.uint32();
                    break;
                case 4:
                    message.uid = reader.uint64();
                    break;
                case 5:
                    message.select_role = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes an enter_room_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.enter_room_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.enter_room_req} enter_room_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        enter_room_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an enter_room_req message.
         * @function verify
         * @memberof RoomMsg.enter_room_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        enter_room_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 100:
            case 101:
                break;
            }
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
                break;
            }
            if (message.race_id != null && message.hasOwnProperty("race_id"))
                if (!$util.isInteger(message.race_id))
                    return "race_id: integer expected";
            if (message.uid != null && message.hasOwnProperty("uid"))
                if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                    return "uid: integer|Long expected";
            if (message.select_role != null && message.hasOwnProperty("select_role"))
                if (!$util.isInteger(message.select_role))
                    return "select_role: integer expected";
            return null;
        };

        return enter_room_req;
    })();

    RoomMsg.enter_room_resp = (function() {

        /**
         * Properties of an enter_room_resp.
         * @memberof RoomMsg
         * @interface Ienter_room_resp
         * @property {RoomMsg.msg_room_code} code enter_room_resp code
         * @property {number|null} [game_id] enter_room_resp game_id
         */

        /**
         * Constructs a new enter_room_resp.
         * @memberof RoomMsg
         * @classdesc Represents an enter_room_resp.
         * @implements Ienter_room_resp
         * @constructor
         * @param {RoomMsg.Ienter_room_resp=} [properties] Properties to set
         */
        function enter_room_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * enter_room_resp code.
         * @member {RoomMsg.msg_room_code} code
         * @memberof RoomMsg.enter_room_resp
         * @instance
         */
        enter_room_resp.prototype.code = 1;

        /**
         * enter_room_resp game_id.
         * @member {number} game_id
         * @memberof RoomMsg.enter_room_resp
         * @instance
         */
        enter_room_resp.prototype.game_id = 0;

        /**
         * Creates a new enter_room_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.enter_room_resp
         * @static
         * @param {RoomMsg.Ienter_room_resp=} [properties] Properties to set
         * @returns {RoomMsg.enter_room_resp} enter_room_resp instance
         */
        enter_room_resp.create = function create(properties) {
            return new enter_room_resp(properties);
        };

        /**
         * Encodes the specified enter_room_resp message. Does not implicitly {@link RoomMsg.enter_room_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.enter_room_resp
         * @static
         * @param {RoomMsg.Ienter_room_resp} message enter_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter_room_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.game_id);
            return writer;
        };

        /**
         * Encodes the specified enter_room_resp message, length delimited. Does not implicitly {@link RoomMsg.enter_room_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.enter_room_resp
         * @static
         * @param {RoomMsg.Ienter_room_resp} message enter_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        enter_room_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an enter_room_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.enter_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.enter_room_resp} enter_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        enter_room_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.enter_room_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.game_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes an enter_room_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.enter_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.enter_room_resp} enter_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        enter_room_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an enter_room_resp message.
         * @function verify
         * @memberof RoomMsg.enter_room_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        enter_room_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                break;
            }
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                if (!$util.isInteger(message.game_id))
                    return "game_id: integer expected";
            return null;
        };

        return enter_room_resp;
    })();

    RoomMsg.ready_room_req = (function() {

        /**
         * Properties of a ready_room_req.
         * @memberof RoomMsg
         * @interface Iready_room_req
         */

        /**
         * Constructs a new ready_room_req.
         * @memberof RoomMsg
         * @classdesc Represents a ready_room_req.
         * @implements Iready_room_req
         * @constructor
         * @param {RoomMsg.Iready_room_req=} [properties] Properties to set
         */
        function ready_room_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ready_room_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.ready_room_req
         * @static
         * @param {RoomMsg.Iready_room_req=} [properties] Properties to set
         * @returns {RoomMsg.ready_room_req} ready_room_req instance
         */
        ready_room_req.create = function create(properties) {
            return new ready_room_req(properties);
        };

        /**
         * Encodes the specified ready_room_req message. Does not implicitly {@link RoomMsg.ready_room_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.ready_room_req
         * @static
         * @param {RoomMsg.Iready_room_req} message ready_room_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ready_room_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ready_room_req message, length delimited. Does not implicitly {@link RoomMsg.ready_room_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.ready_room_req
         * @static
         * @param {RoomMsg.Iready_room_req} message ready_room_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ready_room_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ready_room_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.ready_room_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.ready_room_req} ready_room_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ready_room_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.ready_room_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ready_room_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.ready_room_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.ready_room_req} ready_room_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ready_room_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ready_room_req message.
         * @function verify
         * @memberof RoomMsg.ready_room_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ready_room_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return ready_room_req;
    })();

    RoomMsg.ready_room_resp = (function() {

        /**
         * Properties of a ready_room_resp.
         * @memberof RoomMsg
         * @interface Iready_room_resp
         * @property {Array.<RoomMsg.Iroom_role_info>|null} [role] ready_room_resp role
         */

        /**
         * Constructs a new ready_room_resp.
         * @memberof RoomMsg
         * @classdesc Represents a ready_room_resp.
         * @implements Iready_room_resp
         * @constructor
         * @param {RoomMsg.Iready_room_resp=} [properties] Properties to set
         */
        function ready_room_resp(properties) {
            this.role = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ready_room_resp role.
         * @member {Array.<RoomMsg.Iroom_role_info>} role
         * @memberof RoomMsg.ready_room_resp
         * @instance
         */
        ready_room_resp.prototype.role = $util.emptyArray;

        /**
         * Creates a new ready_room_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.ready_room_resp
         * @static
         * @param {RoomMsg.Iready_room_resp=} [properties] Properties to set
         * @returns {RoomMsg.ready_room_resp} ready_room_resp instance
         */
        ready_room_resp.create = function create(properties) {
            return new ready_room_resp(properties);
        };

        /**
         * Encodes the specified ready_room_resp message. Does not implicitly {@link RoomMsg.ready_room_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.ready_room_resp
         * @static
         * @param {RoomMsg.Iready_room_resp} message ready_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ready_room_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.role != null && message.role.length)
                for (var i = 0; i < message.role.length; ++i)
                    $root.RoomMsg.room_role_info.encode(message.role[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ready_room_resp message, length delimited. Does not implicitly {@link RoomMsg.ready_room_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.ready_room_resp
         * @static
         * @param {RoomMsg.Iready_room_resp} message ready_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ready_room_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ready_room_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.ready_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.ready_room_resp} ready_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ready_room_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.ready_room_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.role && message.role.length))
                        message.role = [];
                    message.role.push($root.RoomMsg.room_role_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ready_room_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.ready_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.ready_room_resp} ready_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ready_room_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ready_room_resp message.
         * @function verify
         * @memberof RoomMsg.ready_room_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ready_room_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.role != null && message.hasOwnProperty("role")) {
                if (!Array.isArray(message.role))
                    return "role: array expected";
                for (var i = 0; i < message.role.length; ++i) {
                    var error = $root.RoomMsg.room_role_info.verify(message.role[i]);
                    if (error)
                        return "role." + error;
                }
            }
            return null;
        };

        return ready_room_resp;
    })();

    RoomMsg.syn_role_resp = (function() {

        /**
         * Properties of a syn_role_resp.
         * @memberof RoomMsg
         * @interface Isyn_role_resp
         * @property {Array.<RoomMsg.Iroom_role_info>|null} [role] syn_role_resp role
         */

        /**
         * Constructs a new syn_role_resp.
         * @memberof RoomMsg
         * @classdesc Represents a syn_role_resp.
         * @implements Isyn_role_resp
         * @constructor
         * @param {RoomMsg.Isyn_role_resp=} [properties] Properties to set
         */
        function syn_role_resp(properties) {
            this.role = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * syn_role_resp role.
         * @member {Array.<RoomMsg.Iroom_role_info>} role
         * @memberof RoomMsg.syn_role_resp
         * @instance
         */
        syn_role_resp.prototype.role = $util.emptyArray;

        /**
         * Creates a new syn_role_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.syn_role_resp
         * @static
         * @param {RoomMsg.Isyn_role_resp=} [properties] Properties to set
         * @returns {RoomMsg.syn_role_resp} syn_role_resp instance
         */
        syn_role_resp.create = function create(properties) {
            return new syn_role_resp(properties);
        };

        /**
         * Encodes the specified syn_role_resp message. Does not implicitly {@link RoomMsg.syn_role_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.syn_role_resp
         * @static
         * @param {RoomMsg.Isyn_role_resp} message syn_role_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        syn_role_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.role != null && message.role.length)
                for (var i = 0; i < message.role.length; ++i)
                    $root.RoomMsg.room_role_info.encode(message.role[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified syn_role_resp message, length delimited. Does not implicitly {@link RoomMsg.syn_role_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.syn_role_resp
         * @static
         * @param {RoomMsg.Isyn_role_resp} message syn_role_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        syn_role_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a syn_role_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.syn_role_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.syn_role_resp} syn_role_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        syn_role_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.syn_role_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.role && message.role.length))
                        message.role = [];
                    message.role.push($root.RoomMsg.room_role_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a syn_role_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.syn_role_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.syn_role_resp} syn_role_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        syn_role_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a syn_role_resp message.
         * @function verify
         * @memberof RoomMsg.syn_role_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        syn_role_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.role != null && message.hasOwnProperty("role")) {
                if (!Array.isArray(message.role))
                    return "role: array expected";
                for (var i = 0; i < message.role.length; ++i) {
                    var error = $root.RoomMsg.room_role_info.verify(message.role[i]);
                    if (error)
                        return "role." + error;
                }
            }
            return null;
        };

        return syn_role_resp;
    })();

    RoomMsg.syn_seat_req = (function() {

        /**
         * Properties of a syn_seat_req.
         * @memberof RoomMsg
         * @interface Isyn_seat_req
         */

        /**
         * Constructs a new syn_seat_req.
         * @memberof RoomMsg
         * @classdesc Represents a syn_seat_req.
         * @implements Isyn_seat_req
         * @constructor
         * @param {RoomMsg.Isyn_seat_req=} [properties] Properties to set
         */
        function syn_seat_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new syn_seat_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.syn_seat_req
         * @static
         * @param {RoomMsg.Isyn_seat_req=} [properties] Properties to set
         * @returns {RoomMsg.syn_seat_req} syn_seat_req instance
         */
        syn_seat_req.create = function create(properties) {
            return new syn_seat_req(properties);
        };

        /**
         * Encodes the specified syn_seat_req message. Does not implicitly {@link RoomMsg.syn_seat_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.syn_seat_req
         * @static
         * @param {RoomMsg.Isyn_seat_req} message syn_seat_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        syn_seat_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified syn_seat_req message, length delimited. Does not implicitly {@link RoomMsg.syn_seat_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.syn_seat_req
         * @static
         * @param {RoomMsg.Isyn_seat_req} message syn_seat_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        syn_seat_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a syn_seat_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.syn_seat_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.syn_seat_req} syn_seat_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        syn_seat_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.syn_seat_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a syn_seat_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.syn_seat_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.syn_seat_req} syn_seat_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        syn_seat_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a syn_seat_req message.
         * @function verify
         * @memberof RoomMsg.syn_seat_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        syn_seat_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return syn_seat_req;
    })();

    RoomMsg.room_status_resp = (function() {

        /**
         * Properties of a room_status_resp.
         * @memberof RoomMsg
         * @interface Iroom_status_resp
         * @property {RoomMsg.msg_room_code} status room_status_resp status
         * @property {Array.<RoomMsg.Iupdate_fish_resp>|null} [fish_list] room_status_resp fish_list
         * @property {number|Long|null} [matrix_fztime_ms] room_status_resp matrix_fztime_ms
         */

        /**
         * Constructs a new room_status_resp.
         * @memberof RoomMsg
         * @classdesc Represents a room_status_resp.
         * @implements Iroom_status_resp
         * @constructor
         * @param {RoomMsg.Iroom_status_resp=} [properties] Properties to set
         */
        function room_status_resp(properties) {
            this.fish_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * room_status_resp status.
         * @member {RoomMsg.msg_room_code} status
         * @memberof RoomMsg.room_status_resp
         * @instance
         */
        room_status_resp.prototype.status = 1;

        /**
         * room_status_resp fish_list.
         * @member {Array.<RoomMsg.Iupdate_fish_resp>} fish_list
         * @memberof RoomMsg.room_status_resp
         * @instance
         */
        room_status_resp.prototype.fish_list = $util.emptyArray;

        /**
         * room_status_resp matrix_fztime_ms.
         * @member {number|Long} matrix_fztime_ms
         * @memberof RoomMsg.room_status_resp
         * @instance
         */
        room_status_resp.prototype.matrix_fztime_ms = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new room_status_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.room_status_resp
         * @static
         * @param {RoomMsg.Iroom_status_resp=} [properties] Properties to set
         * @returns {RoomMsg.room_status_resp} room_status_resp instance
         */
        room_status_resp.create = function create(properties) {
            return new room_status_resp(properties);
        };

        /**
         * Encodes the specified room_status_resp message. Does not implicitly {@link RoomMsg.room_status_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.room_status_resp
         * @static
         * @param {RoomMsg.Iroom_status_resp} message room_status_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        room_status_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);
            if (message.fish_list != null && message.fish_list.length)
                for (var i = 0; i < message.fish_list.length; ++i)
                    $root.RoomMsg.update_fish_resp.encode(message.fish_list[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.matrix_fztime_ms != null && message.hasOwnProperty("matrix_fztime_ms"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.matrix_fztime_ms);
            return writer;
        };

        /**
         * Encodes the specified room_status_resp message, length delimited. Does not implicitly {@link RoomMsg.room_status_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.room_status_resp
         * @static
         * @param {RoomMsg.Iroom_status_resp} message room_status_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        room_status_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a room_status_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.room_status_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.room_status_resp} room_status_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        room_status_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.room_status_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.status = reader.int32();
                    break;
                case 2:
                    if (!(message.fish_list && message.fish_list.length))
                        message.fish_list = [];
                    message.fish_list.push($root.RoomMsg.update_fish_resp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.matrix_fztime_ms = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("status"))
                throw $util.ProtocolError("missing required 'status'", { instance: message });
            return message;
        };

        /**
         * Decodes a room_status_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.room_status_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.room_status_resp} room_status_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        room_status_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a room_status_resp message.
         * @function verify
         * @memberof RoomMsg.room_status_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        room_status_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.status) {
            default:
                return "status: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                break;
            }
            if (message.fish_list != null && message.hasOwnProperty("fish_list")) {
                if (!Array.isArray(message.fish_list))
                    return "fish_list: array expected";
                for (var i = 0; i < message.fish_list.length; ++i) {
                    var error = $root.RoomMsg.update_fish_resp.verify(message.fish_list[i]);
                    if (error)
                        return "fish_list." + error;
                }
            }
            if (message.matrix_fztime_ms != null && message.hasOwnProperty("matrix_fztime_ms"))
                if (!$util.isInteger(message.matrix_fztime_ms) && !(message.matrix_fztime_ms && $util.isInteger(message.matrix_fztime_ms.low) && $util.isInteger(message.matrix_fztime_ms.high)))
                    return "matrix_fztime_ms: integer|Long expected";
            return null;
        };

        return room_status_resp;
    })();

    RoomMsg.syn_fish_resp = (function() {

        /**
         * Properties of a syn_fish_resp.
         * @memberof RoomMsg
         * @interface Isyn_fish_resp
         * @property {Array.<RoomMsg.Iupdate_fish_resp>|null} [fish_list] syn_fish_resp fish_list
         */

        /**
         * Constructs a new syn_fish_resp.
         * @memberof RoomMsg
         * @classdesc Represents a syn_fish_resp.
         * @implements Isyn_fish_resp
         * @constructor
         * @param {RoomMsg.Isyn_fish_resp=} [properties] Properties to set
         */
        function syn_fish_resp(properties) {
            this.fish_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * syn_fish_resp fish_list.
         * @member {Array.<RoomMsg.Iupdate_fish_resp>} fish_list
         * @memberof RoomMsg.syn_fish_resp
         * @instance
         */
        syn_fish_resp.prototype.fish_list = $util.emptyArray;

        /**
         * Creates a new syn_fish_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.syn_fish_resp
         * @static
         * @param {RoomMsg.Isyn_fish_resp=} [properties] Properties to set
         * @returns {RoomMsg.syn_fish_resp} syn_fish_resp instance
         */
        syn_fish_resp.create = function create(properties) {
            return new syn_fish_resp(properties);
        };

        /**
         * Encodes the specified syn_fish_resp message. Does not implicitly {@link RoomMsg.syn_fish_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.syn_fish_resp
         * @static
         * @param {RoomMsg.Isyn_fish_resp} message syn_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        syn_fish_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.fish_list != null && message.fish_list.length)
                for (var i = 0; i < message.fish_list.length; ++i)
                    $root.RoomMsg.update_fish_resp.encode(message.fish_list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified syn_fish_resp message, length delimited. Does not implicitly {@link RoomMsg.syn_fish_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.syn_fish_resp
         * @static
         * @param {RoomMsg.Isyn_fish_resp} message syn_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        syn_fish_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a syn_fish_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.syn_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.syn_fish_resp} syn_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        syn_fish_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.syn_fish_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.fish_list && message.fish_list.length))
                        message.fish_list = [];
                    message.fish_list.push($root.RoomMsg.update_fish_resp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a syn_fish_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.syn_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.syn_fish_resp} syn_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        syn_fish_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a syn_fish_resp message.
         * @function verify
         * @memberof RoomMsg.syn_fish_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        syn_fish_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.fish_list != null && message.hasOwnProperty("fish_list")) {
                if (!Array.isArray(message.fish_list))
                    return "fish_list: array expected";
                for (var i = 0; i < message.fish_list.length; ++i) {
                    var error = $root.RoomMsg.update_fish_resp.verify(message.fish_list[i]);
                    if (error)
                        return "fish_list." + error;
                }
            }
            return null;
        };

        return syn_fish_resp;
    })();

    RoomMsg.update_fish_resp = (function() {

        /**
         * Properties of an update_fish_resp.
         * @memberof RoomMsg
         * @interface Iupdate_fish_resp
         * @property {number} type update_fish_resp type
         * @property {number|Long} id update_fish_resp id
         * @property {number} path_id update_fish_resp path_id
         * @property {number|Long|null} [create_time_ms] update_fish_resp create_time_ms
         * @property {number|Long|null} [frozen_time_ms] update_fish_resp frozen_time_ms
         * @property {number|null} [hp] update_fish_resp hp
         * @property {number|null} [pos] update_fish_resp pos
         * @property {number|null} [model] update_fish_resp model
         * @property {number|Long|null} [owner_id] update_fish_resp owner_id
         * @property {RoomMsg.msg_special_code|null} [code] update_fish_resp code
         * @property {number|null} [level] update_fish_resp level
         */

        /**
         * Constructs a new update_fish_resp.
         * @memberof RoomMsg
         * @classdesc Represents an update_fish_resp.
         * @implements Iupdate_fish_resp
         * @constructor
         * @param {RoomMsg.Iupdate_fish_resp=} [properties] Properties to set
         */
        function update_fish_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * update_fish_resp type.
         * @member {number} type
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.type = 0;

        /**
         * update_fish_resp id.
         * @member {number|Long} id
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * update_fish_resp path_id.
         * @member {number} path_id
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.path_id = 0;

        /**
         * update_fish_resp create_time_ms.
         * @member {number|Long} create_time_ms
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.create_time_ms = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * update_fish_resp frozen_time_ms.
         * @member {number|Long} frozen_time_ms
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.frozen_time_ms = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * update_fish_resp hp.
         * @member {number} hp
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.hp = 0;

        /**
         * update_fish_resp pos.
         * @member {number} pos
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.pos = 0;

        /**
         * update_fish_resp model.
         * @member {number} model
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.model = 0;

        /**
         * update_fish_resp owner_id.
         * @member {number|Long} owner_id
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.owner_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * update_fish_resp code.
         * @member {RoomMsg.msg_special_code} code
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.code = 0;

        /**
         * update_fish_resp level.
         * @member {number} level
         * @memberof RoomMsg.update_fish_resp
         * @instance
         */
        update_fish_resp.prototype.level = 0;

        /**
         * Creates a new update_fish_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.update_fish_resp
         * @static
         * @param {RoomMsg.Iupdate_fish_resp=} [properties] Properties to set
         * @returns {RoomMsg.update_fish_resp} update_fish_resp instance
         */
        update_fish_resp.create = function create(properties) {
            return new update_fish_resp(properties);
        };

        /**
         * Encodes the specified update_fish_resp message. Does not implicitly {@link RoomMsg.update_fish_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.update_fish_resp
         * @static
         * @param {RoomMsg.Iupdate_fish_resp} message update_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_fish_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path_id);
            if (message.create_time_ms != null && message.hasOwnProperty("create_time_ms"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.create_time_ms);
            if (message.frozen_time_ms != null && message.hasOwnProperty("frozen_time_ms"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.frozen_time_ms);
            if (message.hp != null && message.hasOwnProperty("hp"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.hp);
            if (message.pos != null && message.hasOwnProperty("pos"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.pos);
            if (message.model != null && message.hasOwnProperty("model"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.model);
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.owner_id);
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.code);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.level);
            return writer;
        };

        /**
         * Encodes the specified update_fish_resp message, length delimited. Does not implicitly {@link RoomMsg.update_fish_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.update_fish_resp
         * @static
         * @param {RoomMsg.Iupdate_fish_resp} message update_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_fish_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an update_fish_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.update_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.update_fish_resp} update_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_fish_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.update_fish_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                case 2:
                    message.id = reader.uint64();
                    break;
                case 3:
                    message.path_id = reader.uint32();
                    break;
                case 4:
                    message.create_time_ms = reader.uint64();
                    break;
                case 5:
                    message.frozen_time_ms = reader.uint64();
                    break;
                case 6:
                    message.hp = reader.uint32();
                    break;
                case 7:
                    message.pos = reader.uint32();
                    break;
                case 8:
                    message.model = reader.uint32();
                    break;
                case 9:
                    message.owner_id = reader.uint64();
                    break;
                case 10:
                    message.code = reader.int32();
                    break;
                case 11:
                    message.level = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("path_id"))
                throw $util.ProtocolError("missing required 'path_id'", { instance: message });
            return message;
        };

        /**
         * Decodes an update_fish_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.update_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.update_fish_resp} update_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_fish_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an update_fish_resp message.
         * @function verify
         * @memberof RoomMsg.update_fish_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        update_fish_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
            if (!$util.isInteger(message.path_id))
                return "path_id: integer expected";
            if (message.create_time_ms != null && message.hasOwnProperty("create_time_ms"))
                if (!$util.isInteger(message.create_time_ms) && !(message.create_time_ms && $util.isInteger(message.create_time_ms.low) && $util.isInteger(message.create_time_ms.high)))
                    return "create_time_ms: integer|Long expected";
            if (message.frozen_time_ms != null && message.hasOwnProperty("frozen_time_ms"))
                if (!$util.isInteger(message.frozen_time_ms) && !(message.frozen_time_ms && $util.isInteger(message.frozen_time_ms.low) && $util.isInteger(message.frozen_time_ms.high)))
                    return "frozen_time_ms: integer|Long expected";
            if (message.hp != null && message.hasOwnProperty("hp"))
                if (!$util.isInteger(message.hp))
                    return "hp: integer expected";
            if (message.pos != null && message.hasOwnProperty("pos"))
                if (!$util.isInteger(message.pos))
                    return "pos: integer expected";
            if (message.model != null && message.hasOwnProperty("model"))
                if (!$util.isInteger(message.model))
                    return "model: integer expected";
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                if (!$util.isInteger(message.owner_id) && !(message.owner_id && $util.isInteger(message.owner_id.low) && $util.isInteger(message.owner_id.high)))
                    return "owner_id: integer|Long expected";
            if (message.code != null && message.hasOwnProperty("code"))
                switch (message.code) {
                default:
                    return "code: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            return null;
        };

        return update_fish_resp;
    })();

    RoomMsg.hit_fish_req = (function() {

        /**
         * Properties of a hit_fish_req.
         * @memberof RoomMsg
         * @interface Ihit_fish_req
         * @property {number} bullet_multi hit_fish_req bullet_multi
         * @property {Array.<number|Long>|null} [fish_id] hit_fish_req fish_id
         * @property {Array.<number|Long>|null} [related_fish] hit_fish_req related_fish
         * @property {number|Long} bulletid hit_fish_req bulletid
         * @property {number|null} [weapon_type] hit_fish_req weapon_type
         */

        /**
         * Constructs a new hit_fish_req.
         * @memberof RoomMsg
         * @classdesc Represents a hit_fish_req.
         * @implements Ihit_fish_req
         * @constructor
         * @param {RoomMsg.Ihit_fish_req=} [properties] Properties to set
         */
        function hit_fish_req(properties) {
            this.fish_id = [];
            this.related_fish = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * hit_fish_req bullet_multi.
         * @member {number} bullet_multi
         * @memberof RoomMsg.hit_fish_req
         * @instance
         */
        hit_fish_req.prototype.bullet_multi = 0;

        /**
         * hit_fish_req fish_id.
         * @member {Array.<number|Long>} fish_id
         * @memberof RoomMsg.hit_fish_req
         * @instance
         */
        hit_fish_req.prototype.fish_id = $util.emptyArray;

        /**
         * hit_fish_req related_fish.
         * @member {Array.<number|Long>} related_fish
         * @memberof RoomMsg.hit_fish_req
         * @instance
         */
        hit_fish_req.prototype.related_fish = $util.emptyArray;

        /**
         * hit_fish_req bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.hit_fish_req
         * @instance
         */
        hit_fish_req.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * hit_fish_req weapon_type.
         * @member {number} weapon_type
         * @memberof RoomMsg.hit_fish_req
         * @instance
         */
        hit_fish_req.prototype.weapon_type = 0;

        /**
         * Creates a new hit_fish_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.hit_fish_req
         * @static
         * @param {RoomMsg.Ihit_fish_req=} [properties] Properties to set
         * @returns {RoomMsg.hit_fish_req} hit_fish_req instance
         */
        hit_fish_req.create = function create(properties) {
            return new hit_fish_req(properties);
        };

        /**
         * Encodes the specified hit_fish_req message. Does not implicitly {@link RoomMsg.hit_fish_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.hit_fish_req
         * @static
         * @param {RoomMsg.Ihit_fish_req} message hit_fish_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hit_fish_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bullet_multi);
            if (message.fish_id != null && message.fish_id.length)
                for (var i = 0; i < message.fish_id.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fish_id[i]);
            if (message.related_fish != null && message.related_fish.length)
                for (var i = 0; i < message.related_fish.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.related_fish[i]);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.bulletid);
            if (message.weapon_type != null && message.hasOwnProperty("weapon_type"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.weapon_type);
            return writer;
        };

        /**
         * Encodes the specified hit_fish_req message, length delimited. Does not implicitly {@link RoomMsg.hit_fish_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.hit_fish_req
         * @static
         * @param {RoomMsg.Ihit_fish_req} message hit_fish_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hit_fish_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a hit_fish_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.hit_fish_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.hit_fish_req} hit_fish_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        hit_fish_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.hit_fish_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bullet_multi = reader.uint32();
                    break;
                case 2:
                    if (!(message.fish_id && message.fish_id.length))
                        message.fish_id = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.fish_id.push(reader.uint64());
                    } else
                        message.fish_id.push(reader.uint64());
                    break;
                case 3:
                    if (!(message.related_fish && message.related_fish.length))
                        message.related_fish = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.related_fish.push(reader.uint64());
                    } else
                        message.related_fish.push(reader.uint64());
                    break;
                case 4:
                    message.bulletid = reader.uint64();
                    break;
                case 5:
                    message.weapon_type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("bullet_multi"))
                throw $util.ProtocolError("missing required 'bullet_multi'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            return message;
        };

        /**
         * Decodes a hit_fish_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.hit_fish_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.hit_fish_req} hit_fish_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        hit_fish_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a hit_fish_req message.
         * @function verify
         * @memberof RoomMsg.hit_fish_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        hit_fish_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.bullet_multi))
                return "bullet_multi: integer expected";
            if (message.fish_id != null && message.hasOwnProperty("fish_id")) {
                if (!Array.isArray(message.fish_id))
                    return "fish_id: array expected";
                for (var i = 0; i < message.fish_id.length; ++i)
                    if (!$util.isInteger(message.fish_id[i]) && !(message.fish_id[i] && $util.isInteger(message.fish_id[i].low) && $util.isInteger(message.fish_id[i].high)))
                        return "fish_id: integer|Long[] expected";
            }
            if (message.related_fish != null && message.hasOwnProperty("related_fish")) {
                if (!Array.isArray(message.related_fish))
                    return "related_fish: array expected";
                for (var i = 0; i < message.related_fish.length; ++i)
                    if (!$util.isInteger(message.related_fish[i]) && !(message.related_fish[i] && $util.isInteger(message.related_fish[i].low) && $util.isInteger(message.related_fish[i].high)))
                        return "related_fish: integer|Long[] expected";
            }
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (message.weapon_type != null && message.hasOwnProperty("weapon_type"))
                if (!$util.isInteger(message.weapon_type))
                    return "weapon_type: integer expected";
            return null;
        };

        return hit_fish_req;
    })();

    RoomMsg.related_fish = (function() {

        /**
         * Properties of a related_fish.
         * @memberof RoomMsg
         * @interface Irelated_fish
         * @property {number|Long} fish_id related_fish fish_id
         * @property {Array.<number|Long>|null} [fish] related_fish fish
         */

        /**
         * Constructs a new related_fish.
         * @memberof RoomMsg
         * @classdesc Represents a related_fish.
         * @implements Irelated_fish
         * @constructor
         * @param {RoomMsg.Irelated_fish=} [properties] Properties to set
         */
        function related_fish(properties) {
            this.fish = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * related_fish fish_id.
         * @member {number|Long} fish_id
         * @memberof RoomMsg.related_fish
         * @instance
         */
        related_fish.prototype.fish_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * related_fish fish.
         * @member {Array.<number|Long>} fish
         * @memberof RoomMsg.related_fish
         * @instance
         */
        related_fish.prototype.fish = $util.emptyArray;

        /**
         * Creates a new related_fish instance using the specified properties.
         * @function create
         * @memberof RoomMsg.related_fish
         * @static
         * @param {RoomMsg.Irelated_fish=} [properties] Properties to set
         * @returns {RoomMsg.related_fish} related_fish instance
         */
        related_fish.create = function create(properties) {
            return new related_fish(properties);
        };

        /**
         * Encodes the specified related_fish message. Does not implicitly {@link RoomMsg.related_fish.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.related_fish
         * @static
         * @param {RoomMsg.Irelated_fish} message related_fish message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        related_fish.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.fish_id);
            if (message.fish != null && message.fish.length)
                for (var i = 0; i < message.fish.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fish[i]);
            return writer;
        };

        /**
         * Encodes the specified related_fish message, length delimited. Does not implicitly {@link RoomMsg.related_fish.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.related_fish
         * @static
         * @param {RoomMsg.Irelated_fish} message related_fish message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        related_fish.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a related_fish message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.related_fish
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.related_fish} related_fish
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        related_fish.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.related_fish();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fish_id = reader.uint64();
                    break;
                case 2:
                    if (!(message.fish && message.fish.length))
                        message.fish = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.fish.push(reader.uint64());
                    } else
                        message.fish.push(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fish_id"))
                throw $util.ProtocolError("missing required 'fish_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a related_fish message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.related_fish
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.related_fish} related_fish
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        related_fish.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a related_fish message.
         * @function verify
         * @memberof RoomMsg.related_fish
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        related_fish.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fish_id) && !(message.fish_id && $util.isInteger(message.fish_id.low) && $util.isInteger(message.fish_id.high)))
                return "fish_id: integer|Long expected";
            if (message.fish != null && message.hasOwnProperty("fish")) {
                if (!Array.isArray(message.fish))
                    return "fish: array expected";
                for (var i = 0; i < message.fish.length; ++i)
                    if (!$util.isInteger(message.fish[i]) && !(message.fish[i] && $util.isInteger(message.fish[i].low) && $util.isInteger(message.fish[i].high)))
                        return "fish: integer|Long[] expected";
            }
            return null;
        };

        return related_fish;
    })();

    RoomMsg.hit_fish_resp = (function() {

        /**
         * Properties of a hit_fish_resp.
         * @memberof RoomMsg
         * @interface Ihit_fish_resp
         * @property {RoomMsg.msg_room_code} code hit_fish_resp code
         */

        /**
         * Constructs a new hit_fish_resp.
         * @memberof RoomMsg
         * @classdesc Represents a hit_fish_resp.
         * @implements Ihit_fish_resp
         * @constructor
         * @param {RoomMsg.Ihit_fish_resp=} [properties] Properties to set
         */
        function hit_fish_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * hit_fish_resp code.
         * @member {RoomMsg.msg_room_code} code
         * @memberof RoomMsg.hit_fish_resp
         * @instance
         */
        hit_fish_resp.prototype.code = 1;

        /**
         * Creates a new hit_fish_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.hit_fish_resp
         * @static
         * @param {RoomMsg.Ihit_fish_resp=} [properties] Properties to set
         * @returns {RoomMsg.hit_fish_resp} hit_fish_resp instance
         */
        hit_fish_resp.create = function create(properties) {
            return new hit_fish_resp(properties);
        };

        /**
         * Encodes the specified hit_fish_resp message. Does not implicitly {@link RoomMsg.hit_fish_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.hit_fish_resp
         * @static
         * @param {RoomMsg.Ihit_fish_resp} message hit_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hit_fish_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified hit_fish_resp message, length delimited. Does not implicitly {@link RoomMsg.hit_fish_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.hit_fish_resp
         * @static
         * @param {RoomMsg.Ihit_fish_resp} message hit_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hit_fish_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a hit_fish_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.hit_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.hit_fish_resp} hit_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        hit_fish_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.hit_fish_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a hit_fish_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.hit_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.hit_fish_resp} hit_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        hit_fish_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a hit_fish_resp message.
         * @function verify
         * @memberof RoomMsg.hit_fish_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        hit_fish_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                break;
            }
            return null;
        };

        return hit_fish_resp;
    })();

    RoomMsg.weapon_chip_resp = (function() {

        /**
         * Properties of a weapon_chip_resp.
         * @memberof RoomMsg
         * @interface Iweapon_chip_resp
         * @property {number|Long} uid weapon_chip_resp uid
         * @property {number} weapon_type weapon_chip_resp weapon_type
         * @property {number|Long} bulletid weapon_chip_resp bulletid
         * @property {number|Long} jettonshow weapon_chip_resp jettonshow
         * @property {Array.<RoomMsg.Ifish_bonus_info>|null} [dead_fish] weapon_chip_resp dead_fish
         * @property {Array.<RoomMsg.Ifish_bonus_info>|null} [dead_no_fish] weapon_chip_resp dead_no_fish
         */

        /**
         * Constructs a new weapon_chip_resp.
         * @memberof RoomMsg
         * @classdesc Represents a weapon_chip_resp.
         * @implements Iweapon_chip_resp
         * @constructor
         * @param {RoomMsg.Iweapon_chip_resp=} [properties] Properties to set
         */
        function weapon_chip_resp(properties) {
            this.dead_fish = [];
            this.dead_no_fish = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * weapon_chip_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.weapon_chip_resp
         * @instance
         */
        weapon_chip_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * weapon_chip_resp weapon_type.
         * @member {number} weapon_type
         * @memberof RoomMsg.weapon_chip_resp
         * @instance
         */
        weapon_chip_resp.prototype.weapon_type = 0;

        /**
         * weapon_chip_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.weapon_chip_resp
         * @instance
         */
        weapon_chip_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * weapon_chip_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.weapon_chip_resp
         * @instance
         */
        weapon_chip_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * weapon_chip_resp dead_fish.
         * @member {Array.<RoomMsg.Ifish_bonus_info>} dead_fish
         * @memberof RoomMsg.weapon_chip_resp
         * @instance
         */
        weapon_chip_resp.prototype.dead_fish = $util.emptyArray;

        /**
         * weapon_chip_resp dead_no_fish.
         * @member {Array.<RoomMsg.Ifish_bonus_info>} dead_no_fish
         * @memberof RoomMsg.weapon_chip_resp
         * @instance
         */
        weapon_chip_resp.prototype.dead_no_fish = $util.emptyArray;

        /**
         * Creates a new weapon_chip_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.weapon_chip_resp
         * @static
         * @param {RoomMsg.Iweapon_chip_resp=} [properties] Properties to set
         * @returns {RoomMsg.weapon_chip_resp} weapon_chip_resp instance
         */
        weapon_chip_resp.create = function create(properties) {
            return new weapon_chip_resp(properties);
        };

        /**
         * Encodes the specified weapon_chip_resp message. Does not implicitly {@link RoomMsg.weapon_chip_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.weapon_chip_resp
         * @static
         * @param {RoomMsg.Iweapon_chip_resp} message weapon_chip_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        weapon_chip_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.weapon_type);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bulletid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.jettonshow);
            if (message.dead_fish != null && message.dead_fish.length)
                for (var i = 0; i < message.dead_fish.length; ++i)
                    $root.RoomMsg.fish_bonus_info.encode(message.dead_fish[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.dead_no_fish != null && message.dead_no_fish.length)
                for (var i = 0; i < message.dead_no_fish.length; ++i)
                    $root.RoomMsg.fish_bonus_info.encode(message.dead_no_fish[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified weapon_chip_resp message, length delimited. Does not implicitly {@link RoomMsg.weapon_chip_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.weapon_chip_resp
         * @static
         * @param {RoomMsg.Iweapon_chip_resp} message weapon_chip_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        weapon_chip_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a weapon_chip_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.weapon_chip_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.weapon_chip_resp} weapon_chip_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        weapon_chip_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.weapon_chip_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.weapon_type = reader.uint32();
                    break;
                case 3:
                    message.bulletid = reader.uint64();
                    break;
                case 4:
                    message.jettonshow = reader.uint64();
                    break;
                case 5:
                    if (!(message.dead_fish && message.dead_fish.length))
                        message.dead_fish = [];
                    message.dead_fish.push($root.RoomMsg.fish_bonus_info.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.dead_no_fish && message.dead_no_fish.length))
                        message.dead_no_fish = [];
                    message.dead_no_fish.push($root.RoomMsg.fish_bonus_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("weapon_type"))
                throw $util.ProtocolError("missing required 'weapon_type'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            return message;
        };

        /**
         * Decodes a weapon_chip_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.weapon_chip_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.weapon_chip_resp} weapon_chip_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        weapon_chip_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a weapon_chip_resp message.
         * @function verify
         * @memberof RoomMsg.weapon_chip_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        weapon_chip_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.weapon_type))
                return "weapon_type: integer expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (message.dead_fish != null && message.hasOwnProperty("dead_fish")) {
                if (!Array.isArray(message.dead_fish))
                    return "dead_fish: array expected";
                for (var i = 0; i < message.dead_fish.length; ++i) {
                    var error = $root.RoomMsg.fish_bonus_info.verify(message.dead_fish[i]);
                    if (error)
                        return "dead_fish." + error;
                }
            }
            if (message.dead_no_fish != null && message.hasOwnProperty("dead_no_fish")) {
                if (!Array.isArray(message.dead_no_fish))
                    return "dead_no_fish: array expected";
                for (var i = 0; i < message.dead_no_fish.length; ++i) {
                    var error = $root.RoomMsg.fish_bonus_info.verify(message.dead_no_fish[i]);
                    if (error)
                        return "dead_no_fish." + error;
                }
            }
            return null;
        };

        return weapon_chip_resp;
    })();

    RoomMsg.fish_dead_resp = (function() {

        /**
         * Properties of a fish_dead_resp.
         * @memberof RoomMsg
         * @interface Ifish_dead_resp
         * @property {number|Long} uid fish_dead_resp uid
         * @property {Array.<RoomMsg.Ifish_bonus_info>|null} [fish_killed] fish_dead_resp fish_killed
         * @property {number|Long} bulletid fish_dead_resp bulletid
         * @property {number|Long} jettonshow fish_dead_resp jettonshow
         * @property {number|null} [bulletleft] fish_dead_resp bulletleft
         */

        /**
         * Constructs a new fish_dead_resp.
         * @memberof RoomMsg
         * @classdesc Represents a fish_dead_resp.
         * @implements Ifish_dead_resp
         * @constructor
         * @param {RoomMsg.Ifish_dead_resp=} [properties] Properties to set
         */
        function fish_dead_resp(properties) {
            this.fish_killed = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_dead_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.fish_dead_resp
         * @instance
         */
        fish_dead_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_dead_resp fish_killed.
         * @member {Array.<RoomMsg.Ifish_bonus_info>} fish_killed
         * @memberof RoomMsg.fish_dead_resp
         * @instance
         */
        fish_dead_resp.prototype.fish_killed = $util.emptyArray;

        /**
         * fish_dead_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.fish_dead_resp
         * @instance
         */
        fish_dead_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_dead_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.fish_dead_resp
         * @instance
         */
        fish_dead_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_dead_resp bulletleft.
         * @member {number} bulletleft
         * @memberof RoomMsg.fish_dead_resp
         * @instance
         */
        fish_dead_resp.prototype.bulletleft = 0;

        /**
         * Creates a new fish_dead_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_dead_resp
         * @static
         * @param {RoomMsg.Ifish_dead_resp=} [properties] Properties to set
         * @returns {RoomMsg.fish_dead_resp} fish_dead_resp instance
         */
        fish_dead_resp.create = function create(properties) {
            return new fish_dead_resp(properties);
        };

        /**
         * Encodes the specified fish_dead_resp message. Does not implicitly {@link RoomMsg.fish_dead_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_dead_resp
         * @static
         * @param {RoomMsg.Ifish_dead_resp} message fish_dead_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_dead_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.fish_killed != null && message.fish_killed.length)
                for (var i = 0; i < message.fish_killed.length; ++i)
                    $root.RoomMsg.fish_bonus_info.encode(message.fish_killed[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bulletid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.jettonshow);
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.bulletleft);
            return writer;
        };

        /**
         * Encodes the specified fish_dead_resp message, length delimited. Does not implicitly {@link RoomMsg.fish_dead_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_dead_resp
         * @static
         * @param {RoomMsg.Ifish_dead_resp} message fish_dead_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_dead_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_dead_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_dead_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_dead_resp} fish_dead_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_dead_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_dead_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    if (!(message.fish_killed && message.fish_killed.length))
                        message.fish_killed = [];
                    message.fish_killed.push($root.RoomMsg.fish_bonus_info.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.bulletid = reader.uint64();
                    break;
                case 4:
                    message.jettonshow = reader.uint64();
                    break;
                case 5:
                    message.bulletleft = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            return message;
        };

        /**
         * Decodes a fish_dead_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_dead_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_dead_resp} fish_dead_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_dead_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_dead_resp message.
         * @function verify
         * @memberof RoomMsg.fish_dead_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_dead_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (message.fish_killed != null && message.hasOwnProperty("fish_killed")) {
                if (!Array.isArray(message.fish_killed))
                    return "fish_killed: array expected";
                for (var i = 0; i < message.fish_killed.length; ++i) {
                    var error = $root.RoomMsg.fish_bonus_info.verify(message.fish_killed[i]);
                    if (error)
                        return "fish_killed." + error;
                }
            }
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                if (!$util.isInteger(message.bulletleft))
                    return "bulletleft: integer expected";
            return null;
        };

        return fish_dead_resp;
    })();

    RoomMsg.shoot_bullet_req = (function() {

        /**
         * Properties of a shoot_bullet_req.
         * @memberof RoomMsg
         * @interface Ishoot_bullet_req
         * @property {number|Long} uid shoot_bullet_req uid
         * @property {number} multi shoot_bullet_req multi
         * @property {number} angel shoot_bullet_req angel
         * @property {number|Long} time shoot_bullet_req time
         * @property {number|Long} fishid shoot_bullet_req fishid
         * @property {number|Long} bulletid shoot_bullet_req bulletid
         */

        /**
         * Constructs a new shoot_bullet_req.
         * @memberof RoomMsg
         * @classdesc Represents a shoot_bullet_req.
         * @implements Ishoot_bullet_req
         * @constructor
         * @param {RoomMsg.Ishoot_bullet_req=} [properties] Properties to set
         */
        function shoot_bullet_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shoot_bullet_req uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.shoot_bullet_req
         * @instance
         */
        shoot_bullet_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_req multi.
         * @member {number} multi
         * @memberof RoomMsg.shoot_bullet_req
         * @instance
         */
        shoot_bullet_req.prototype.multi = 0;

        /**
         * shoot_bullet_req angel.
         * @member {number} angel
         * @memberof RoomMsg.shoot_bullet_req
         * @instance
         */
        shoot_bullet_req.prototype.angel = 0;

        /**
         * shoot_bullet_req time.
         * @member {number|Long} time
         * @memberof RoomMsg.shoot_bullet_req
         * @instance
         */
        shoot_bullet_req.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_req fishid.
         * @member {number|Long} fishid
         * @memberof RoomMsg.shoot_bullet_req
         * @instance
         */
        shoot_bullet_req.prototype.fishid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_req bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.shoot_bullet_req
         * @instance
         */
        shoot_bullet_req.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new shoot_bullet_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.shoot_bullet_req
         * @static
         * @param {RoomMsg.Ishoot_bullet_req=} [properties] Properties to set
         * @returns {RoomMsg.shoot_bullet_req} shoot_bullet_req instance
         */
        shoot_bullet_req.create = function create(properties) {
            return new shoot_bullet_req(properties);
        };

        /**
         * Encodes the specified shoot_bullet_req message. Does not implicitly {@link RoomMsg.shoot_bullet_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.shoot_bullet_req
         * @static
         * @param {RoomMsg.Ishoot_bullet_req} message shoot_bullet_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shoot_bullet_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.multi);
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.angel);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.time);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.fishid);
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.bulletid);
            return writer;
        };

        /**
         * Encodes the specified shoot_bullet_req message, length delimited. Does not implicitly {@link RoomMsg.shoot_bullet_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.shoot_bullet_req
         * @static
         * @param {RoomMsg.Ishoot_bullet_req} message shoot_bullet_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shoot_bullet_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a shoot_bullet_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.shoot_bullet_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.shoot_bullet_req} shoot_bullet_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        shoot_bullet_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.shoot_bullet_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.multi = reader.uint32();
                    break;
                case 3:
                    message.angel = reader.float();
                    break;
                case 4:
                    message.time = reader.uint64();
                    break;
                case 5:
                    message.fishid = reader.uint64();
                    break;
                case 6:
                    message.bulletid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            if (!message.hasOwnProperty("angel"))
                throw $util.ProtocolError("missing required 'angel'", { instance: message });
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            if (!message.hasOwnProperty("fishid"))
                throw $util.ProtocolError("missing required 'fishid'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            return message;
        };

        /**
         * Decodes a shoot_bullet_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.shoot_bullet_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.shoot_bullet_req} shoot_bullet_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        shoot_bullet_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a shoot_bullet_req message.
         * @function verify
         * @memberof RoomMsg.shoot_bullet_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        shoot_bullet_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            if (typeof message.angel !== "number")
                return "angel: number expected";
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
            if (!$util.isInteger(message.fishid) && !(message.fishid && $util.isInteger(message.fishid.low) && $util.isInteger(message.fishid.high)))
                return "fishid: integer|Long expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            return null;
        };

        return shoot_bullet_req;
    })();

    RoomMsg.shoot_bullet_resp = (function() {

        /**
         * Properties of a shoot_bullet_resp.
         * @memberof RoomMsg
         * @interface Ishoot_bullet_resp
         * @property {number|Long} uid shoot_bullet_resp uid
         * @property {number} multi shoot_bullet_resp multi
         * @property {number} angel shoot_bullet_resp angel
         * @property {number|Long} time shoot_bullet_resp time
         * @property {number|Long} fishid shoot_bullet_resp fishid
         * @property {number|Long} bulletid shoot_bullet_resp bulletid
         * @property {number|Long} jettonshow shoot_bullet_resp jettonshow
         * @property {number|null} [bulletleft] shoot_bullet_resp bulletleft
         */

        /**
         * Constructs a new shoot_bullet_resp.
         * @memberof RoomMsg
         * @classdesc Represents a shoot_bullet_resp.
         * @implements Ishoot_bullet_resp
         * @constructor
         * @param {RoomMsg.Ishoot_bullet_resp=} [properties] Properties to set
         */
        function shoot_bullet_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shoot_bullet_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_resp multi.
         * @member {number} multi
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.multi = 0;

        /**
         * shoot_bullet_resp angel.
         * @member {number} angel
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.angel = 0;

        /**
         * shoot_bullet_resp time.
         * @member {number|Long} time
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_resp fishid.
         * @member {number|Long} fishid
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.fishid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * shoot_bullet_resp bulletleft.
         * @member {number} bulletleft
         * @memberof RoomMsg.shoot_bullet_resp
         * @instance
         */
        shoot_bullet_resp.prototype.bulletleft = 0;

        /**
         * Creates a new shoot_bullet_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.shoot_bullet_resp
         * @static
         * @param {RoomMsg.Ishoot_bullet_resp=} [properties] Properties to set
         * @returns {RoomMsg.shoot_bullet_resp} shoot_bullet_resp instance
         */
        shoot_bullet_resp.create = function create(properties) {
            return new shoot_bullet_resp(properties);
        };

        /**
         * Encodes the specified shoot_bullet_resp message. Does not implicitly {@link RoomMsg.shoot_bullet_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.shoot_bullet_resp
         * @static
         * @param {RoomMsg.Ishoot_bullet_resp} message shoot_bullet_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shoot_bullet_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.multi);
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.angel);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.time);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.fishid);
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.bulletid);
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.jettonshow);
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.bulletleft);
            return writer;
        };

        /**
         * Encodes the specified shoot_bullet_resp message, length delimited. Does not implicitly {@link RoomMsg.shoot_bullet_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.shoot_bullet_resp
         * @static
         * @param {RoomMsg.Ishoot_bullet_resp} message shoot_bullet_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shoot_bullet_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a shoot_bullet_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.shoot_bullet_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.shoot_bullet_resp} shoot_bullet_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        shoot_bullet_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.shoot_bullet_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.multi = reader.uint32();
                    break;
                case 3:
                    message.angel = reader.float();
                    break;
                case 4:
                    message.time = reader.uint64();
                    break;
                case 5:
                    message.fishid = reader.uint64();
                    break;
                case 6:
                    message.bulletid = reader.uint64();
                    break;
                case 7:
                    message.jettonshow = reader.uint64();
                    break;
                case 8:
                    message.bulletleft = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            if (!message.hasOwnProperty("angel"))
                throw $util.ProtocolError("missing required 'angel'", { instance: message });
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            if (!message.hasOwnProperty("fishid"))
                throw $util.ProtocolError("missing required 'fishid'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            return message;
        };

        /**
         * Decodes a shoot_bullet_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.shoot_bullet_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.shoot_bullet_resp} shoot_bullet_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        shoot_bullet_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a shoot_bullet_resp message.
         * @function verify
         * @memberof RoomMsg.shoot_bullet_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        shoot_bullet_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            if (typeof message.angel !== "number")
                return "angel: number expected";
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
            if (!$util.isInteger(message.fishid) && !(message.fishid && $util.isInteger(message.fishid.low) && $util.isInteger(message.fishid.high)))
                return "fishid: integer|Long expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                if (!$util.isInteger(message.bulletleft))
                    return "bulletleft: integer expected";
            return null;
        };

        return shoot_bullet_resp;
    })();

    RoomMsg.change_battery_req = (function() {

        /**
         * Properties of a change_battery_req.
         * @memberof RoomMsg
         * @interface Ichange_battery_req
         * @property {number} multi change_battery_req multi
         */

        /**
         * Constructs a new change_battery_req.
         * @memberof RoomMsg
         * @classdesc Represents a change_battery_req.
         * @implements Ichange_battery_req
         * @constructor
         * @param {RoomMsg.Ichange_battery_req=} [properties] Properties to set
         */
        function change_battery_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * change_battery_req multi.
         * @member {number} multi
         * @memberof RoomMsg.change_battery_req
         * @instance
         */
        change_battery_req.prototype.multi = 0;

        /**
         * Creates a new change_battery_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.change_battery_req
         * @static
         * @param {RoomMsg.Ichange_battery_req=} [properties] Properties to set
         * @returns {RoomMsg.change_battery_req} change_battery_req instance
         */
        change_battery_req.create = function create(properties) {
            return new change_battery_req(properties);
        };

        /**
         * Encodes the specified change_battery_req message. Does not implicitly {@link RoomMsg.change_battery_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.change_battery_req
         * @static
         * @param {RoomMsg.Ichange_battery_req} message change_battery_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        change_battery_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.multi);
            return writer;
        };

        /**
         * Encodes the specified change_battery_req message, length delimited. Does not implicitly {@link RoomMsg.change_battery_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.change_battery_req
         * @static
         * @param {RoomMsg.Ichange_battery_req} message change_battery_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        change_battery_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a change_battery_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.change_battery_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.change_battery_req} change_battery_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        change_battery_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.change_battery_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.multi = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            return message;
        };

        /**
         * Decodes a change_battery_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.change_battery_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.change_battery_req} change_battery_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        change_battery_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a change_battery_req message.
         * @function verify
         * @memberof RoomMsg.change_battery_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        change_battery_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            return null;
        };

        return change_battery_req;
    })();

    RoomMsg.change_battery_resp = (function() {

        /**
         * Properties of a change_battery_resp.
         * @memberof RoomMsg
         * @interface Ichange_battery_resp
         * @property {number|Long} uid change_battery_resp uid
         * @property {number} multi change_battery_resp multi
         */

        /**
         * Constructs a new change_battery_resp.
         * @memberof RoomMsg
         * @classdesc Represents a change_battery_resp.
         * @implements Ichange_battery_resp
         * @constructor
         * @param {RoomMsg.Ichange_battery_resp=} [properties] Properties to set
         */
        function change_battery_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * change_battery_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.change_battery_resp
         * @instance
         */
        change_battery_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * change_battery_resp multi.
         * @member {number} multi
         * @memberof RoomMsg.change_battery_resp
         * @instance
         */
        change_battery_resp.prototype.multi = 0;

        /**
         * Creates a new change_battery_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.change_battery_resp
         * @static
         * @param {RoomMsg.Ichange_battery_resp=} [properties] Properties to set
         * @returns {RoomMsg.change_battery_resp} change_battery_resp instance
         */
        change_battery_resp.create = function create(properties) {
            return new change_battery_resp(properties);
        };

        /**
         * Encodes the specified change_battery_resp message. Does not implicitly {@link RoomMsg.change_battery_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.change_battery_resp
         * @static
         * @param {RoomMsg.Ichange_battery_resp} message change_battery_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        change_battery_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.multi);
            return writer;
        };

        /**
         * Encodes the specified change_battery_resp message, length delimited. Does not implicitly {@link RoomMsg.change_battery_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.change_battery_resp
         * @static
         * @param {RoomMsg.Ichange_battery_resp} message change_battery_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        change_battery_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a change_battery_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.change_battery_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.change_battery_resp} change_battery_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        change_battery_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.change_battery_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.multi = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            return message;
        };

        /**
         * Decodes a change_battery_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.change_battery_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.change_battery_resp} change_battery_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        change_battery_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a change_battery_resp message.
         * @function verify
         * @memberof RoomMsg.change_battery_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        change_battery_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            return null;
        };

        return change_battery_resp;
    })();

    RoomMsg.leave_room_req = (function() {

        /**
         * Properties of a leave_room_req.
         * @memberof RoomMsg
         * @interface Ileave_room_req
         */

        /**
         * Constructs a new leave_room_req.
         * @memberof RoomMsg
         * @classdesc Represents a leave_room_req.
         * @implements Ileave_room_req
         * @constructor
         * @param {RoomMsg.Ileave_room_req=} [properties] Properties to set
         */
        function leave_room_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new leave_room_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.leave_room_req
         * @static
         * @param {RoomMsg.Ileave_room_req=} [properties] Properties to set
         * @returns {RoomMsg.leave_room_req} leave_room_req instance
         */
        leave_room_req.create = function create(properties) {
            return new leave_room_req(properties);
        };

        /**
         * Encodes the specified leave_room_req message. Does not implicitly {@link RoomMsg.leave_room_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.leave_room_req
         * @static
         * @param {RoomMsg.Ileave_room_req} message leave_room_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave_room_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified leave_room_req message, length delimited. Does not implicitly {@link RoomMsg.leave_room_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.leave_room_req
         * @static
         * @param {RoomMsg.Ileave_room_req} message leave_room_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave_room_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a leave_room_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.leave_room_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.leave_room_req} leave_room_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        leave_room_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.leave_room_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a leave_room_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.leave_room_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.leave_room_req} leave_room_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        leave_room_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a leave_room_req message.
         * @function verify
         * @memberof RoomMsg.leave_room_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        leave_room_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return leave_room_req;
    })();

    RoomMsg.leave_room_resp = (function() {

        /**
         * Properties of a leave_room_resp.
         * @memberof RoomMsg
         * @interface Ileave_room_resp
         * @property {number|Long} uid leave_room_resp uid
         */

        /**
         * Constructs a new leave_room_resp.
         * @memberof RoomMsg
         * @classdesc Represents a leave_room_resp.
         * @implements Ileave_room_resp
         * @constructor
         * @param {RoomMsg.Ileave_room_resp=} [properties] Properties to set
         */
        function leave_room_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * leave_room_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.leave_room_resp
         * @instance
         */
        leave_room_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new leave_room_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.leave_room_resp
         * @static
         * @param {RoomMsg.Ileave_room_resp=} [properties] Properties to set
         * @returns {RoomMsg.leave_room_resp} leave_room_resp instance
         */
        leave_room_resp.create = function create(properties) {
            return new leave_room_resp(properties);
        };

        /**
         * Encodes the specified leave_room_resp message. Does not implicitly {@link RoomMsg.leave_room_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.leave_room_resp
         * @static
         * @param {RoomMsg.Ileave_room_resp} message leave_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave_room_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified leave_room_resp message, length delimited. Does not implicitly {@link RoomMsg.leave_room_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.leave_room_resp
         * @static
         * @param {RoomMsg.Ileave_room_resp} message leave_room_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        leave_room_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a leave_room_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.leave_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.leave_room_resp} leave_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        leave_room_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.leave_room_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a leave_room_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.leave_room_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.leave_room_resp} leave_room_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        leave_room_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a leave_room_resp message.
         * @function verify
         * @memberof RoomMsg.leave_room_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        leave_room_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return leave_room_resp;
    })();

    RoomMsg.room_role_info = (function() {

        /**
         * Properties of a room_role_info.
         * @memberof RoomMsg
         * @interface Iroom_role_info
         * @property {number|Long} uid room_role_info uid
         * @property {number} position room_role_info position
         * @property {string} nickname room_role_info nickname
         * @property {number|Long} jetton room_role_info jetton
         * @property {number} bullet_multi room_role_info bullet_multi
         * @property {number} level room_role_info level
         * @property {number|Long} summon_time room_role_info summon_time
         * @property {number|Long} summon_end_time room_role_info summon_end_time
         * @property {number|Long} jetton_show room_role_info jetton_show
         * @property {number|null} [bullet_left] room_role_info bullet_left
         * @property {number|null} [score] room_role_info score
         * @property {number|null} [canvas] room_role_info canvas
         */

        /**
         * Constructs a new room_role_info.
         * @memberof RoomMsg
         * @classdesc Represents a room_role_info.
         * @implements Iroom_role_info
         * @constructor
         * @param {RoomMsg.Iroom_role_info=} [properties] Properties to set
         */
        function room_role_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * room_role_info uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * room_role_info position.
         * @member {number} position
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.position = 0;

        /**
         * room_role_info nickname.
         * @member {string} nickname
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.nickname = "";

        /**
         * room_role_info jetton.
         * @member {number|Long} jetton
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.jetton = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * room_role_info bullet_multi.
         * @member {number} bullet_multi
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.bullet_multi = 0;

        /**
         * room_role_info level.
         * @member {number} level
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.level = 0;

        /**
         * room_role_info summon_time.
         * @member {number|Long} summon_time
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.summon_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * room_role_info summon_end_time.
         * @member {number|Long} summon_end_time
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.summon_end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * room_role_info jetton_show.
         * @member {number|Long} jetton_show
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.jetton_show = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * room_role_info bullet_left.
         * @member {number} bullet_left
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.bullet_left = 0;

        /**
         * room_role_info score.
         * @member {number} score
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.score = 0;

        /**
         * room_role_info canvas.
         * @member {number} canvas
         * @memberof RoomMsg.room_role_info
         * @instance
         */
        room_role_info.prototype.canvas = 0;

        /**
         * Creates a new room_role_info instance using the specified properties.
         * @function create
         * @memberof RoomMsg.room_role_info
         * @static
         * @param {RoomMsg.Iroom_role_info=} [properties] Properties to set
         * @returns {RoomMsg.room_role_info} room_role_info instance
         */
        room_role_info.create = function create(properties) {
            return new room_role_info(properties);
        };

        /**
         * Encodes the specified room_role_info message. Does not implicitly {@link RoomMsg.room_role_info.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.room_role_info
         * @static
         * @param {RoomMsg.Iroom_role_info} message room_role_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        room_role_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.position);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.jetton);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.bullet_multi);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.level);
            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.summon_time);
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.summon_end_time);
            writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.jetton_show);
            if (message.bullet_left != null && message.hasOwnProperty("bullet_left"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.bullet_left);
            if (message.score != null && message.hasOwnProperty("score"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.score);
            if (message.canvas != null && message.hasOwnProperty("canvas"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.canvas);
            return writer;
        };

        /**
         * Encodes the specified room_role_info message, length delimited. Does not implicitly {@link RoomMsg.room_role_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.room_role_info
         * @static
         * @param {RoomMsg.Iroom_role_info} message room_role_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        room_role_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a room_role_info message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.room_role_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.room_role_info} room_role_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        room_role_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.room_role_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.position = reader.uint32();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.jetton = reader.uint64();
                    break;
                case 5:
                    message.bullet_multi = reader.uint32();
                    break;
                case 6:
                    message.level = reader.uint32();
                    break;
                case 7:
                    message.summon_time = reader.uint64();
                    break;
                case 8:
                    message.summon_end_time = reader.uint64();
                    break;
                case 9:
                    message.jetton_show = reader.uint64();
                    break;
                case 10:
                    message.bullet_left = reader.uint32();
                    break;
                case 11:
                    message.score = reader.uint32();
                    break;
                case 12:
                    message.canvas = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("position"))
                throw $util.ProtocolError("missing required 'position'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("jetton"))
                throw $util.ProtocolError("missing required 'jetton'", { instance: message });
            if (!message.hasOwnProperty("bullet_multi"))
                throw $util.ProtocolError("missing required 'bullet_multi'", { instance: message });
            if (!message.hasOwnProperty("level"))
                throw $util.ProtocolError("missing required 'level'", { instance: message });
            if (!message.hasOwnProperty("summon_time"))
                throw $util.ProtocolError("missing required 'summon_time'", { instance: message });
            if (!message.hasOwnProperty("summon_end_time"))
                throw $util.ProtocolError("missing required 'summon_end_time'", { instance: message });
            if (!message.hasOwnProperty("jetton_show"))
                throw $util.ProtocolError("missing required 'jetton_show'", { instance: message });
            return message;
        };

        /**
         * Decodes a room_role_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.room_role_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.room_role_info} room_role_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        room_role_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a room_role_info message.
         * @function verify
         * @memberof RoomMsg.room_role_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        room_role_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.position))
                return "position: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.jetton) && !(message.jetton && $util.isInteger(message.jetton.low) && $util.isInteger(message.jetton.high)))
                return "jetton: integer|Long expected";
            if (!$util.isInteger(message.bullet_multi))
                return "bullet_multi: integer expected";
            if (!$util.isInteger(message.level))
                return "level: integer expected";
            if (!$util.isInteger(message.summon_time) && !(message.summon_time && $util.isInteger(message.summon_time.low) && $util.isInteger(message.summon_time.high)))
                return "summon_time: integer|Long expected";
            if (!$util.isInteger(message.summon_end_time) && !(message.summon_end_time && $util.isInteger(message.summon_end_time.low) && $util.isInteger(message.summon_end_time.high)))
                return "summon_end_time: integer|Long expected";
            if (!$util.isInteger(message.jetton_show) && !(message.jetton_show && $util.isInteger(message.jetton_show.low) && $util.isInteger(message.jetton_show.high)))
                return "jetton_show: integer|Long expected";
            if (message.bullet_left != null && message.hasOwnProperty("bullet_left"))
                if (!$util.isInteger(message.bullet_left))
                    return "bullet_left: integer expected";
            if (message.score != null && message.hasOwnProperty("score"))
                if (!$util.isInteger(message.score))
                    return "score: integer expected";
            if (message.canvas != null && message.hasOwnProperty("canvas"))
                if (!$util.isInteger(message.canvas))
                    return "canvas: integer expected";
            return null;
        };

        return room_role_info;
    })();

    RoomMsg.fish_bonus_info = (function() {

        /**
         * Properties of a fish_bonus_info.
         * @memberof RoomMsg
         * @interface Ifish_bonus_info
         * @property {number|Long} fish_id fish_bonus_info fish_id
         * @property {number} bonus fish_bonus_info bonus
         * @property {number} reward fish_bonus_info reward
         */

        /**
         * Constructs a new fish_bonus_info.
         * @memberof RoomMsg
         * @classdesc Represents a fish_bonus_info.
         * @implements Ifish_bonus_info
         * @constructor
         * @param {RoomMsg.Ifish_bonus_info=} [properties] Properties to set
         */
        function fish_bonus_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_bonus_info fish_id.
         * @member {number|Long} fish_id
         * @memberof RoomMsg.fish_bonus_info
         * @instance
         */
        fish_bonus_info.prototype.fish_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_bonus_info bonus.
         * @member {number} bonus
         * @memberof RoomMsg.fish_bonus_info
         * @instance
         */
        fish_bonus_info.prototype.bonus = 0;

        /**
         * fish_bonus_info reward.
         * @member {number} reward
         * @memberof RoomMsg.fish_bonus_info
         * @instance
         */
        fish_bonus_info.prototype.reward = 0;

        /**
         * Creates a new fish_bonus_info instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_bonus_info
         * @static
         * @param {RoomMsg.Ifish_bonus_info=} [properties] Properties to set
         * @returns {RoomMsg.fish_bonus_info} fish_bonus_info instance
         */
        fish_bonus_info.create = function create(properties) {
            return new fish_bonus_info(properties);
        };

        /**
         * Encodes the specified fish_bonus_info message. Does not implicitly {@link RoomMsg.fish_bonus_info.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_bonus_info
         * @static
         * @param {RoomMsg.Ifish_bonus_info} message fish_bonus_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_bonus_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.fish_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.bonus);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.reward);
            return writer;
        };

        /**
         * Encodes the specified fish_bonus_info message, length delimited. Does not implicitly {@link RoomMsg.fish_bonus_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_bonus_info
         * @static
         * @param {RoomMsg.Ifish_bonus_info} message fish_bonus_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_bonus_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_bonus_info message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_bonus_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_bonus_info} fish_bonus_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_bonus_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_bonus_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fish_id = reader.uint64();
                    break;
                case 2:
                    message.bonus = reader.uint32();
                    break;
                case 3:
                    message.reward = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fish_id"))
                throw $util.ProtocolError("missing required 'fish_id'", { instance: message });
            if (!message.hasOwnProperty("bonus"))
                throw $util.ProtocolError("missing required 'bonus'", { instance: message });
            if (!message.hasOwnProperty("reward"))
                throw $util.ProtocolError("missing required 'reward'", { instance: message });
            return message;
        };

        /**
         * Decodes a fish_bonus_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_bonus_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_bonus_info} fish_bonus_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_bonus_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_bonus_info message.
         * @function verify
         * @memberof RoomMsg.fish_bonus_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_bonus_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fish_id) && !(message.fish_id && $util.isInteger(message.fish_id.low) && $util.isInteger(message.fish_id.high)))
                return "fish_id: integer|Long expected";
            if (!$util.isInteger(message.bonus))
                return "bonus: integer expected";
            if (!$util.isInteger(message.reward))
                return "reward: integer expected";
            return null;
        };

        return fish_bonus_info;
    })();

    RoomMsg.update_chips_resp = (function() {

        /**
         * Properties of an update_chips_resp.
         * @memberof RoomMsg
         * @interface Iupdate_chips_resp
         * @property {number|Long} uid update_chips_resp uid
         * @property {number|Long} chips update_chips_resp chips
         * @property {number|Long} jettonshow update_chips_resp jettonshow
         * @property {number|Long} bulletid update_chips_resp bulletid
         */

        /**
         * Constructs a new update_chips_resp.
         * @memberof RoomMsg
         * @classdesc Represents an update_chips_resp.
         * @implements Iupdate_chips_resp
         * @constructor
         * @param {RoomMsg.Iupdate_chips_resp=} [properties] Properties to set
         */
        function update_chips_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * update_chips_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.update_chips_resp
         * @instance
         */
        update_chips_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * update_chips_resp chips.
         * @member {number|Long} chips
         * @memberof RoomMsg.update_chips_resp
         * @instance
         */
        update_chips_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * update_chips_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.update_chips_resp
         * @instance
         */
        update_chips_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * update_chips_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.update_chips_resp
         * @instance
         */
        update_chips_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new update_chips_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.update_chips_resp
         * @static
         * @param {RoomMsg.Iupdate_chips_resp=} [properties] Properties to set
         * @returns {RoomMsg.update_chips_resp} update_chips_resp instance
         */
        update_chips_resp.create = function create(properties) {
            return new update_chips_resp(properties);
        };

        /**
         * Encodes the specified update_chips_resp message. Does not implicitly {@link RoomMsg.update_chips_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.update_chips_resp
         * @static
         * @param {RoomMsg.Iupdate_chips_resp} message update_chips_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_chips_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.chips);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.jettonshow);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.bulletid);
            return writer;
        };

        /**
         * Encodes the specified update_chips_resp message, length delimited. Does not implicitly {@link RoomMsg.update_chips_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.update_chips_resp
         * @static
         * @param {RoomMsg.Iupdate_chips_resp} message update_chips_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_chips_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an update_chips_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.update_chips_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.update_chips_resp} update_chips_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_chips_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.update_chips_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.chips = reader.int64();
                    break;
                case 3:
                    message.jettonshow = reader.uint64();
                    break;
                case 4:
                    message.bulletid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            return message;
        };

        /**
         * Decodes an update_chips_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.update_chips_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.update_chips_resp} update_chips_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_chips_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an update_chips_resp message.
         * @function verify
         * @memberof RoomMsg.update_chips_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        update_chips_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            return null;
        };

        return update_chips_resp;
    })();

    RoomMsg.shoot_err_resp = (function() {

        /**
         * Properties of a shoot_err_resp.
         * @memberof RoomMsg
         * @interface Ishoot_err_resp
         * @property {RoomMsg.msg_room_code} code shoot_err_resp code
         */

        /**
         * Constructs a new shoot_err_resp.
         * @memberof RoomMsg
         * @classdesc Represents a shoot_err_resp.
         * @implements Ishoot_err_resp
         * @constructor
         * @param {RoomMsg.Ishoot_err_resp=} [properties] Properties to set
         */
        function shoot_err_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * shoot_err_resp code.
         * @member {RoomMsg.msg_room_code} code
         * @memberof RoomMsg.shoot_err_resp
         * @instance
         */
        shoot_err_resp.prototype.code = 1;

        /**
         * Creates a new shoot_err_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.shoot_err_resp
         * @static
         * @param {RoomMsg.Ishoot_err_resp=} [properties] Properties to set
         * @returns {RoomMsg.shoot_err_resp} shoot_err_resp instance
         */
        shoot_err_resp.create = function create(properties) {
            return new shoot_err_resp(properties);
        };

        /**
         * Encodes the specified shoot_err_resp message. Does not implicitly {@link RoomMsg.shoot_err_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.shoot_err_resp
         * @static
         * @param {RoomMsg.Ishoot_err_resp} message shoot_err_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shoot_err_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified shoot_err_resp message, length delimited. Does not implicitly {@link RoomMsg.shoot_err_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.shoot_err_resp
         * @static
         * @param {RoomMsg.Ishoot_err_resp} message shoot_err_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        shoot_err_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a shoot_err_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.shoot_err_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.shoot_err_resp} shoot_err_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        shoot_err_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.shoot_err_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a shoot_err_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.shoot_err_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.shoot_err_resp} shoot_err_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        shoot_err_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a shoot_err_resp message.
         * @function verify
         * @memberof RoomMsg.shoot_err_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        shoot_err_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                break;
            }
            return null;
        };

        return shoot_err_resp;
    })();

    RoomMsg.battery_err_resp = (function() {

        /**
         * Properties of a battery_err_resp.
         * @memberof RoomMsg
         * @interface Ibattery_err_resp
         * @property {RoomMsg.msg_room_code} code battery_err_resp code
         */

        /**
         * Constructs a new battery_err_resp.
         * @memberof RoomMsg
         * @classdesc Represents a battery_err_resp.
         * @implements Ibattery_err_resp
         * @constructor
         * @param {RoomMsg.Ibattery_err_resp=} [properties] Properties to set
         */
        function battery_err_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * battery_err_resp code.
         * @member {RoomMsg.msg_room_code} code
         * @memberof RoomMsg.battery_err_resp
         * @instance
         */
        battery_err_resp.prototype.code = 1;

        /**
         * Creates a new battery_err_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.battery_err_resp
         * @static
         * @param {RoomMsg.Ibattery_err_resp=} [properties] Properties to set
         * @returns {RoomMsg.battery_err_resp} battery_err_resp instance
         */
        battery_err_resp.create = function create(properties) {
            return new battery_err_resp(properties);
        };

        /**
         * Encodes the specified battery_err_resp message. Does not implicitly {@link RoomMsg.battery_err_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.battery_err_resp
         * @static
         * @param {RoomMsg.Ibattery_err_resp} message battery_err_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        battery_err_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified battery_err_resp message, length delimited. Does not implicitly {@link RoomMsg.battery_err_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.battery_err_resp
         * @static
         * @param {RoomMsg.Ibattery_err_resp} message battery_err_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        battery_err_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a battery_err_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.battery_err_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.battery_err_resp} battery_err_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        battery_err_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.battery_err_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a battery_err_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.battery_err_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.battery_err_resp} battery_err_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        battery_err_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a battery_err_resp message.
         * @function verify
         * @memberof RoomMsg.battery_err_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        battery_err_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                break;
            }
            return null;
        };

        return battery_err_resp;
    })();

    RoomMsg.sync_chips_rep = (function() {

        /**
         * Properties of a sync_chips_rep.
         * @memberof RoomMsg
         * @interface Isync_chips_rep
         */

        /**
         * Constructs a new sync_chips_rep.
         * @memberof RoomMsg
         * @classdesc Represents a sync_chips_rep.
         * @implements Isync_chips_rep
         * @constructor
         * @param {RoomMsg.Isync_chips_rep=} [properties] Properties to set
         */
        function sync_chips_rep(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new sync_chips_rep instance using the specified properties.
         * @function create
         * @memberof RoomMsg.sync_chips_rep
         * @static
         * @param {RoomMsg.Isync_chips_rep=} [properties] Properties to set
         * @returns {RoomMsg.sync_chips_rep} sync_chips_rep instance
         */
        sync_chips_rep.create = function create(properties) {
            return new sync_chips_rep(properties);
        };

        /**
         * Encodes the specified sync_chips_rep message. Does not implicitly {@link RoomMsg.sync_chips_rep.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.sync_chips_rep
         * @static
         * @param {RoomMsg.Isync_chips_rep} message sync_chips_rep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sync_chips_rep.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified sync_chips_rep message, length delimited. Does not implicitly {@link RoomMsg.sync_chips_rep.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.sync_chips_rep
         * @static
         * @param {RoomMsg.Isync_chips_rep} message sync_chips_rep message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sync_chips_rep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a sync_chips_rep message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.sync_chips_rep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.sync_chips_rep} sync_chips_rep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sync_chips_rep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.sync_chips_rep();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a sync_chips_rep message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.sync_chips_rep
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.sync_chips_rep} sync_chips_rep
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sync_chips_rep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a sync_chips_rep message.
         * @function verify
         * @memberof RoomMsg.sync_chips_rep
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        sync_chips_rep.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return sync_chips_rep;
    })();

    RoomMsg.sync_chips_resp = (function() {

        /**
         * Properties of a sync_chips_resp.
         * @memberof RoomMsg
         * @interface Isync_chips_resp
         * @property {number|Long} chips sync_chips_resp chips
         */

        /**
         * Constructs a new sync_chips_resp.
         * @memberof RoomMsg
         * @classdesc Represents a sync_chips_resp.
         * @implements Isync_chips_resp
         * @constructor
         * @param {RoomMsg.Isync_chips_resp=} [properties] Properties to set
         */
        function sync_chips_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sync_chips_resp chips.
         * @member {number|Long} chips
         * @memberof RoomMsg.sync_chips_resp
         * @instance
         */
        sync_chips_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new sync_chips_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.sync_chips_resp
         * @static
         * @param {RoomMsg.Isync_chips_resp=} [properties] Properties to set
         * @returns {RoomMsg.sync_chips_resp} sync_chips_resp instance
         */
        sync_chips_resp.create = function create(properties) {
            return new sync_chips_resp(properties);
        };

        /**
         * Encodes the specified sync_chips_resp message. Does not implicitly {@link RoomMsg.sync_chips_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.sync_chips_resp
         * @static
         * @param {RoomMsg.Isync_chips_resp} message sync_chips_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sync_chips_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.chips);
            return writer;
        };

        /**
         * Encodes the specified sync_chips_resp message, length delimited. Does not implicitly {@link RoomMsg.sync_chips_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.sync_chips_resp
         * @static
         * @param {RoomMsg.Isync_chips_resp} message sync_chips_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sync_chips_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a sync_chips_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.sync_chips_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.sync_chips_resp} sync_chips_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sync_chips_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.sync_chips_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.chips = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a sync_chips_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.sync_chips_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.sync_chips_resp} sync_chips_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sync_chips_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a sync_chips_resp message.
         * @function verify
         * @memberof RoomMsg.sync_chips_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        sync_chips_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            return null;
        };

        return sync_chips_resp;
    })();

    RoomMsg.mq_sync_chips_resp = (function() {

        /**
         * Properties of a mq_sync_chips_resp.
         * @memberof RoomMsg
         * @interface Imq_sync_chips_resp
         * @property {number|Long} chips mq_sync_chips_resp chips
         */

        /**
         * Constructs a new mq_sync_chips_resp.
         * @memberof RoomMsg
         * @classdesc Represents a mq_sync_chips_resp.
         * @implements Imq_sync_chips_resp
         * @constructor
         * @param {RoomMsg.Imq_sync_chips_resp=} [properties] Properties to set
         */
        function mq_sync_chips_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * mq_sync_chips_resp chips.
         * @member {number|Long} chips
         * @memberof RoomMsg.mq_sync_chips_resp
         * @instance
         */
        mq_sync_chips_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new mq_sync_chips_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.mq_sync_chips_resp
         * @static
         * @param {RoomMsg.Imq_sync_chips_resp=} [properties] Properties to set
         * @returns {RoomMsg.mq_sync_chips_resp} mq_sync_chips_resp instance
         */
        mq_sync_chips_resp.create = function create(properties) {
            return new mq_sync_chips_resp(properties);
        };

        /**
         * Encodes the specified mq_sync_chips_resp message. Does not implicitly {@link RoomMsg.mq_sync_chips_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.mq_sync_chips_resp
         * @static
         * @param {RoomMsg.Imq_sync_chips_resp} message mq_sync_chips_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        mq_sync_chips_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.chips);
            return writer;
        };

        /**
         * Encodes the specified mq_sync_chips_resp message, length delimited. Does not implicitly {@link RoomMsg.mq_sync_chips_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.mq_sync_chips_resp
         * @static
         * @param {RoomMsg.Imq_sync_chips_resp} message mq_sync_chips_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        mq_sync_chips_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a mq_sync_chips_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.mq_sync_chips_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.mq_sync_chips_resp} mq_sync_chips_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        mq_sync_chips_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.mq_sync_chips_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.chips = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            return message;
        };

        /**
         * Decodes a mq_sync_chips_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.mq_sync_chips_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.mq_sync_chips_resp} mq_sync_chips_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        mq_sync_chips_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a mq_sync_chips_resp message.
         * @function verify
         * @memberof RoomMsg.mq_sync_chips_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        mq_sync_chips_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            return null;
        };

        return mq_sync_chips_resp;
    })();

    RoomMsg.novice_prompt_req = (function() {

        /**
         * Properties of a novice_prompt_req.
         * @memberof RoomMsg
         * @interface Inovice_prompt_req
         */

        /**
         * Constructs a new novice_prompt_req.
         * @memberof RoomMsg
         * @classdesc Represents a novice_prompt_req.
         * @implements Inovice_prompt_req
         * @constructor
         * @param {RoomMsg.Inovice_prompt_req=} [properties] Properties to set
         */
        function novice_prompt_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new novice_prompt_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.novice_prompt_req
         * @static
         * @param {RoomMsg.Inovice_prompt_req=} [properties] Properties to set
         * @returns {RoomMsg.novice_prompt_req} novice_prompt_req instance
         */
        novice_prompt_req.create = function create(properties) {
            return new novice_prompt_req(properties);
        };

        /**
         * Encodes the specified novice_prompt_req message. Does not implicitly {@link RoomMsg.novice_prompt_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.novice_prompt_req
         * @static
         * @param {RoomMsg.Inovice_prompt_req} message novice_prompt_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        novice_prompt_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified novice_prompt_req message, length delimited. Does not implicitly {@link RoomMsg.novice_prompt_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.novice_prompt_req
         * @static
         * @param {RoomMsg.Inovice_prompt_req} message novice_prompt_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        novice_prompt_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a novice_prompt_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.novice_prompt_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.novice_prompt_req} novice_prompt_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        novice_prompt_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.novice_prompt_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a novice_prompt_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.novice_prompt_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.novice_prompt_req} novice_prompt_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        novice_prompt_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a novice_prompt_req message.
         * @function verify
         * @memberof RoomMsg.novice_prompt_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        novice_prompt_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return novice_prompt_req;
    })();

    RoomMsg.bullet_useless_req = (function() {

        /**
         * Properties of a bullet_useless_req.
         * @memberof RoomMsg
         * @interface Ibullet_useless_req
         * @property {number|Long} uid bullet_useless_req uid
         * @property {number} multi bullet_useless_req multi
         * @property {number|Long} bulletid bullet_useless_req bulletid
         */

        /**
         * Constructs a new bullet_useless_req.
         * @memberof RoomMsg
         * @classdesc Represents a bullet_useless_req.
         * @implements Ibullet_useless_req
         * @constructor
         * @param {RoomMsg.Ibullet_useless_req=} [properties] Properties to set
         */
        function bullet_useless_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bullet_useless_req uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.bullet_useless_req
         * @instance
         */
        bullet_useless_req.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_useless_req multi.
         * @member {number} multi
         * @memberof RoomMsg.bullet_useless_req
         * @instance
         */
        bullet_useless_req.prototype.multi = 0;

        /**
         * bullet_useless_req bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.bullet_useless_req
         * @instance
         */
        bullet_useless_req.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new bullet_useless_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.bullet_useless_req
         * @static
         * @param {RoomMsg.Ibullet_useless_req=} [properties] Properties to set
         * @returns {RoomMsg.bullet_useless_req} bullet_useless_req instance
         */
        bullet_useless_req.create = function create(properties) {
            return new bullet_useless_req(properties);
        };

        /**
         * Encodes the specified bullet_useless_req message. Does not implicitly {@link RoomMsg.bullet_useless_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.bullet_useless_req
         * @static
         * @param {RoomMsg.Ibullet_useless_req} message bullet_useless_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bullet_useless_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.multi);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bulletid);
            return writer;
        };

        /**
         * Encodes the specified bullet_useless_req message, length delimited. Does not implicitly {@link RoomMsg.bullet_useless_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.bullet_useless_req
         * @static
         * @param {RoomMsg.Ibullet_useless_req} message bullet_useless_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bullet_useless_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bullet_useless_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.bullet_useless_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.bullet_useless_req} bullet_useless_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bullet_useless_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.bullet_useless_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.multi = reader.uint32();
                    break;
                case 3:
                    message.bulletid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            return message;
        };

        /**
         * Decodes a bullet_useless_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.bullet_useless_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.bullet_useless_req} bullet_useless_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bullet_useless_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bullet_useless_req message.
         * @function verify
         * @memberof RoomMsg.bullet_useless_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bullet_useless_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            return null;
        };

        return bullet_useless_req;
    })();

    RoomMsg.bullet_useless_resp = (function() {

        /**
         * Properties of a bullet_useless_resp.
         * @memberof RoomMsg
         * @interface Ibullet_useless_resp
         * @property {number|Long} uid bullet_useless_resp uid
         * @property {number|Long} jettonshow bullet_useless_resp jettonshow
         * @property {number|Long} bulletid bullet_useless_resp bulletid
         * @property {number} multi bullet_useless_resp multi
         * @property {number|null} [bulletleft] bullet_useless_resp bulletleft
         */

        /**
         * Constructs a new bullet_useless_resp.
         * @memberof RoomMsg
         * @classdesc Represents a bullet_useless_resp.
         * @implements Ibullet_useless_resp
         * @constructor
         * @param {RoomMsg.Ibullet_useless_resp=} [properties] Properties to set
         */
        function bullet_useless_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bullet_useless_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.bullet_useless_resp
         * @instance
         */
        bullet_useless_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_useless_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.bullet_useless_resp
         * @instance
         */
        bullet_useless_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_useless_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.bullet_useless_resp
         * @instance
         */
        bullet_useless_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_useless_resp multi.
         * @member {number} multi
         * @memberof RoomMsg.bullet_useless_resp
         * @instance
         */
        bullet_useless_resp.prototype.multi = 0;

        /**
         * bullet_useless_resp bulletleft.
         * @member {number} bulletleft
         * @memberof RoomMsg.bullet_useless_resp
         * @instance
         */
        bullet_useless_resp.prototype.bulletleft = 0;

        /**
         * Creates a new bullet_useless_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.bullet_useless_resp
         * @static
         * @param {RoomMsg.Ibullet_useless_resp=} [properties] Properties to set
         * @returns {RoomMsg.bullet_useless_resp} bullet_useless_resp instance
         */
        bullet_useless_resp.create = function create(properties) {
            return new bullet_useless_resp(properties);
        };

        /**
         * Encodes the specified bullet_useless_resp message. Does not implicitly {@link RoomMsg.bullet_useless_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.bullet_useless_resp
         * @static
         * @param {RoomMsg.Ibullet_useless_resp} message bullet_useless_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bullet_useless_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.jettonshow);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bulletid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.multi);
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.bulletleft);
            return writer;
        };

        /**
         * Encodes the specified bullet_useless_resp message, length delimited. Does not implicitly {@link RoomMsg.bullet_useless_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.bullet_useless_resp
         * @static
         * @param {RoomMsg.Ibullet_useless_resp} message bullet_useless_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bullet_useless_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bullet_useless_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.bullet_useless_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.bullet_useless_resp} bullet_useless_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bullet_useless_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.bullet_useless_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.jettonshow = reader.uint64();
                    break;
                case 3:
                    message.bulletid = reader.uint64();
                    break;
                case 4:
                    message.multi = reader.uint32();
                    break;
                case 5:
                    message.bulletleft = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            return message;
        };

        /**
         * Decodes a bullet_useless_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.bullet_useless_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.bullet_useless_resp} bullet_useless_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bullet_useless_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bullet_useless_resp message.
         * @function verify
         * @memberof RoomMsg.bullet_useless_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bullet_useless_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                if (!$util.isInteger(message.bulletleft))
                    return "bulletleft: integer expected";
            return null;
        };

        return bullet_useless_resp;
    })();

    RoomMsg.bullet_pass_resp = (function() {

        /**
         * Properties of a bullet_pass_resp.
         * @memberof RoomMsg
         * @interface Ibullet_pass_resp
         * @property {number|Long} uid bullet_pass_resp uid
         * @property {number|Long} bulletid bullet_pass_resp bulletid
         * @property {number|Long} jettonshow bullet_pass_resp jettonshow
         * @property {number} multi bullet_pass_resp multi
         * @property {number|null} [bulletleft] bullet_pass_resp bulletleft
         */

        /**
         * Constructs a new bullet_pass_resp.
         * @memberof RoomMsg
         * @classdesc Represents a bullet_pass_resp.
         * @implements Ibullet_pass_resp
         * @constructor
         * @param {RoomMsg.Ibullet_pass_resp=} [properties] Properties to set
         */
        function bullet_pass_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * bullet_pass_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.bullet_pass_resp
         * @instance
         */
        bullet_pass_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_pass_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.bullet_pass_resp
         * @instance
         */
        bullet_pass_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_pass_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.bullet_pass_resp
         * @instance
         */
        bullet_pass_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * bullet_pass_resp multi.
         * @member {number} multi
         * @memberof RoomMsg.bullet_pass_resp
         * @instance
         */
        bullet_pass_resp.prototype.multi = 0;

        /**
         * bullet_pass_resp bulletleft.
         * @member {number} bulletleft
         * @memberof RoomMsg.bullet_pass_resp
         * @instance
         */
        bullet_pass_resp.prototype.bulletleft = 0;

        /**
         * Creates a new bullet_pass_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.bullet_pass_resp
         * @static
         * @param {RoomMsg.Ibullet_pass_resp=} [properties] Properties to set
         * @returns {RoomMsg.bullet_pass_resp} bullet_pass_resp instance
         */
        bullet_pass_resp.create = function create(properties) {
            return new bullet_pass_resp(properties);
        };

        /**
         * Encodes the specified bullet_pass_resp message. Does not implicitly {@link RoomMsg.bullet_pass_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.bullet_pass_resp
         * @static
         * @param {RoomMsg.Ibullet_pass_resp} message bullet_pass_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bullet_pass_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.bulletid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.jettonshow);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.multi);
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.bulletleft);
            return writer;
        };

        /**
         * Encodes the specified bullet_pass_resp message, length delimited. Does not implicitly {@link RoomMsg.bullet_pass_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.bullet_pass_resp
         * @static
         * @param {RoomMsg.Ibullet_pass_resp} message bullet_pass_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        bullet_pass_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a bullet_pass_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.bullet_pass_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.bullet_pass_resp} bullet_pass_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bullet_pass_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.bullet_pass_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.bulletid = reader.uint64();
                    break;
                case 3:
                    message.jettonshow = reader.uint64();
                    break;
                case 4:
                    message.multi = reader.uint32();
                    break;
                case 5:
                    message.bulletleft = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            if (!message.hasOwnProperty("multi"))
                throw $util.ProtocolError("missing required 'multi'", { instance: message });
            return message;
        };

        /**
         * Decodes a bullet_pass_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.bullet_pass_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.bullet_pass_resp} bullet_pass_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        bullet_pass_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a bullet_pass_resp message.
         * @function verify
         * @memberof RoomMsg.bullet_pass_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        bullet_pass_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            if (!$util.isInteger(message.multi))
                return "multi: integer expected";
            if (message.bulletleft != null && message.hasOwnProperty("bulletleft"))
                if (!$util.isInteger(message.bulletleft))
                    return "bulletleft: integer expected";
            return null;
        };

        return bullet_pass_resp;
    })();

    RoomMsg.sync_jp_jetton_resp = (function() {

        /**
         * Properties of a sync_jp_jetton_resp.
         * @memberof RoomMsg
         * @interface Isync_jp_jetton_resp
         * @property {number|Long} uid sync_jp_jetton_resp uid
         * @property {number|Long} bulletid sync_jp_jetton_resp bulletid
         * @property {number|Long} jettonshow sync_jp_jetton_resp jettonshow
         */

        /**
         * Constructs a new sync_jp_jetton_resp.
         * @memberof RoomMsg
         * @classdesc Represents a sync_jp_jetton_resp.
         * @implements Isync_jp_jetton_resp
         * @constructor
         * @param {RoomMsg.Isync_jp_jetton_resp=} [properties] Properties to set
         */
        function sync_jp_jetton_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sync_jp_jetton_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @instance
         */
        sync_jp_jetton_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * sync_jp_jetton_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @instance
         */
        sync_jp_jetton_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * sync_jp_jetton_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @instance
         */
        sync_jp_jetton_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new sync_jp_jetton_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @static
         * @param {RoomMsg.Isync_jp_jetton_resp=} [properties] Properties to set
         * @returns {RoomMsg.sync_jp_jetton_resp} sync_jp_jetton_resp instance
         */
        sync_jp_jetton_resp.create = function create(properties) {
            return new sync_jp_jetton_resp(properties);
        };

        /**
         * Encodes the specified sync_jp_jetton_resp message. Does not implicitly {@link RoomMsg.sync_jp_jetton_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @static
         * @param {RoomMsg.Isync_jp_jetton_resp} message sync_jp_jetton_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sync_jp_jetton_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.bulletid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.jettonshow);
            return writer;
        };

        /**
         * Encodes the specified sync_jp_jetton_resp message, length delimited. Does not implicitly {@link RoomMsg.sync_jp_jetton_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @static
         * @param {RoomMsg.Isync_jp_jetton_resp} message sync_jp_jetton_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sync_jp_jetton_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a sync_jp_jetton_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.sync_jp_jetton_resp} sync_jp_jetton_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sync_jp_jetton_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.sync_jp_jetton_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.bulletid = reader.uint64();
                    break;
                case 3:
                    message.jettonshow = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            return message;
        };

        /**
         * Decodes a sync_jp_jetton_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.sync_jp_jetton_resp} sync_jp_jetton_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sync_jp_jetton_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a sync_jp_jetton_resp message.
         * @function verify
         * @memberof RoomMsg.sync_jp_jetton_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        sync_jp_jetton_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            return null;
        };

        return sync_jp_jetton_resp;
    })();

    RoomMsg.fish_matrix = (function() {

        /**
         * Properties of a fish_matrix.
         * @memberof RoomMsg
         * @interface Ifish_matrix
         * @property {number} type fish_matrix type
         * @property {number|Long} id fish_matrix id
         * @property {number} postion_id fish_matrix postion_id
         * @property {number|null} [hp] fish_matrix hp
         * @property {number|Long|null} [owner_id] fish_matrix owner_id
         */

        /**
         * Constructs a new fish_matrix.
         * @memberof RoomMsg
         * @classdesc Represents a fish_matrix.
         * @implements Ifish_matrix
         * @constructor
         * @param {RoomMsg.Ifish_matrix=} [properties] Properties to set
         */
        function fish_matrix(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_matrix type.
         * @member {number} type
         * @memberof RoomMsg.fish_matrix
         * @instance
         */
        fish_matrix.prototype.type = 0;

        /**
         * fish_matrix id.
         * @member {number|Long} id
         * @memberof RoomMsg.fish_matrix
         * @instance
         */
        fish_matrix.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_matrix postion_id.
         * @member {number} postion_id
         * @memberof RoomMsg.fish_matrix
         * @instance
         */
        fish_matrix.prototype.postion_id = 0;

        /**
         * fish_matrix hp.
         * @member {number} hp
         * @memberof RoomMsg.fish_matrix
         * @instance
         */
        fish_matrix.prototype.hp = 0;

        /**
         * fish_matrix owner_id.
         * @member {number|Long} owner_id
         * @memberof RoomMsg.fish_matrix
         * @instance
         */
        fish_matrix.prototype.owner_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new fish_matrix instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_matrix
         * @static
         * @param {RoomMsg.Ifish_matrix=} [properties] Properties to set
         * @returns {RoomMsg.fish_matrix} fish_matrix instance
         */
        fish_matrix.create = function create(properties) {
            return new fish_matrix(properties);
        };

        /**
         * Encodes the specified fish_matrix message. Does not implicitly {@link RoomMsg.fish_matrix.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_matrix
         * @static
         * @param {RoomMsg.Ifish_matrix} message fish_matrix message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_matrix.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.postion_id);
            if (message.hp != null && message.hasOwnProperty("hp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.hp);
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.owner_id);
            return writer;
        };

        /**
         * Encodes the specified fish_matrix message, length delimited. Does not implicitly {@link RoomMsg.fish_matrix.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_matrix
         * @static
         * @param {RoomMsg.Ifish_matrix} message fish_matrix message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_matrix.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_matrix message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_matrix
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_matrix} fish_matrix
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_matrix.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_matrix();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                case 2:
                    message.id = reader.uint64();
                    break;
                case 3:
                    message.postion_id = reader.uint32();
                    break;
                case 4:
                    message.hp = reader.uint32();
                    break;
                case 5:
                    message.owner_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("postion_id"))
                throw $util.ProtocolError("missing required 'postion_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a fish_matrix message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_matrix
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_matrix} fish_matrix
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_matrix.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_matrix message.
         * @function verify
         * @memberof RoomMsg.fish_matrix
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_matrix.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
            if (!$util.isInteger(message.postion_id))
                return "postion_id: integer expected";
            if (message.hp != null && message.hasOwnProperty("hp"))
                if (!$util.isInteger(message.hp))
                    return "hp: integer expected";
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                if (!$util.isInteger(message.owner_id) && !(message.owner_id && $util.isInteger(message.owner_id.low) && $util.isInteger(message.owner_id.high)))
                    return "owner_id: integer|Long expected";
            return null;
        };

        return fish_matrix;
    })();

    RoomMsg.fish_matrix_resp = (function() {

        /**
         * Properties of a fish_matrix_resp.
         * @memberof RoomMsg
         * @interface Ifish_matrix_resp
         * @property {number|Long} matrixid fish_matrix_resp matrixid
         * @property {number} type fish_matrix_resp type
         * @property {number} path_id fish_matrix_resp path_id
         * @property {number} speed fish_matrix_resp speed
         * @property {number|Long|null} [create_time_ms] fish_matrix_resp create_time_ms
         * @property {Array.<RoomMsg.Ifish_matrix>|null} [fish_list] fish_matrix_resp fish_list
         */

        /**
         * Constructs a new fish_matrix_resp.
         * @memberof RoomMsg
         * @classdesc Represents a fish_matrix_resp.
         * @implements Ifish_matrix_resp
         * @constructor
         * @param {RoomMsg.Ifish_matrix_resp=} [properties] Properties to set
         */
        function fish_matrix_resp(properties) {
            this.fish_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_matrix_resp matrixid.
         * @member {number|Long} matrixid
         * @memberof RoomMsg.fish_matrix_resp
         * @instance
         */
        fish_matrix_resp.prototype.matrixid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_matrix_resp type.
         * @member {number} type
         * @memberof RoomMsg.fish_matrix_resp
         * @instance
         */
        fish_matrix_resp.prototype.type = 0;

        /**
         * fish_matrix_resp path_id.
         * @member {number} path_id
         * @memberof RoomMsg.fish_matrix_resp
         * @instance
         */
        fish_matrix_resp.prototype.path_id = 0;

        /**
         * fish_matrix_resp speed.
         * @member {number} speed
         * @memberof RoomMsg.fish_matrix_resp
         * @instance
         */
        fish_matrix_resp.prototype.speed = 0;

        /**
         * fish_matrix_resp create_time_ms.
         * @member {number|Long} create_time_ms
         * @memberof RoomMsg.fish_matrix_resp
         * @instance
         */
        fish_matrix_resp.prototype.create_time_ms = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * fish_matrix_resp fish_list.
         * @member {Array.<RoomMsg.Ifish_matrix>} fish_list
         * @memberof RoomMsg.fish_matrix_resp
         * @instance
         */
        fish_matrix_resp.prototype.fish_list = $util.emptyArray;

        /**
         * Creates a new fish_matrix_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_matrix_resp
         * @static
         * @param {RoomMsg.Ifish_matrix_resp=} [properties] Properties to set
         * @returns {RoomMsg.fish_matrix_resp} fish_matrix_resp instance
         */
        fish_matrix_resp.create = function create(properties) {
            return new fish_matrix_resp(properties);
        };

        /**
         * Encodes the specified fish_matrix_resp message. Does not implicitly {@link RoomMsg.fish_matrix_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_matrix_resp
         * @static
         * @param {RoomMsg.Ifish_matrix_resp} message fish_matrix_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_matrix_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.matrixid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path_id);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.speed);
            if (message.create_time_ms != null && message.hasOwnProperty("create_time_ms"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.create_time_ms);
            if (message.fish_list != null && message.fish_list.length)
                for (var i = 0; i < message.fish_list.length; ++i)
                    $root.RoomMsg.fish_matrix.encode(message.fish_list[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified fish_matrix_resp message, length delimited. Does not implicitly {@link RoomMsg.fish_matrix_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_matrix_resp
         * @static
         * @param {RoomMsg.Ifish_matrix_resp} message fish_matrix_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_matrix_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_matrix_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_matrix_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_matrix_resp} fish_matrix_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_matrix_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_matrix_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.matrixid = reader.uint64();
                    break;
                case 2:
                    message.type = reader.uint32();
                    break;
                case 3:
                    message.path_id = reader.uint32();
                    break;
                case 4:
                    message.speed = reader.uint32();
                    break;
                case 5:
                    message.create_time_ms = reader.uint64();
                    break;
                case 6:
                    if (!(message.fish_list && message.fish_list.length))
                        message.fish_list = [];
                    message.fish_list.push($root.RoomMsg.fish_matrix.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("matrixid"))
                throw $util.ProtocolError("missing required 'matrixid'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("path_id"))
                throw $util.ProtocolError("missing required 'path_id'", { instance: message });
            if (!message.hasOwnProperty("speed"))
                throw $util.ProtocolError("missing required 'speed'", { instance: message });
            return message;
        };

        /**
         * Decodes a fish_matrix_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_matrix_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_matrix_resp} fish_matrix_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_matrix_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_matrix_resp message.
         * @function verify
         * @memberof RoomMsg.fish_matrix_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_matrix_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.matrixid) && !(message.matrixid && $util.isInteger(message.matrixid.low) && $util.isInteger(message.matrixid.high)))
                return "matrixid: integer|Long expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.path_id))
                return "path_id: integer expected";
            if (!$util.isInteger(message.speed))
                return "speed: integer expected";
            if (message.create_time_ms != null && message.hasOwnProperty("create_time_ms"))
                if (!$util.isInteger(message.create_time_ms) && !(message.create_time_ms && $util.isInteger(message.create_time_ms.low) && $util.isInteger(message.create_time_ms.high)))
                    return "create_time_ms: integer|Long expected";
            if (message.fish_list != null && message.hasOwnProperty("fish_list")) {
                if (!Array.isArray(message.fish_list))
                    return "fish_list: array expected";
                for (var i = 0; i < message.fish_list.length; ++i) {
                    var error = $root.RoomMsg.fish_matrix.verify(message.fish_list[i]);
                    if (error)
                        return "fish_list." + error;
                }
            }
            return null;
        };

        return fish_matrix_resp;
    })();

    RoomMsg.wave_matrix = (function() {

        /**
         * Properties of a wave_matrix.
         * @memberof RoomMsg
         * @interface Iwave_matrix
         * @property {number} fish_id wave_matrix fish_id
         * @property {number|Long} uid wave_matrix uid
         */

        /**
         * Constructs a new wave_matrix.
         * @memberof RoomMsg
         * @classdesc Represents a wave_matrix.
         * @implements Iwave_matrix
         * @constructor
         * @param {RoomMsg.Iwave_matrix=} [properties] Properties to set
         */
        function wave_matrix(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * wave_matrix fish_id.
         * @member {number} fish_id
         * @memberof RoomMsg.wave_matrix
         * @instance
         */
        wave_matrix.prototype.fish_id = 0;

        /**
         * wave_matrix uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.wave_matrix
         * @instance
         */
        wave_matrix.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new wave_matrix instance using the specified properties.
         * @function create
         * @memberof RoomMsg.wave_matrix
         * @static
         * @param {RoomMsg.Iwave_matrix=} [properties] Properties to set
         * @returns {RoomMsg.wave_matrix} wave_matrix instance
         */
        wave_matrix.create = function create(properties) {
            return new wave_matrix(properties);
        };

        /**
         * Encodes the specified wave_matrix message. Does not implicitly {@link RoomMsg.wave_matrix.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.wave_matrix
         * @static
         * @param {RoomMsg.Iwave_matrix} message wave_matrix message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wave_matrix.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fish_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.uid);
            return writer;
        };

        /**
         * Encodes the specified wave_matrix message, length delimited. Does not implicitly {@link RoomMsg.wave_matrix.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.wave_matrix
         * @static
         * @param {RoomMsg.Iwave_matrix} message wave_matrix message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wave_matrix.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a wave_matrix message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.wave_matrix
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.wave_matrix} wave_matrix
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wave_matrix.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.wave_matrix();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fish_id = reader.uint32();
                    break;
                case 2:
                    message.uid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fish_id"))
                throw $util.ProtocolError("missing required 'fish_id'", { instance: message });
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            return message;
        };

        /**
         * Decodes a wave_matrix message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.wave_matrix
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.wave_matrix} wave_matrix
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wave_matrix.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a wave_matrix message.
         * @function verify
         * @memberof RoomMsg.wave_matrix
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        wave_matrix.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fish_id))
                return "fish_id: integer expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            return null;
        };

        return wave_matrix;
    })();

    RoomMsg.wave_matrix_resp = (function() {

        /**
         * Properties of a wave_matrix_resp.
         * @memberof RoomMsg
         * @interface Iwave_matrix_resp
         * @property {number} wave_id wave_matrix_resp wave_id
         * @property {number|Long} create_time_ms wave_matrix_resp create_time_ms
         * @property {Array.<RoomMsg.Iwave_matrix>|null} [fish_list] wave_matrix_resp fish_list
         */

        /**
         * Constructs a new wave_matrix_resp.
         * @memberof RoomMsg
         * @classdesc Represents a wave_matrix_resp.
         * @implements Iwave_matrix_resp
         * @constructor
         * @param {RoomMsg.Iwave_matrix_resp=} [properties] Properties to set
         */
        function wave_matrix_resp(properties) {
            this.fish_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * wave_matrix_resp wave_id.
         * @member {number} wave_id
         * @memberof RoomMsg.wave_matrix_resp
         * @instance
         */
        wave_matrix_resp.prototype.wave_id = 0;

        /**
         * wave_matrix_resp create_time_ms.
         * @member {number|Long} create_time_ms
         * @memberof RoomMsg.wave_matrix_resp
         * @instance
         */
        wave_matrix_resp.prototype.create_time_ms = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * wave_matrix_resp fish_list.
         * @member {Array.<RoomMsg.Iwave_matrix>} fish_list
         * @memberof RoomMsg.wave_matrix_resp
         * @instance
         */
        wave_matrix_resp.prototype.fish_list = $util.emptyArray;

        /**
         * Creates a new wave_matrix_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.wave_matrix_resp
         * @static
         * @param {RoomMsg.Iwave_matrix_resp=} [properties] Properties to set
         * @returns {RoomMsg.wave_matrix_resp} wave_matrix_resp instance
         */
        wave_matrix_resp.create = function create(properties) {
            return new wave_matrix_resp(properties);
        };

        /**
         * Encodes the specified wave_matrix_resp message. Does not implicitly {@link RoomMsg.wave_matrix_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.wave_matrix_resp
         * @static
         * @param {RoomMsg.Iwave_matrix_resp} message wave_matrix_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wave_matrix_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.wave_id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.create_time_ms);
            if (message.fish_list != null && message.fish_list.length)
                for (var i = 0; i < message.fish_list.length; ++i)
                    $root.RoomMsg.wave_matrix.encode(message.fish_list[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified wave_matrix_resp message, length delimited. Does not implicitly {@link RoomMsg.wave_matrix_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.wave_matrix_resp
         * @static
         * @param {RoomMsg.Iwave_matrix_resp} message wave_matrix_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wave_matrix_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a wave_matrix_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.wave_matrix_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.wave_matrix_resp} wave_matrix_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wave_matrix_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.wave_matrix_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.wave_id = reader.uint32();
                    break;
                case 2:
                    message.create_time_ms = reader.uint64();
                    break;
                case 3:
                    if (!(message.fish_list && message.fish_list.length))
                        message.fish_list = [];
                    message.fish_list.push($root.RoomMsg.wave_matrix.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("wave_id"))
                throw $util.ProtocolError("missing required 'wave_id'", { instance: message });
            if (!message.hasOwnProperty("create_time_ms"))
                throw $util.ProtocolError("missing required 'create_time_ms'", { instance: message });
            return message;
        };

        /**
         * Decodes a wave_matrix_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.wave_matrix_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.wave_matrix_resp} wave_matrix_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wave_matrix_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a wave_matrix_resp message.
         * @function verify
         * @memberof RoomMsg.wave_matrix_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        wave_matrix_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.wave_id))
                return "wave_id: integer expected";
            if (!$util.isInteger(message.create_time_ms) && !(message.create_time_ms && $util.isInteger(message.create_time_ms.low) && $util.isInteger(message.create_time_ms.high)))
                return "create_time_ms: integer|Long expected";
            if (message.fish_list != null && message.hasOwnProperty("fish_list")) {
                if (!Array.isArray(message.fish_list))
                    return "fish_list: array expected";
                for (var i = 0; i < message.fish_list.length; ++i) {
                    var error = $root.RoomMsg.wave_matrix.verify(message.fish_list[i]);
                    if (error)
                        return "fish_list." + error;
                }
            }
            return null;
        };

        return wave_matrix_resp;
    })();

    RoomMsg.clean_wave_resp = (function() {

        /**
         * Properties of a clean_wave_resp.
         * @memberof RoomMsg
         * @interface Iclean_wave_resp
         */

        /**
         * Constructs a new clean_wave_resp.
         * @memberof RoomMsg
         * @classdesc Represents a clean_wave_resp.
         * @implements Iclean_wave_resp
         * @constructor
         * @param {RoomMsg.Iclean_wave_resp=} [properties] Properties to set
         */
        function clean_wave_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new clean_wave_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.clean_wave_resp
         * @static
         * @param {RoomMsg.Iclean_wave_resp=} [properties] Properties to set
         * @returns {RoomMsg.clean_wave_resp} clean_wave_resp instance
         */
        clean_wave_resp.create = function create(properties) {
            return new clean_wave_resp(properties);
        };

        /**
         * Encodes the specified clean_wave_resp message. Does not implicitly {@link RoomMsg.clean_wave_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.clean_wave_resp
         * @static
         * @param {RoomMsg.Iclean_wave_resp} message clean_wave_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clean_wave_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified clean_wave_resp message, length delimited. Does not implicitly {@link RoomMsg.clean_wave_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.clean_wave_resp
         * @static
         * @param {RoomMsg.Iclean_wave_resp} message clean_wave_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clean_wave_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a clean_wave_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.clean_wave_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.clean_wave_resp} clean_wave_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        clean_wave_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.clean_wave_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a clean_wave_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.clean_wave_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.clean_wave_resp} clean_wave_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        clean_wave_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a clean_wave_resp message.
         * @function verify
         * @memberof RoomMsg.clean_wave_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        clean_wave_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return clean_wave_resp;
    })();

    RoomMsg.summon_fish_req = (function() {

        /**
         * Properties of a summon_fish_req.
         * @memberof RoomMsg
         * @interface Isummon_fish_req
         */

        /**
         * Constructs a new summon_fish_req.
         * @memberof RoomMsg
         * @classdesc Represents a summon_fish_req.
         * @implements Isummon_fish_req
         * @constructor
         * @param {RoomMsg.Isummon_fish_req=} [properties] Properties to set
         */
        function summon_fish_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new summon_fish_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.summon_fish_req
         * @static
         * @param {RoomMsg.Isummon_fish_req=} [properties] Properties to set
         * @returns {RoomMsg.summon_fish_req} summon_fish_req instance
         */
        summon_fish_req.create = function create(properties) {
            return new summon_fish_req(properties);
        };

        /**
         * Encodes the specified summon_fish_req message. Does not implicitly {@link RoomMsg.summon_fish_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.summon_fish_req
         * @static
         * @param {RoomMsg.Isummon_fish_req} message summon_fish_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        summon_fish_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified summon_fish_req message, length delimited. Does not implicitly {@link RoomMsg.summon_fish_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.summon_fish_req
         * @static
         * @param {RoomMsg.Isummon_fish_req} message summon_fish_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        summon_fish_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a summon_fish_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.summon_fish_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.summon_fish_req} summon_fish_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        summon_fish_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.summon_fish_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a summon_fish_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.summon_fish_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.summon_fish_req} summon_fish_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        summon_fish_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a summon_fish_req message.
         * @function verify
         * @memberof RoomMsg.summon_fish_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        summon_fish_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return summon_fish_req;
    })();

    RoomMsg.summon_err_resp = (function() {

        /**
         * Properties of a summon_err_resp.
         * @memberof RoomMsg
         * @interface Isummon_err_resp
         * @property {RoomMsg.msg_room_code} code summon_err_resp code
         */

        /**
         * Constructs a new summon_err_resp.
         * @memberof RoomMsg
         * @classdesc Represents a summon_err_resp.
         * @implements Isummon_err_resp
         * @constructor
         * @param {RoomMsg.Isummon_err_resp=} [properties] Properties to set
         */
        function summon_err_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * summon_err_resp code.
         * @member {RoomMsg.msg_room_code} code
         * @memberof RoomMsg.summon_err_resp
         * @instance
         */
        summon_err_resp.prototype.code = 1;

        /**
         * Creates a new summon_err_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.summon_err_resp
         * @static
         * @param {RoomMsg.Isummon_err_resp=} [properties] Properties to set
         * @returns {RoomMsg.summon_err_resp} summon_err_resp instance
         */
        summon_err_resp.create = function create(properties) {
            return new summon_err_resp(properties);
        };

        /**
         * Encodes the specified summon_err_resp message. Does not implicitly {@link RoomMsg.summon_err_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.summon_err_resp
         * @static
         * @param {RoomMsg.Isummon_err_resp} message summon_err_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        summon_err_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified summon_err_resp message, length delimited. Does not implicitly {@link RoomMsg.summon_err_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.summon_err_resp
         * @static
         * @param {RoomMsg.Isummon_err_resp} message summon_err_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        summon_err_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a summon_err_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.summon_err_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.summon_err_resp} summon_err_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        summon_err_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.summon_err_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a summon_err_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.summon_err_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.summon_err_resp} summon_err_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        summon_err_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a summon_err_resp message.
         * @function verify
         * @memberof RoomMsg.summon_err_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        summon_err_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
                break;
            }
            return null;
        };

        return summon_err_resp;
    })();

    RoomMsg.summon_fish_resp = (function() {

        /**
         * Properties of a summon_fish_resp.
         * @memberof RoomMsg
         * @interface Isummon_fish_resp
         * @property {number|Long} uid summon_fish_resp uid
         * @property {string} nickname summon_fish_resp nickname
         * @property {number|Long} summon_end_time summon_fish_resp summon_end_time
         * @property {number|Long} chips summon_fish_resp chips
         * @property {number|Long} summon_time summon_fish_resp summon_time
         */

        /**
         * Constructs a new summon_fish_resp.
         * @memberof RoomMsg
         * @classdesc Represents a summon_fish_resp.
         * @implements Isummon_fish_resp
         * @constructor
         * @param {RoomMsg.Isummon_fish_resp=} [properties] Properties to set
         */
        function summon_fish_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * summon_fish_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.summon_fish_resp
         * @instance
         */
        summon_fish_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * summon_fish_resp nickname.
         * @member {string} nickname
         * @memberof RoomMsg.summon_fish_resp
         * @instance
         */
        summon_fish_resp.prototype.nickname = "";

        /**
         * summon_fish_resp summon_end_time.
         * @member {number|Long} summon_end_time
         * @memberof RoomMsg.summon_fish_resp
         * @instance
         */
        summon_fish_resp.prototype.summon_end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * summon_fish_resp chips.
         * @member {number|Long} chips
         * @memberof RoomMsg.summon_fish_resp
         * @instance
         */
        summon_fish_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * summon_fish_resp summon_time.
         * @member {number|Long} summon_time
         * @memberof RoomMsg.summon_fish_resp
         * @instance
         */
        summon_fish_resp.prototype.summon_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new summon_fish_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.summon_fish_resp
         * @static
         * @param {RoomMsg.Isummon_fish_resp=} [properties] Properties to set
         * @returns {RoomMsg.summon_fish_resp} summon_fish_resp instance
         */
        summon_fish_resp.create = function create(properties) {
            return new summon_fish_resp(properties);
        };

        /**
         * Encodes the specified summon_fish_resp message. Does not implicitly {@link RoomMsg.summon_fish_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.summon_fish_resp
         * @static
         * @param {RoomMsg.Isummon_fish_resp} message summon_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        summon_fish_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.summon_end_time);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.chips);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.summon_time);
            return writer;
        };

        /**
         * Encodes the specified summon_fish_resp message, length delimited. Does not implicitly {@link RoomMsg.summon_fish_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.summon_fish_resp
         * @static
         * @param {RoomMsg.Isummon_fish_resp} message summon_fish_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        summon_fish_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a summon_fish_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.summon_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.summon_fish_resp} summon_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        summon_fish_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.summon_fish_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.summon_end_time = reader.uint64();
                    break;
                case 4:
                    message.chips = reader.uint64();
                    break;
                case 5:
                    message.summon_time = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("summon_end_time"))
                throw $util.ProtocolError("missing required 'summon_end_time'", { instance: message });
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("summon_time"))
                throw $util.ProtocolError("missing required 'summon_time'", { instance: message });
            return message;
        };

        /**
         * Decodes a summon_fish_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.summon_fish_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.summon_fish_resp} summon_fish_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        summon_fish_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a summon_fish_resp message.
         * @function verify
         * @memberof RoomMsg.summon_fish_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        summon_fish_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.summon_end_time) && !(message.summon_end_time && $util.isInteger(message.summon_end_time.low) && $util.isInteger(message.summon_end_time.high)))
                return "summon_end_time: integer|Long expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (!$util.isInteger(message.summon_time) && !(message.summon_time && $util.isInteger(message.summon_time.low) && $util.isInteger(message.summon_time.high)))
                return "summon_time: integer|Long expected";
            return null;
        };

        return summon_fish_resp;
    })();

    RoomMsg.one_piece_resp = (function() {

        /**
         * Properties of an one_piece_resp.
         * @memberof RoomMsg
         * @interface Ione_piece_resp
         * @property {number|Long} uid one_piece_resp uid
         * @property {Array.<RoomMsg.Ifish_bonus_info>|null} [fish_killed] one_piece_resp fish_killed
         * @property {number|Long} bulletid one_piece_resp bulletid
         * @property {number|Long} jettonshow one_piece_resp jettonshow
         */

        /**
         * Constructs a new one_piece_resp.
         * @memberof RoomMsg
         * @classdesc Represents an one_piece_resp.
         * @implements Ione_piece_resp
         * @constructor
         * @param {RoomMsg.Ione_piece_resp=} [properties] Properties to set
         */
        function one_piece_resp(properties) {
            this.fish_killed = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * one_piece_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.one_piece_resp
         * @instance
         */
        one_piece_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * one_piece_resp fish_killed.
         * @member {Array.<RoomMsg.Ifish_bonus_info>} fish_killed
         * @memberof RoomMsg.one_piece_resp
         * @instance
         */
        one_piece_resp.prototype.fish_killed = $util.emptyArray;

        /**
         * one_piece_resp bulletid.
         * @member {number|Long} bulletid
         * @memberof RoomMsg.one_piece_resp
         * @instance
         */
        one_piece_resp.prototype.bulletid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * one_piece_resp jettonshow.
         * @member {number|Long} jettonshow
         * @memberof RoomMsg.one_piece_resp
         * @instance
         */
        one_piece_resp.prototype.jettonshow = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new one_piece_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.one_piece_resp
         * @static
         * @param {RoomMsg.Ione_piece_resp=} [properties] Properties to set
         * @returns {RoomMsg.one_piece_resp} one_piece_resp instance
         */
        one_piece_resp.create = function create(properties) {
            return new one_piece_resp(properties);
        };

        /**
         * Encodes the specified one_piece_resp message. Does not implicitly {@link RoomMsg.one_piece_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.one_piece_resp
         * @static
         * @param {RoomMsg.Ione_piece_resp} message one_piece_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        one_piece_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            if (message.fish_killed != null && message.fish_killed.length)
                for (var i = 0; i < message.fish_killed.length; ++i)
                    $root.RoomMsg.fish_bonus_info.encode(message.fish_killed[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.bulletid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.jettonshow);
            return writer;
        };

        /**
         * Encodes the specified one_piece_resp message, length delimited. Does not implicitly {@link RoomMsg.one_piece_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.one_piece_resp
         * @static
         * @param {RoomMsg.Ione_piece_resp} message one_piece_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        one_piece_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an one_piece_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.one_piece_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.one_piece_resp} one_piece_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        one_piece_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.one_piece_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    if (!(message.fish_killed && message.fish_killed.length))
                        message.fish_killed = [];
                    message.fish_killed.push($root.RoomMsg.fish_bonus_info.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.bulletid = reader.uint64();
                    break;
                case 4:
                    message.jettonshow = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("bulletid"))
                throw $util.ProtocolError("missing required 'bulletid'", { instance: message });
            if (!message.hasOwnProperty("jettonshow"))
                throw $util.ProtocolError("missing required 'jettonshow'", { instance: message });
            return message;
        };

        /**
         * Decodes an one_piece_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.one_piece_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.one_piece_resp} one_piece_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        one_piece_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an one_piece_resp message.
         * @function verify
         * @memberof RoomMsg.one_piece_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        one_piece_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (message.fish_killed != null && message.hasOwnProperty("fish_killed")) {
                if (!Array.isArray(message.fish_killed))
                    return "fish_killed: array expected";
                for (var i = 0; i < message.fish_killed.length; ++i) {
                    var error = $root.RoomMsg.fish_bonus_info.verify(message.fish_killed[i]);
                    if (error)
                        return "fish_killed." + error;
                }
            }
            if (!$util.isInteger(message.bulletid) && !(message.bulletid && $util.isInteger(message.bulletid.low) && $util.isInteger(message.bulletid.high)))
                return "bulletid: integer|Long expected";
            if (!$util.isInteger(message.jettonshow) && !(message.jettonshow && $util.isInteger(message.jettonshow.low) && $util.isInteger(message.jettonshow.high)))
                return "jettonshow: integer|Long expected";
            return null;
        };

        return one_piece_resp;
    })();

    RoomMsg.hit_result_resp = (function() {

        /**
         * Properties of a hit_result_resp.
         * @memberof RoomMsg
         * @interface Ihit_result_resp
         * @property {number|Long} fish_id hit_result_resp fish_id
         * @property {number|null} [hp] hit_result_resp hp
         */

        /**
         * Constructs a new hit_result_resp.
         * @memberof RoomMsg
         * @classdesc Represents a hit_result_resp.
         * @implements Ihit_result_resp
         * @constructor
         * @param {RoomMsg.Ihit_result_resp=} [properties] Properties to set
         */
        function hit_result_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * hit_result_resp fish_id.
         * @member {number|Long} fish_id
         * @memberof RoomMsg.hit_result_resp
         * @instance
         */
        hit_result_resp.prototype.fish_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * hit_result_resp hp.
         * @member {number} hp
         * @memberof RoomMsg.hit_result_resp
         * @instance
         */
        hit_result_resp.prototype.hp = 0;

        /**
         * Creates a new hit_result_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.hit_result_resp
         * @static
         * @param {RoomMsg.Ihit_result_resp=} [properties] Properties to set
         * @returns {RoomMsg.hit_result_resp} hit_result_resp instance
         */
        hit_result_resp.create = function create(properties) {
            return new hit_result_resp(properties);
        };

        /**
         * Encodes the specified hit_result_resp message. Does not implicitly {@link RoomMsg.hit_result_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.hit_result_resp
         * @static
         * @param {RoomMsg.Ihit_result_resp} message hit_result_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hit_result_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.fish_id);
            if (message.hp != null && message.hasOwnProperty("hp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.hp);
            return writer;
        };

        /**
         * Encodes the specified hit_result_resp message, length delimited. Does not implicitly {@link RoomMsg.hit_result_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.hit_result_resp
         * @static
         * @param {RoomMsg.Ihit_result_resp} message hit_result_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        hit_result_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a hit_result_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.hit_result_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.hit_result_resp} hit_result_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        hit_result_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.hit_result_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fish_id = reader.uint64();
                    break;
                case 2:
                    message.hp = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("fish_id"))
                throw $util.ProtocolError("missing required 'fish_id'", { instance: message });
            return message;
        };

        /**
         * Decodes a hit_result_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.hit_result_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.hit_result_resp} hit_result_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        hit_result_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a hit_result_resp message.
         * @function verify
         * @memberof RoomMsg.hit_result_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        hit_result_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.fish_id) && !(message.fish_id && $util.isInteger(message.fish_id.low) && $util.isInteger(message.fish_id.high)))
                return "fish_id: integer|Long expected";
            if (message.hp != null && message.hasOwnProperty("hp"))
                if (!$util.isInteger(message.hp))
                    return "hp: integer expected";
            return null;
        };

        return hit_result_resp;
    })();

    RoomMsg.extra_reward_req = (function() {

        /**
         * Properties of an extra_reward_req.
         * @memberof RoomMsg
         * @interface Iextra_reward_req
         */

        /**
         * Constructs a new extra_reward_req.
         * @memberof RoomMsg
         * @classdesc Represents an extra_reward_req.
         * @implements Iextra_reward_req
         * @constructor
         * @param {RoomMsg.Iextra_reward_req=} [properties] Properties to set
         */
        function extra_reward_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new extra_reward_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.extra_reward_req
         * @static
         * @param {RoomMsg.Iextra_reward_req=} [properties] Properties to set
         * @returns {RoomMsg.extra_reward_req} extra_reward_req instance
         */
        extra_reward_req.create = function create(properties) {
            return new extra_reward_req(properties);
        };

        /**
         * Encodes the specified extra_reward_req message. Does not implicitly {@link RoomMsg.extra_reward_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.extra_reward_req
         * @static
         * @param {RoomMsg.Iextra_reward_req} message extra_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extra_reward_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified extra_reward_req message, length delimited. Does not implicitly {@link RoomMsg.extra_reward_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.extra_reward_req
         * @static
         * @param {RoomMsg.Iextra_reward_req} message extra_reward_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extra_reward_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an extra_reward_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.extra_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.extra_reward_req} extra_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extra_reward_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.extra_reward_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an extra_reward_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.extra_reward_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.extra_reward_req} extra_reward_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extra_reward_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an extra_reward_req message.
         * @function verify
         * @memberof RoomMsg.extra_reward_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        extra_reward_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return extra_reward_req;
    })();

    RoomMsg.extra_reward_resp = (function() {

        /**
         * Properties of an extra_reward_resp.
         * @memberof RoomMsg
         * @interface Iextra_reward_resp
         * @property {number|Long} reward extra_reward_resp reward
         */

        /**
         * Constructs a new extra_reward_resp.
         * @memberof RoomMsg
         * @classdesc Represents an extra_reward_resp.
         * @implements Iextra_reward_resp
         * @constructor
         * @param {RoomMsg.Iextra_reward_resp=} [properties] Properties to set
         */
        function extra_reward_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * extra_reward_resp reward.
         * @member {number|Long} reward
         * @memberof RoomMsg.extra_reward_resp
         * @instance
         */
        extra_reward_resp.prototype.reward = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new extra_reward_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.extra_reward_resp
         * @static
         * @param {RoomMsg.Iextra_reward_resp=} [properties] Properties to set
         * @returns {RoomMsg.extra_reward_resp} extra_reward_resp instance
         */
        extra_reward_resp.create = function create(properties) {
            return new extra_reward_resp(properties);
        };

        /**
         * Encodes the specified extra_reward_resp message. Does not implicitly {@link RoomMsg.extra_reward_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.extra_reward_resp
         * @static
         * @param {RoomMsg.Iextra_reward_resp} message extra_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extra_reward_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.reward);
            return writer;
        };

        /**
         * Encodes the specified extra_reward_resp message, length delimited. Does not implicitly {@link RoomMsg.extra_reward_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.extra_reward_resp
         * @static
         * @param {RoomMsg.Iextra_reward_resp} message extra_reward_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        extra_reward_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an extra_reward_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.extra_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.extra_reward_resp} extra_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extra_reward_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.extra_reward_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reward = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("reward"))
                throw $util.ProtocolError("missing required 'reward'", { instance: message });
            return message;
        };

        /**
         * Decodes an extra_reward_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.extra_reward_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.extra_reward_resp} extra_reward_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        extra_reward_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an extra_reward_resp message.
         * @function verify
         * @memberof RoomMsg.extra_reward_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        extra_reward_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.reward) && !(message.reward && $util.isInteger(message.reward.low) && $util.isInteger(message.reward.high)))
                return "reward: integer|Long expected";
            return null;
        };

        return extra_reward_resp;
    })();

    RoomMsg.fish_select_save_req = (function() {

        /**
         * Properties of a fish_select_save_req.
         * @memberof RoomMsg
         * @interface Ifish_select_save_req
         * @property {Array.<number>|null} [type] fish_select_save_req type
         */

        /**
         * Constructs a new fish_select_save_req.
         * @memberof RoomMsg
         * @classdesc Represents a fish_select_save_req.
         * @implements Ifish_select_save_req
         * @constructor
         * @param {RoomMsg.Ifish_select_save_req=} [properties] Properties to set
         */
        function fish_select_save_req(properties) {
            this.type = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_select_save_req type.
         * @member {Array.<number>} type
         * @memberof RoomMsg.fish_select_save_req
         * @instance
         */
        fish_select_save_req.prototype.type = $util.emptyArray;

        /**
         * Creates a new fish_select_save_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_select_save_req
         * @static
         * @param {RoomMsg.Ifish_select_save_req=} [properties] Properties to set
         * @returns {RoomMsg.fish_select_save_req} fish_select_save_req instance
         */
        fish_select_save_req.create = function create(properties) {
            return new fish_select_save_req(properties);
        };

        /**
         * Encodes the specified fish_select_save_req message. Does not implicitly {@link RoomMsg.fish_select_save_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_select_save_req
         * @static
         * @param {RoomMsg.Ifish_select_save_req} message fish_select_save_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_save_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.type.length)
                for (var i = 0; i < message.type.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type[i]);
            return writer;
        };

        /**
         * Encodes the specified fish_select_save_req message, length delimited. Does not implicitly {@link RoomMsg.fish_select_save_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_select_save_req
         * @static
         * @param {RoomMsg.Ifish_select_save_req} message fish_select_save_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_save_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_select_save_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_select_save_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_select_save_req} fish_select_save_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_save_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_select_save_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.type && message.type.length))
                        message.type = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.type.push(reader.uint32());
                    } else
                        message.type.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a fish_select_save_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_select_save_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_select_save_req} fish_select_save_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_save_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_select_save_req message.
         * @function verify
         * @memberof RoomMsg.fish_select_save_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_select_save_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type")) {
                if (!Array.isArray(message.type))
                    return "type: array expected";
                for (var i = 0; i < message.type.length; ++i)
                    if (!$util.isInteger(message.type[i]))
                        return "type: integer[] expected";
            }
            return null;
        };

        return fish_select_save_req;
    })();

    RoomMsg.fish_select_save_resp = (function() {

        /**
         * Properties of a fish_select_save_resp.
         * @memberof RoomMsg
         * @interface Ifish_select_save_resp
         * @property {RoomMsg.msg_fish_save_code} code fish_select_save_resp code
         */

        /**
         * Constructs a new fish_select_save_resp.
         * @memberof RoomMsg
         * @classdesc Represents a fish_select_save_resp.
         * @implements Ifish_select_save_resp
         * @constructor
         * @param {RoomMsg.Ifish_select_save_resp=} [properties] Properties to set
         */
        function fish_select_save_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_select_save_resp code.
         * @member {RoomMsg.msg_fish_save_code} code
         * @memberof RoomMsg.fish_select_save_resp
         * @instance
         */
        fish_select_save_resp.prototype.code = 1;

        /**
         * Creates a new fish_select_save_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_select_save_resp
         * @static
         * @param {RoomMsg.Ifish_select_save_resp=} [properties] Properties to set
         * @returns {RoomMsg.fish_select_save_resp} fish_select_save_resp instance
         */
        fish_select_save_resp.create = function create(properties) {
            return new fish_select_save_resp(properties);
        };

        /**
         * Encodes the specified fish_select_save_resp message. Does not implicitly {@link RoomMsg.fish_select_save_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_select_save_resp
         * @static
         * @param {RoomMsg.Ifish_select_save_resp} message fish_select_save_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_save_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified fish_select_save_resp message, length delimited. Does not implicitly {@link RoomMsg.fish_select_save_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_select_save_resp
         * @static
         * @param {RoomMsg.Ifish_select_save_resp} message fish_select_save_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_save_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_select_save_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_select_save_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_select_save_resp} fish_select_save_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_save_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_select_save_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a fish_select_save_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_select_save_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_select_save_resp} fish_select_save_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_save_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_select_save_resp message.
         * @function verify
         * @memberof RoomMsg.fish_select_save_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_select_save_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
                break;
            }
            return null;
        };

        return fish_select_save_resp;
    })();

    RoomMsg.fish_select_req = (function() {

        /**
         * Properties of a fish_select_req.
         * @memberof RoomMsg
         * @interface Ifish_select_req
         */

        /**
         * Constructs a new fish_select_req.
         * @memberof RoomMsg
         * @classdesc Represents a fish_select_req.
         * @implements Ifish_select_req
         * @constructor
         * @param {RoomMsg.Ifish_select_req=} [properties] Properties to set
         */
        function fish_select_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new fish_select_req instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_select_req
         * @static
         * @param {RoomMsg.Ifish_select_req=} [properties] Properties to set
         * @returns {RoomMsg.fish_select_req} fish_select_req instance
         */
        fish_select_req.create = function create(properties) {
            return new fish_select_req(properties);
        };

        /**
         * Encodes the specified fish_select_req message. Does not implicitly {@link RoomMsg.fish_select_req.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_select_req
         * @static
         * @param {RoomMsg.Ifish_select_req} message fish_select_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified fish_select_req message, length delimited. Does not implicitly {@link RoomMsg.fish_select_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_select_req
         * @static
         * @param {RoomMsg.Ifish_select_req} message fish_select_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_select_req message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_select_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_select_req} fish_select_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_select_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a fish_select_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_select_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_select_req} fish_select_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_select_req message.
         * @function verify
         * @memberof RoomMsg.fish_select_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_select_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return fish_select_req;
    })();

    RoomMsg.fish_select_resp = (function() {

        /**
         * Properties of a fish_select_resp.
         * @memberof RoomMsg
         * @interface Ifish_select_resp
         * @property {Array.<number>|null} [type] fish_select_resp type
         */

        /**
         * Constructs a new fish_select_resp.
         * @memberof RoomMsg
         * @classdesc Represents a fish_select_resp.
         * @implements Ifish_select_resp
         * @constructor
         * @param {RoomMsg.Ifish_select_resp=} [properties] Properties to set
         */
        function fish_select_resp(properties) {
            this.type = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * fish_select_resp type.
         * @member {Array.<number>} type
         * @memberof RoomMsg.fish_select_resp
         * @instance
         */
        fish_select_resp.prototype.type = $util.emptyArray;

        /**
         * Creates a new fish_select_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.fish_select_resp
         * @static
         * @param {RoomMsg.Ifish_select_resp=} [properties] Properties to set
         * @returns {RoomMsg.fish_select_resp} fish_select_resp instance
         */
        fish_select_resp.create = function create(properties) {
            return new fish_select_resp(properties);
        };

        /**
         * Encodes the specified fish_select_resp message. Does not implicitly {@link RoomMsg.fish_select_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.fish_select_resp
         * @static
         * @param {RoomMsg.Ifish_select_resp} message fish_select_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.type.length)
                for (var i = 0; i < message.type.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type[i]);
            return writer;
        };

        /**
         * Encodes the specified fish_select_resp message, length delimited. Does not implicitly {@link RoomMsg.fish_select_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.fish_select_resp
         * @static
         * @param {RoomMsg.Ifish_select_resp} message fish_select_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        fish_select_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a fish_select_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.fish_select_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.fish_select_resp} fish_select_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.fish_select_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.type && message.type.length))
                        message.type = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.type.push(reader.uint32());
                    } else
                        message.type.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a fish_select_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.fish_select_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.fish_select_resp} fish_select_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        fish_select_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a fish_select_resp message.
         * @function verify
         * @memberof RoomMsg.fish_select_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        fish_select_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type")) {
                if (!Array.isArray(message.type))
                    return "type: array expected";
                for (var i = 0; i < message.type.length; ++i)
                    if (!$util.isInteger(message.type[i]))
                        return "type: integer[] expected";
            }
            return null;
        };

        return fish_select_resp;
    })();

    RoomMsg.update_valentine_score = (function() {

        /**
         * Properties of an update_valentine_score.
         * @memberof RoomMsg
         * @interface Iupdate_valentine_score
         * @property {number} total_score update_valentine_score total_score
         * @property {number} score update_valentine_score score
         * @property {boolean} explode update_valentine_score explode
         * @property {number|Long|null} [end_time] update_valentine_score end_time
         */

        /**
         * Constructs a new update_valentine_score.
         * @memberof RoomMsg
         * @classdesc Represents an update_valentine_score.
         * @implements Iupdate_valentine_score
         * @constructor
         * @param {RoomMsg.Iupdate_valentine_score=} [properties] Properties to set
         */
        function update_valentine_score(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * update_valentine_score total_score.
         * @member {number} total_score
         * @memberof RoomMsg.update_valentine_score
         * @instance
         */
        update_valentine_score.prototype.total_score = 0;

        /**
         * update_valentine_score score.
         * @member {number} score
         * @memberof RoomMsg.update_valentine_score
         * @instance
         */
        update_valentine_score.prototype.score = 0;

        /**
         * update_valentine_score explode.
         * @member {boolean} explode
         * @memberof RoomMsg.update_valentine_score
         * @instance
         */
        update_valentine_score.prototype.explode = false;

        /**
         * update_valentine_score end_time.
         * @member {number|Long} end_time
         * @memberof RoomMsg.update_valentine_score
         * @instance
         */
        update_valentine_score.prototype.end_time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new update_valentine_score instance using the specified properties.
         * @function create
         * @memberof RoomMsg.update_valentine_score
         * @static
         * @param {RoomMsg.Iupdate_valentine_score=} [properties] Properties to set
         * @returns {RoomMsg.update_valentine_score} update_valentine_score instance
         */
        update_valentine_score.create = function create(properties) {
            return new update_valentine_score(properties);
        };

        /**
         * Encodes the specified update_valentine_score message. Does not implicitly {@link RoomMsg.update_valentine_score.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.update_valentine_score
         * @static
         * @param {RoomMsg.Iupdate_valentine_score} message update_valentine_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_valentine_score.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.total_score);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.score);
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.explode);
            if (message.end_time != null && message.hasOwnProperty("end_time"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.end_time);
            return writer;
        };

        /**
         * Encodes the specified update_valentine_score message, length delimited. Does not implicitly {@link RoomMsg.update_valentine_score.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.update_valentine_score
         * @static
         * @param {RoomMsg.Iupdate_valentine_score} message update_valentine_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        update_valentine_score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an update_valentine_score message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.update_valentine_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.update_valentine_score} update_valentine_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_valentine_score.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.update_valentine_score();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.total_score = reader.uint32();
                    break;
                case 2:
                    message.score = reader.uint32();
                    break;
                case 3:
                    message.explode = reader.bool();
                    break;
                case 4:
                    message.end_time = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("total_score"))
                throw $util.ProtocolError("missing required 'total_score'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("explode"))
                throw $util.ProtocolError("missing required 'explode'", { instance: message });
            return message;
        };

        /**
         * Decodes an update_valentine_score message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.update_valentine_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.update_valentine_score} update_valentine_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        update_valentine_score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an update_valentine_score message.
         * @function verify
         * @memberof RoomMsg.update_valentine_score
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        update_valentine_score.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.total_score))
                return "total_score: integer expected";
            if (!$util.isInteger(message.score))
                return "score: integer expected";
            if (typeof message.explode !== "boolean")
                return "explode: boolean expected";
            if (message.end_time != null && message.hasOwnProperty("end_time"))
                if (!$util.isInteger(message.end_time) && !(message.end_time && $util.isInteger(message.end_time.low) && $util.isInteger(message.end_time.high)))
                    return "end_time: integer|Long expected";
            return null;
        };

        return update_valentine_score;
    })();

    RoomMsg.rotate_canvas_resp = (function() {

        /**
         * Properties of a rotate_canvas_resp.
         * @memberof RoomMsg
         * @interface Irotate_canvas_resp
         * @property {number|Long} uid rotate_canvas_resp uid
         * @property {number} mark rotate_canvas_resp mark
         */

        /**
         * Constructs a new rotate_canvas_resp.
         * @memberof RoomMsg
         * @classdesc Represents a rotate_canvas_resp.
         * @implements Irotate_canvas_resp
         * @constructor
         * @param {RoomMsg.Irotate_canvas_resp=} [properties] Properties to set
         */
        function rotate_canvas_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * rotate_canvas_resp uid.
         * @member {number|Long} uid
         * @memberof RoomMsg.rotate_canvas_resp
         * @instance
         */
        rotate_canvas_resp.prototype.uid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * rotate_canvas_resp mark.
         * @member {number} mark
         * @memberof RoomMsg.rotate_canvas_resp
         * @instance
         */
        rotate_canvas_resp.prototype.mark = 0;

        /**
         * Creates a new rotate_canvas_resp instance using the specified properties.
         * @function create
         * @memberof RoomMsg.rotate_canvas_resp
         * @static
         * @param {RoomMsg.Irotate_canvas_resp=} [properties] Properties to set
         * @returns {RoomMsg.rotate_canvas_resp} rotate_canvas_resp instance
         */
        rotate_canvas_resp.create = function create(properties) {
            return new rotate_canvas_resp(properties);
        };

        /**
         * Encodes the specified rotate_canvas_resp message. Does not implicitly {@link RoomMsg.rotate_canvas_resp.verify|verify} messages.
         * @function encode
         * @memberof RoomMsg.rotate_canvas_resp
         * @static
         * @param {RoomMsg.Irotate_canvas_resp} message rotate_canvas_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rotate_canvas_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mark);
            return writer;
        };

        /**
         * Encodes the specified rotate_canvas_resp message, length delimited. Does not implicitly {@link RoomMsg.rotate_canvas_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof RoomMsg.rotate_canvas_resp
         * @static
         * @param {RoomMsg.Irotate_canvas_resp} message rotate_canvas_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        rotate_canvas_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a rotate_canvas_resp message from the specified reader or buffer.
         * @function decode
         * @memberof RoomMsg.rotate_canvas_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {RoomMsg.rotate_canvas_resp} rotate_canvas_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rotate_canvas_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RoomMsg.rotate_canvas_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint64();
                    break;
                case 2:
                    message.mark = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("mark"))
                throw $util.ProtocolError("missing required 'mark'", { instance: message });
            return message;
        };

        /**
         * Decodes a rotate_canvas_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof RoomMsg.rotate_canvas_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {RoomMsg.rotate_canvas_resp} rotate_canvas_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        rotate_canvas_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a rotate_canvas_resp message.
         * @function verify
         * @memberof RoomMsg.rotate_canvas_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        rotate_canvas_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid) && !(message.uid && $util.isInteger(message.uid.low) && $util.isInteger(message.uid.high)))
                return "uid: integer|Long expected";
            if (!$util.isInteger(message.mark))
                return "mark: integer expected";
            return null;
        };

        return rotate_canvas_resp;
    })();

    return RoomMsg;
})();

$root.WalletMsg = (function() {

    /**
     * Namespace WalletMsg.
     * @exports WalletMsg
     * @namespace
     */
    var WalletMsg = {};

    /**
     * c_cmd enum.
     * @name WalletMsg.c_cmd
     * @enum {string}
     * @property {number} main_wallet_req=0 main_wallet_req value
     * @property {number} main_wallet_resp=1 main_wallet_resp value
     * @property {number} wallet_req=2 wallet_req value
     * @property {number} wallet_resp=3 wallet_resp value
     */
    WalletMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "main_wallet_req"] = 0;
        values[valuesById[1] = "main_wallet_resp"] = 1;
        values[valuesById[2] = "wallet_req"] = 2;
        values[valuesById[3] = "wallet_resp"] = 3;
        return values;
    })();

    /**
     * msg_wallet_code enum.
     * @name WalletMsg.msg_wallet_code
     * @enum {string}
     * @property {number} SUCCESS=1 SUCCESS value
     * @property {number} FAIL=2 FAIL value
     * @property {number} FREQUENT=3 FREQUENT value
     * @property {number} FREQUENTY=4 FREQUENTY value
     */
    WalletMsg.msg_wallet_code = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SUCCESS"] = 1;
        values[valuesById[2] = "FAIL"] = 2;
        values[valuesById[3] = "FREQUENT"] = 3;
        values[valuesById[4] = "FREQUENTY"] = 4;
        return values;
    })();

    WalletMsg.msg_wallet_service = (function() {

        /**
         * Constructs a new msg_wallet_service service.
         * @memberof WalletMsg
         * @classdesc Represents a msg_wallet_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_wallet_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_wallet_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_wallet_service;

        /**
         * Creates new msg_wallet_service service using the specified rpc implementation.
         * @function create
         * @memberof WalletMsg.msg_wallet_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_wallet_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_wallet_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link WalletMsg.msg_wallet_service#main_wallet}.
         * @memberof WalletMsg.msg_wallet_service
         * @typedef main_walletCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {WalletMsg.main_wallet_resp} [response] main_wallet_resp
         */

        /**
         * Calls main_wallet.
         * @function main_wallet
         * @memberof WalletMsg.msg_wallet_service
         * @instance
         * @param {WalletMsg.Imain_wallet_req} request main_wallet_req message or plain object
         * @param {WalletMsg.msg_wallet_service.main_walletCallback} callback Node-style callback called with the error, if any, and main_wallet_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_wallet_service.prototype.main_wallet = function main_wallet(request, callback) {
            return this.rpcCall(main_wallet, $root.WalletMsg.main_wallet_req, $root.WalletMsg.main_wallet_resp, request, callback);
        }, "name", { value: "main_wallet" });

        /**
         * Calls main_wallet.
         * @function main_wallet
         * @memberof WalletMsg.msg_wallet_service
         * @instance
         * @param {WalletMsg.Imain_wallet_req} request main_wallet_req message or plain object
         * @returns {Promise<WalletMsg.main_wallet_resp>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link WalletMsg.msg_wallet_service#wallet}.
         * @memberof WalletMsg.msg_wallet_service
         * @typedef walletCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {WalletMsg.wallet_resp} [response] wallet_resp
         */

        /**
         * Calls wallet.
         * @function wallet
         * @memberof WalletMsg.msg_wallet_service
         * @instance
         * @param {WalletMsg.Iwallet_req} request wallet_req message or plain object
         * @param {WalletMsg.msg_wallet_service.walletCallback} callback Node-style callback called with the error, if any, and wallet_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_wallet_service.prototype.wallet = function wallet(request, callback) {
            return this.rpcCall(wallet, $root.WalletMsg.wallet_req, $root.WalletMsg.wallet_resp, request, callback);
        }, "name", { value: "wallet" });

        /**
         * Calls wallet.
         * @function wallet
         * @memberof WalletMsg.msg_wallet_service
         * @instance
         * @param {WalletMsg.Iwallet_req} request wallet_req message or plain object
         * @returns {Promise<WalletMsg.wallet_resp>} Promise
         * @variation 2
         */

        return msg_wallet_service;
    })();

    WalletMsg.main_wallet_req = (function() {

        /**
         * Properties of a main_wallet_req.
         * @memberof WalletMsg
         * @interface Imain_wallet_req
         */

        /**
         * Constructs a new main_wallet_req.
         * @memberof WalletMsg
         * @classdesc Represents a main_wallet_req.
         * @implements Imain_wallet_req
         * @constructor
         * @param {WalletMsg.Imain_wallet_req=} [properties] Properties to set
         */
        function main_wallet_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new main_wallet_req instance using the specified properties.
         * @function create
         * @memberof WalletMsg.main_wallet_req
         * @static
         * @param {WalletMsg.Imain_wallet_req=} [properties] Properties to set
         * @returns {WalletMsg.main_wallet_req} main_wallet_req instance
         */
        main_wallet_req.create = function create(properties) {
            return new main_wallet_req(properties);
        };

        /**
         * Encodes the specified main_wallet_req message. Does not implicitly {@link WalletMsg.main_wallet_req.verify|verify} messages.
         * @function encode
         * @memberof WalletMsg.main_wallet_req
         * @static
         * @param {WalletMsg.Imain_wallet_req} message main_wallet_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        main_wallet_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified main_wallet_req message, length delimited. Does not implicitly {@link WalletMsg.main_wallet_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WalletMsg.main_wallet_req
         * @static
         * @param {WalletMsg.Imain_wallet_req} message main_wallet_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        main_wallet_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a main_wallet_req message from the specified reader or buffer.
         * @function decode
         * @memberof WalletMsg.main_wallet_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WalletMsg.main_wallet_req} main_wallet_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        main_wallet_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WalletMsg.main_wallet_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a main_wallet_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WalletMsg.main_wallet_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WalletMsg.main_wallet_req} main_wallet_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        main_wallet_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a main_wallet_req message.
         * @function verify
         * @memberof WalletMsg.main_wallet_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        main_wallet_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return main_wallet_req;
    })();

    WalletMsg.main_wallet_resp = (function() {

        /**
         * Properties of a main_wallet_resp.
         * @memberof WalletMsg
         * @interface Imain_wallet_resp
         * @property {WalletMsg.msg_wallet_code} code main_wallet_resp code
         * @property {number|Long|null} [chips] main_wallet_resp chips
         * @property {number|Long|null} [auto_wallet] main_wallet_resp auto_wallet
         */

        /**
         * Constructs a new main_wallet_resp.
         * @memberof WalletMsg
         * @classdesc Represents a main_wallet_resp.
         * @implements Imain_wallet_resp
         * @constructor
         * @param {WalletMsg.Imain_wallet_resp=} [properties] Properties to set
         */
        function main_wallet_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * main_wallet_resp code.
         * @member {WalletMsg.msg_wallet_code} code
         * @memberof WalletMsg.main_wallet_resp
         * @instance
         */
        main_wallet_resp.prototype.code = 1;

        /**
         * main_wallet_resp chips.
         * @member {number|Long} chips
         * @memberof WalletMsg.main_wallet_resp
         * @instance
         */
        main_wallet_resp.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * main_wallet_resp auto_wallet.
         * @member {number|Long} auto_wallet
         * @memberof WalletMsg.main_wallet_resp
         * @instance
         */
        main_wallet_resp.prototype.auto_wallet = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new main_wallet_resp instance using the specified properties.
         * @function create
         * @memberof WalletMsg.main_wallet_resp
         * @static
         * @param {WalletMsg.Imain_wallet_resp=} [properties] Properties to set
         * @returns {WalletMsg.main_wallet_resp} main_wallet_resp instance
         */
        main_wallet_resp.create = function create(properties) {
            return new main_wallet_resp(properties);
        };

        /**
         * Encodes the specified main_wallet_resp message. Does not implicitly {@link WalletMsg.main_wallet_resp.verify|verify} messages.
         * @function encode
         * @memberof WalletMsg.main_wallet_resp
         * @static
         * @param {WalletMsg.Imain_wallet_resp} message main_wallet_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        main_wallet_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            if (message.chips != null && message.hasOwnProperty("chips"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.chips);
            if (message.auto_wallet != null && message.hasOwnProperty("auto_wallet"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.auto_wallet);
            return writer;
        };

        /**
         * Encodes the specified main_wallet_resp message, length delimited. Does not implicitly {@link WalletMsg.main_wallet_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WalletMsg.main_wallet_resp
         * @static
         * @param {WalletMsg.Imain_wallet_resp} message main_wallet_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        main_wallet_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a main_wallet_resp message from the specified reader or buffer.
         * @function decode
         * @memberof WalletMsg.main_wallet_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WalletMsg.main_wallet_resp} main_wallet_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        main_wallet_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WalletMsg.main_wallet_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.chips = reader.int64();
                    break;
                case 3:
                    message.auto_wallet = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a main_wallet_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WalletMsg.main_wallet_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WalletMsg.main_wallet_resp} main_wallet_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        main_wallet_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a main_wallet_resp message.
         * @function verify
         * @memberof WalletMsg.main_wallet_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        main_wallet_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
            if (message.chips != null && message.hasOwnProperty("chips"))
                if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                    return "chips: integer|Long expected";
            if (message.auto_wallet != null && message.hasOwnProperty("auto_wallet"))
                if (!$util.isInteger(message.auto_wallet) && !(message.auto_wallet && $util.isInteger(message.auto_wallet.low) && $util.isInteger(message.auto_wallet.high)))
                    return "auto_wallet: integer|Long expected";
            return null;
        };

        return main_wallet_resp;
    })();

    WalletMsg.wallet_req = (function() {

        /**
         * Properties of a wallet_req.
         * @memberof WalletMsg
         * @interface Iwallet_req
         * @property {number|Long} chips wallet_req chips
         * @property {boolean} auto wallet_req auto
         */

        /**
         * Constructs a new wallet_req.
         * @memberof WalletMsg
         * @classdesc Represents a wallet_req.
         * @implements Iwallet_req
         * @constructor
         * @param {WalletMsg.Iwallet_req=} [properties] Properties to set
         */
        function wallet_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * wallet_req chips.
         * @member {number|Long} chips
         * @memberof WalletMsg.wallet_req
         * @instance
         */
        wallet_req.prototype.chips = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * wallet_req auto.
         * @member {boolean} auto
         * @memberof WalletMsg.wallet_req
         * @instance
         */
        wallet_req.prototype.auto = false;

        /**
         * Creates a new wallet_req instance using the specified properties.
         * @function create
         * @memberof WalletMsg.wallet_req
         * @static
         * @param {WalletMsg.Iwallet_req=} [properties] Properties to set
         * @returns {WalletMsg.wallet_req} wallet_req instance
         */
        wallet_req.create = function create(properties) {
            return new wallet_req(properties);
        };

        /**
         * Encodes the specified wallet_req message. Does not implicitly {@link WalletMsg.wallet_req.verify|verify} messages.
         * @function encode
         * @memberof WalletMsg.wallet_req
         * @static
         * @param {WalletMsg.Iwallet_req} message wallet_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wallet_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.chips);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.auto);
            return writer;
        };

        /**
         * Encodes the specified wallet_req message, length delimited. Does not implicitly {@link WalletMsg.wallet_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WalletMsg.wallet_req
         * @static
         * @param {WalletMsg.Iwallet_req} message wallet_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wallet_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a wallet_req message from the specified reader or buffer.
         * @function decode
         * @memberof WalletMsg.wallet_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WalletMsg.wallet_req} wallet_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wallet_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WalletMsg.wallet_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.chips = reader.uint64();
                    break;
                case 2:
                    message.auto = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("chips"))
                throw $util.ProtocolError("missing required 'chips'", { instance: message });
            if (!message.hasOwnProperty("auto"))
                throw $util.ProtocolError("missing required 'auto'", { instance: message });
            return message;
        };

        /**
         * Decodes a wallet_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WalletMsg.wallet_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WalletMsg.wallet_req} wallet_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wallet_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a wallet_req message.
         * @function verify
         * @memberof WalletMsg.wallet_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        wallet_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.chips) && !(message.chips && $util.isInteger(message.chips.low) && $util.isInteger(message.chips.high)))
                return "chips: integer|Long expected";
            if (typeof message.auto !== "boolean")
                return "auto: boolean expected";
            return null;
        };

        return wallet_req;
    })();

    WalletMsg.wallet_resp = (function() {

        /**
         * Properties of a wallet_resp.
         * @memberof WalletMsg
         * @interface Iwallet_resp
         * @property {WalletMsg.msg_wallet_code} code wallet_resp code
         */

        /**
         * Constructs a new wallet_resp.
         * @memberof WalletMsg
         * @classdesc Represents a wallet_resp.
         * @implements Iwallet_resp
         * @constructor
         * @param {WalletMsg.Iwallet_resp=} [properties] Properties to set
         */
        function wallet_resp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * wallet_resp code.
         * @member {WalletMsg.msg_wallet_code} code
         * @memberof WalletMsg.wallet_resp
         * @instance
         */
        wallet_resp.prototype.code = 1;

        /**
         * Creates a new wallet_resp instance using the specified properties.
         * @function create
         * @memberof WalletMsg.wallet_resp
         * @static
         * @param {WalletMsg.Iwallet_resp=} [properties] Properties to set
         * @returns {WalletMsg.wallet_resp} wallet_resp instance
         */
        wallet_resp.create = function create(properties) {
            return new wallet_resp(properties);
        };

        /**
         * Encodes the specified wallet_resp message. Does not implicitly {@link WalletMsg.wallet_resp.verify|verify} messages.
         * @function encode
         * @memberof WalletMsg.wallet_resp
         * @static
         * @param {WalletMsg.Iwallet_resp} message wallet_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wallet_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
            return writer;
        };

        /**
         * Encodes the specified wallet_resp message, length delimited. Does not implicitly {@link WalletMsg.wallet_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WalletMsg.wallet_resp
         * @static
         * @param {WalletMsg.Iwallet_resp} message wallet_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wallet_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a wallet_resp message from the specified reader or buffer.
         * @function decode
         * @memberof WalletMsg.wallet_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WalletMsg.wallet_resp} wallet_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wallet_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WalletMsg.wallet_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a wallet_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WalletMsg.wallet_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WalletMsg.wallet_resp} wallet_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wallet_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a wallet_resp message.
         * @function verify
         * @memberof WalletMsg.wallet_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        wallet_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.code) {
            default:
                return "code: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
            return null;
        };

        return wallet_resp;
    })();

    return WalletMsg;
})();

$root.WinnerMsg = (function() {

    /**
     * Namespace WinnerMsg.
     * @exports WinnerMsg
     * @namespace
     */
    var WinnerMsg = {};

    /**
     * c_cmd enum.
     * @name WinnerMsg.c_cmd
     * @enum {string}
     * @property {number} winners_req=0 winners_req value
     * @property {number} winners_resp=1 winners_resp value
     */
    WinnerMsg.c_cmd = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "winners_req"] = 0;
        values[valuesById[1] = "winners_resp"] = 1;
        return values;
    })();

    WinnerMsg.msg_winners_service = (function() {

        /**
         * Constructs a new msg_winners_service service.
         * @memberof WinnerMsg
         * @classdesc Represents a msg_winners_service
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function msg_winners_service(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (msg_winners_service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = msg_winners_service;

        /**
         * Creates new msg_winners_service service using the specified rpc implementation.
         * @function create
         * @memberof WinnerMsg.msg_winners_service
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {msg_winners_service} RPC service. Useful where requests and/or responses are streamed.
         */
        msg_winners_service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link WinnerMsg.msg_winners_service#winners}.
         * @memberof WinnerMsg.msg_winners_service
         * @typedef winnersCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {WinnerMsg.winners_resp} [response] winners_resp
         */

        /**
         * Calls winners.
         * @function winners
         * @memberof WinnerMsg.msg_winners_service
         * @instance
         * @param {WinnerMsg.Iwinners_req} request winners_req message or plain object
         * @param {WinnerMsg.msg_winners_service.winnersCallback} callback Node-style callback called with the error, if any, and winners_resp
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(msg_winners_service.prototype.winners = function winners(request, callback) {
            return this.rpcCall(winners, $root.WinnerMsg.winners_req, $root.WinnerMsg.winners_resp, request, callback);
        }, "name", { value: "winners" });

        /**
         * Calls winners.
         * @function winners
         * @memberof WinnerMsg.msg_winners_service
         * @instance
         * @param {WinnerMsg.Iwinners_req} request winners_req message or plain object
         * @returns {Promise<WinnerMsg.winners_resp>} Promise
         * @variation 2
         */

        return msg_winners_service;
    })();

    WinnerMsg.winner_info = (function() {

        /**
         * Properties of a winner_info.
         * @memberof WinnerMsg
         * @interface Iwinner_info
         * @property {string} nickname winner_info nickname
         * @property {number} date winner_info date
         * @property {number} awardLevel winner_info awardLevel
         * @property {number|Long} award winner_info award
         */

        /**
         * Constructs a new winner_info.
         * @memberof WinnerMsg
         * @classdesc Represents a winner_info.
         * @implements Iwinner_info
         * @constructor
         * @param {WinnerMsg.Iwinner_info=} [properties] Properties to set
         */
        function winner_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * winner_info nickname.
         * @member {string} nickname
         * @memberof WinnerMsg.winner_info
         * @instance
         */
        winner_info.prototype.nickname = "";

        /**
         * winner_info date.
         * @member {number} date
         * @memberof WinnerMsg.winner_info
         * @instance
         */
        winner_info.prototype.date = 0;

        /**
         * winner_info awardLevel.
         * @member {number} awardLevel
         * @memberof WinnerMsg.winner_info
         * @instance
         */
        winner_info.prototype.awardLevel = 0;

        /**
         * winner_info award.
         * @member {number|Long} award
         * @memberof WinnerMsg.winner_info
         * @instance
         */
        winner_info.prototype.award = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new winner_info instance using the specified properties.
         * @function create
         * @memberof WinnerMsg.winner_info
         * @static
         * @param {WinnerMsg.Iwinner_info=} [properties] Properties to set
         * @returns {WinnerMsg.winner_info} winner_info instance
         */
        winner_info.create = function create(properties) {
            return new winner_info(properties);
        };

        /**
         * Encodes the specified winner_info message. Does not implicitly {@link WinnerMsg.winner_info.verify|verify} messages.
         * @function encode
         * @memberof WinnerMsg.winner_info
         * @static
         * @param {WinnerMsg.Iwinner_info} message winner_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        winner_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nickname);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.date);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.awardLevel);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.award);
            return writer;
        };

        /**
         * Encodes the specified winner_info message, length delimited. Does not implicitly {@link WinnerMsg.winner_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WinnerMsg.winner_info
         * @static
         * @param {WinnerMsg.Iwinner_info} message winner_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        winner_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a winner_info message from the specified reader or buffer.
         * @function decode
         * @memberof WinnerMsg.winner_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WinnerMsg.winner_info} winner_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        winner_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WinnerMsg.winner_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.nickname = reader.string();
                    break;
                case 2:
                    message.date = reader.uint32();
                    break;
                case 3:
                    message.awardLevel = reader.uint32();
                    break;
                case 4:
                    message.award = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("date"))
                throw $util.ProtocolError("missing required 'date'", { instance: message });
            if (!message.hasOwnProperty("awardLevel"))
                throw $util.ProtocolError("missing required 'awardLevel'", { instance: message });
            if (!message.hasOwnProperty("award"))
                throw $util.ProtocolError("missing required 'award'", { instance: message });
            return message;
        };

        /**
         * Decodes a winner_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WinnerMsg.winner_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WinnerMsg.winner_info} winner_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        winner_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a winner_info message.
         * @function verify
         * @memberof WinnerMsg.winner_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        winner_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.date))
                return "date: integer expected";
            if (!$util.isInteger(message.awardLevel))
                return "awardLevel: integer expected";
            if (!$util.isInteger(message.award) && !(message.award && $util.isInteger(message.award.low) && $util.isInteger(message.award.high)))
                return "award: integer|Long expected";
            return null;
        };

        return winner_info;
    })();

    WinnerMsg.winners_req = (function() {

        /**
         * Properties of a winners_req.
         * @memberof WinnerMsg
         * @interface Iwinners_req
         */

        /**
         * Constructs a new winners_req.
         * @memberof WinnerMsg
         * @classdesc Represents a winners_req.
         * @implements Iwinners_req
         * @constructor
         * @param {WinnerMsg.Iwinners_req=} [properties] Properties to set
         */
        function winners_req(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new winners_req instance using the specified properties.
         * @function create
         * @memberof WinnerMsg.winners_req
         * @static
         * @param {WinnerMsg.Iwinners_req=} [properties] Properties to set
         * @returns {WinnerMsg.winners_req} winners_req instance
         */
        winners_req.create = function create(properties) {
            return new winners_req(properties);
        };

        /**
         * Encodes the specified winners_req message. Does not implicitly {@link WinnerMsg.winners_req.verify|verify} messages.
         * @function encode
         * @memberof WinnerMsg.winners_req
         * @static
         * @param {WinnerMsg.Iwinners_req} message winners_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        winners_req.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified winners_req message, length delimited. Does not implicitly {@link WinnerMsg.winners_req.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WinnerMsg.winners_req
         * @static
         * @param {WinnerMsg.Iwinners_req} message winners_req message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        winners_req.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a winners_req message from the specified reader or buffer.
         * @function decode
         * @memberof WinnerMsg.winners_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WinnerMsg.winners_req} winners_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        winners_req.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WinnerMsg.winners_req();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a winners_req message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WinnerMsg.winners_req
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WinnerMsg.winners_req} winners_req
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        winners_req.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a winners_req message.
         * @function verify
         * @memberof WinnerMsg.winners_req
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        winners_req.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        return winners_req;
    })();

    WinnerMsg.winners_resp = (function() {

        /**
         * Properties of a winners_resp.
         * @memberof WinnerMsg
         * @interface Iwinners_resp
         * @property {Array.<WinnerMsg.Iwinner_info>|null} [role] winners_resp role
         */

        /**
         * Constructs a new winners_resp.
         * @memberof WinnerMsg
         * @classdesc Represents a winners_resp.
         * @implements Iwinners_resp
         * @constructor
         * @param {WinnerMsg.Iwinners_resp=} [properties] Properties to set
         */
        function winners_resp(properties) {
            this.role = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * winners_resp role.
         * @member {Array.<WinnerMsg.Iwinner_info>} role
         * @memberof WinnerMsg.winners_resp
         * @instance
         */
        winners_resp.prototype.role = $util.emptyArray;

        /**
         * Creates a new winners_resp instance using the specified properties.
         * @function create
         * @memberof WinnerMsg.winners_resp
         * @static
         * @param {WinnerMsg.Iwinners_resp=} [properties] Properties to set
         * @returns {WinnerMsg.winners_resp} winners_resp instance
         */
        winners_resp.create = function create(properties) {
            return new winners_resp(properties);
        };

        /**
         * Encodes the specified winners_resp message. Does not implicitly {@link WinnerMsg.winners_resp.verify|verify} messages.
         * @function encode
         * @memberof WinnerMsg.winners_resp
         * @static
         * @param {WinnerMsg.Iwinners_resp} message winners_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        winners_resp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.role != null && message.role.length)
                for (var i = 0; i < message.role.length; ++i)
                    $root.WinnerMsg.winner_info.encode(message.role[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified winners_resp message, length delimited. Does not implicitly {@link WinnerMsg.winners_resp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WinnerMsg.winners_resp
         * @static
         * @param {WinnerMsg.Iwinners_resp} message winners_resp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        winners_resp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a winners_resp message from the specified reader or buffer.
         * @function decode
         * @memberof WinnerMsg.winners_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WinnerMsg.winners_resp} winners_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        winners_resp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WinnerMsg.winners_resp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.role && message.role.length))
                        message.role = [];
                    message.role.push($root.WinnerMsg.winner_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a winners_resp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WinnerMsg.winners_resp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WinnerMsg.winners_resp} winners_resp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        winners_resp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a winners_resp message.
         * @function verify
         * @memberof WinnerMsg.winners_resp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        winners_resp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.role != null && message.hasOwnProperty("role")) {
                if (!Array.isArray(message.role))
                    return "role: array expected";
                for (var i = 0; i < message.role.length; ++i) {
                    var error = $root.WinnerMsg.winner_info.verify(message.role[i]);
                    if (error)
                        return "role." + error;
                }
            }
            return null;
        };

        return winners_resp;
    })();

    return WinnerMsg;
})();