//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LTDescrImplWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LTDescrImpl), typeof(System.Object));
		L.RegFunction("ToString", ToString);
		L.RegFunction("reset", reset);
		L.RegFunction("cleanup", cleanup);
		L.RegFunction("init", init);
		L.RegFunction("setFromColor", setFromColor);
		L.RegFunction("pause", pause);
		L.RegFunction("resume", resume);
		L.RegFunction("setAxis", setAxis);
		L.RegFunction("setDelay", setDelay);
		L.RegFunction("setEase", setEase);
		L.RegFunction("setOvershoot", setOvershoot);
		L.RegFunction("setPeriod", setPeriod);
		L.RegFunction("setTo", setTo);
		L.RegFunction("setFrom", setFrom);
		L.RegFunction("setDiff", setDiff);
		L.RegFunction("setHasInitialized", setHasInitialized);
		L.RegFunction("setId", setId);
		L.RegFunction("setTime", setTime);
		L.RegFunction("setRepeat", setRepeat);
		L.RegFunction("setLoopType", setLoopType);
		L.RegFunction("setUseEstimatedTime", setUseEstimatedTime);
		L.RegFunction("setIgnoreTimeScale", setIgnoreTimeScale);
		L.RegFunction("setUseFrames", setUseFrames);
		L.RegFunction("setUseManualTime", setUseManualTime);
		L.RegFunction("setLoopCount", setLoopCount);
		L.RegFunction("setLoopOnce", setLoopOnce);
		L.RegFunction("setLoopClamp", setLoopClamp);
		L.RegFunction("setLoopPingPong", setLoopPingPong);
		L.RegFunction("setOnComplete", setOnComplete);
		L.RegFunction("setOnCompleteCallback", setOnCompleteCallback);
		L.RegFunction("setOnCompleteParam", setOnCompleteParam);
		L.RegFunction("setOnUpdate", setOnUpdate);
		L.RegFunction("setOnUpdateRatio", setOnUpdateRatio);
		L.RegFunction("setOnUpdateObject", setOnUpdateObject);
		L.RegFunction("setOnUpdateVector2", setOnUpdateVector2);
		L.RegFunction("setOnUpdateVector3", setOnUpdateVector3);
		L.RegFunction("setOnUpdateColor", setOnUpdateColor);
		L.RegFunction("setOnUpdateParam", setOnUpdateParam);
		L.RegFunction("setOrientToPath", setOrientToPath);
		L.RegFunction("setOrientToPath2d", setOrientToPath2d);
		L.RegFunction("setRect", setRect);
		L.RegFunction("setPath", setPath);
		L.RegFunction("setPoint", setPoint);
		L.RegFunction("setDestroyOnComplete", setDestroyOnComplete);
		L.RegFunction("setAudio", setAudio);
		L.RegFunction("setOnCompleteOnRepeat", setOnCompleteOnRepeat);
		L.RegFunction("setOnCompleteOnStart", setOnCompleteOnStart);
		L.RegFunction("setSprites", setSprites);
		L.RegFunction("setFrameRate", setFrameRate);
		L.RegFunction("setOnStart", setOnStart);
		L.RegFunction("setDirection", setDirection);
		L.RegFunction("setRecursive", setRecursive);
		L.RegFunction("New", _CreateLTDescrImpl);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("rectTransform", get_rectTransform, set_rectTransform);
		L.RegVar("uiText", get_uiText, set_uiText);
		L.RegVar("uiImage", get_uiImage, set_uiImage);
		L.RegVar("sprites", get_sprites, set_sprites);
		L.RegVar("toggle", get_toggle, set_toggle);
		L.RegVar("useEstimatedTime", get_useEstimatedTime, set_useEstimatedTime);
		L.RegVar("useFrames", get_useFrames, set_useFrames);
		L.RegVar("useManualTime", get_useManualTime, set_useManualTime);
		L.RegVar("hasInitiliazed", get_hasInitiliazed, set_hasInitiliazed);
		L.RegVar("hasPhysics", get_hasPhysics, set_hasPhysics);
		L.RegVar("onCompleteOnRepeat", get_onCompleteOnRepeat, set_onCompleteOnRepeat);
		L.RegVar("onCompleteOnStart", get_onCompleteOnStart, set_onCompleteOnStart);
		L.RegVar("useRecursion", get_useRecursion, set_useRecursion);
		L.RegVar("passed", get_passed, set_passed);
		L.RegVar("delay", get_delay, set_delay);
		L.RegVar("time", get_time, set_time);
		L.RegVar("lastVal", get_lastVal, set_lastVal);
		L.RegVar("loopCount", get_loopCount, set_loopCount);
		L.RegVar("counter", get_counter, set_counter);
		L.RegVar("direction", get_direction, set_direction);
		L.RegVar("directionLast", get_directionLast, set_directionLast);
		L.RegVar("overshoot", get_overshoot, set_overshoot);
		L.RegVar("period", get_period, set_period);
		L.RegVar("destroyOnComplete", get_destroyOnComplete, set_destroyOnComplete);
		L.RegVar("trans", get_trans, set_trans);
		L.RegVar("toTrans", get_toTrans, set_toTrans);
		L.RegVar("ltRect", get_ltRect, set_ltRect);
		L.RegVar("from", get_from, set_from);
		L.RegVar("to", get_to, set_to);
		L.RegVar("diff", get_diff, set_diff);
		L.RegVar("point", get_point, set_point);
		L.RegVar("axis", get_axis, set_axis);
		L.RegVar("origRotation", get_origRotation, set_origRotation);
		L.RegVar("path", get_path, set_path);
		L.RegVar("spline", get_spline, set_spline);
		L.RegVar("type", get_type, set_type);
		L.RegVar("tweenType", get_tweenType, set_tweenType);
		L.RegVar("animationCurve", get_animationCurve, set_animationCurve);
		L.RegVar("loopType", get_loopType, set_loopType);
		L.RegVar("hasUpdateCallback", get_hasUpdateCallback, set_hasUpdateCallback);
		L.RegVar("onUpdateFloat", get_onUpdateFloat, set_onUpdateFloat);
		L.RegVar("onUpdateFloatRatio", get_onUpdateFloatRatio, set_onUpdateFloatRatio);
		L.RegVar("onUpdateFloatObject", get_onUpdateFloatObject, set_onUpdateFloatObject);
		L.RegVar("onUpdateVector2", get_onUpdateVector2, set_onUpdateVector2);
		L.RegVar("onUpdateVector3", get_onUpdateVector3, set_onUpdateVector3);
		L.RegVar("onUpdateVector3Object", get_onUpdateVector3Object, set_onUpdateVector3Object);
		L.RegVar("onUpdateColor", get_onUpdateColor, set_onUpdateColor);
		L.RegVar("onComplete", get_onComplete, set_onComplete);
		L.RegVar("onCompleteObject", get_onCompleteObject, set_onCompleteObject);
		L.RegVar("onCompleteParam", get_onCompleteParam, set_onCompleteParam);
		L.RegVar("onUpdateParam", get_onUpdateParam, set_onUpdateParam);
		L.RegVar("onStart", get_onStart, set_onStart);
		L.RegVar("uniqueId", get_uniqueId, null);
		L.RegVar("id", get_id, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLTDescrImpl(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LTDescrImpl obj = new LTDescrImpl();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LTDescrImpl.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			obj.reset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int cleanup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			obj.cleanup();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			obj.init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setFromColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			LTDescr o = obj.setFromColor(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			LTDescr o = obj.pause();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int resume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			LTDescr o = obj.resume();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAxis(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr o = obj.setAxis(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDelay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setDelay(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(UnityEngine.AnimationCurve)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.ToObject(L, 2);
				LTDescr o = obj.setEase(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(LeanTweenType)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				LeanTweenType arg0 = (LeanTweenType)ToLua.ToObject(L, 2);
				LTDescr o = obj.setEase(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setEase");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOvershoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setOvershoot(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPeriod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setPeriod(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(UnityEngine.Transform)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				LTDescr o = obj.setTo(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(UnityEngine.Vector3)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				LTDescr o = obj.setTo(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setTo");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(float)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				LTDescr o = obj.setFrom(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(UnityEngine.Vector3)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				LTDescr o = obj.setFrom(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setFrom");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDiff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr o = obj.setDiff(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setHasInitialized(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setHasInitialized(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setId(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRepeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setRepeat(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			LeanTweenType arg0 = (LeanTweenType)ToLua.CheckObject(L, 2, typeof(LeanTweenType));
			LTDescr o = obj.setLoopType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUseEstimatedTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setUseEstimatedTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setIgnoreTimeScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setIgnoreTimeScale(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUseFrames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setUseFrames(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUseManualTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setUseManualTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setLoopCount(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopOnce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			LTDescr o = obj.setLoopOnce();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopClamp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				LTDescr o = obj.setLoopClamp();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(int)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LTDescr o = obj.setLoopClamp(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setLoopClamp");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopPingPong(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				LTDescr o = obj.setLoopPingPong();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(int)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				LTDescr o = obj.setLoopPingPong(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setLoopPingPong");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnComplete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<object>)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<object> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
				}

				LTDescr o = obj.setOnComplete(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
				}

				LTDescr o = obj.setOnComplete(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<object>), typeof(object)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<object> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
				}

				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnComplete(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setOnComplete");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action<object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<object>)ToLua.CheckObject(L, 2, typeof(System.Action<object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
			}

			object arg1 = ToLua.ToVarObject(L, 3);
			LTDescr o = obj.setOnCompleteCallback(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			object arg0 = ToLua.ToVarObject(L, 2);
			LTDescr o = obj.setOnCompleteParam(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<UnityEngine.Color>)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<UnityEngine.Color> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<UnityEngine.Color>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Color>), func) as System.Action<UnityEngine.Color>;
				}

				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<float>)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<float> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<float>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
				}

				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<UnityEngine.Vector2>), typeof(object)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<UnityEngine.Vector2> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector2>), func) as System.Action<UnityEngine.Vector2>;
				}

				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<UnityEngine.Vector3>), typeof(object)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<UnityEngine.Vector3> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3>), func) as System.Action<UnityEngine.Vector3>;
				}

				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<float,object>), typeof(object)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<float,object> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<float,object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float,object>), func) as System.Action<float,object>;
				}

				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(System.Action<UnityEngine.Vector3,object>), typeof(object)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				System.Action<UnityEngine.Vector3,object> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<UnityEngine.Vector3,object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3,object>), func) as System.Action<UnityEngine.Vector3,object>;
				}

				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setOnUpdate");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateRatio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action<float,float> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float,float>)ToLua.CheckObject(L, 2, typeof(System.Action<float,float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float,float>), func) as System.Action<float,float>;
			}

			LTDescr o = obj.setOnUpdateRatio(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action<float,object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float,object>)ToLua.CheckObject(L, 2, typeof(System.Action<float,object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float,object>), func) as System.Action<float,object>;
			}

			LTDescr o = obj.setOnUpdateObject(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action<UnityEngine.Vector2> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector2>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector2>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector2>), func) as System.Action<UnityEngine.Vector2>;
			}

			LTDescr o = obj.setOnUpdateVector2(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action<UnityEngine.Vector3> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector3>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3>), func) as System.Action<UnityEngine.Vector3>;
			}

			LTDescr o = obj.setOnUpdateVector3(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action<UnityEngine.Color> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Color>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Color>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Color>), func) as System.Action<UnityEngine.Color>;
			}

			LTDescr o = obj.setOnUpdateColor(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			object arg0 = ToLua.ToVarObject(L, 2);
			LTDescr o = obj.setOnUpdateParam(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOrientToPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOrientToPath(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOrientToPath2d(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOrientToPath2d(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(UnityEngine.RectTransform)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.ToObject(L, 2);
				LTDescr o = obj.setRect(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(UnityEngine.Rect)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.ToObject(L, 2);
				LTDescr o = obj.setRect(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(LTDescrImpl), typeof(LTRect)))
			{
				LTDescrImpl obj = (LTDescrImpl)ToLua.ToObject(L, 1);
				LTRect arg0 = (LTRect)ToLua.ToObject(L, 2);
				LTDescr o = obj.setRect(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescrImpl.setRect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			LTBezierPath arg0 = (LTBezierPath)ToLua.CheckObject(L, 2, typeof(LTBezierPath));
			LTDescr o = obj.setPath(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr o = obj.setPoint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDestroyOnComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setDestroyOnComplete(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			object arg0 = ToLua.ToVarObject(L, 2);
			LTDescr o = obj.setAudio(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteOnRepeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOnCompleteOnRepeat(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteOnStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOnCompleteOnStart(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSprites(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
			LTDescr o = obj.setSprites(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setFrameRate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setFrameRate(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			LTDescr o = obj.setOnStart(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDirection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setDirection(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRecursive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescrImpl obj = (LTDescrImpl)ToLua.CheckObject(L, 1, typeof(LTDescrImpl));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setRecursive(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.RectTransform ret = obj.rectTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rectTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.UI.Text ret = obj.uiText;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uiText on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiImage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.UI.Image ret = obj.uiImage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uiImage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Sprite[] ret = obj.sprites;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sprites on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_toggle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.toggle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index toggle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useEstimatedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.useEstimatedTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useEstimatedTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useFrames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.useFrames;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useFrames on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useManualTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.useManualTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useManualTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasInitiliazed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.hasInitiliazed;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hasInitiliazed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasPhysics(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.hasPhysics;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hasPhysics on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCompleteOnRepeat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.onCompleteOnRepeat;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteOnRepeat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCompleteOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.onCompleteOnStart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useRecursion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.useRecursion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useRecursion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_passed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.passed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index passed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_delay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.delay;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index delay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.time;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index time on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastVal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.lastVal;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastVal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loopCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			int ret = obj.loopCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loopCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_counter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			uint ret = obj.counter;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index counter on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_direction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.direction;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index direction on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_directionLast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.directionLast;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index directionLast on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_overshoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.overshoot;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index overshoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_period(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float ret = obj.period;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index period on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_destroyOnComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.destroyOnComplete;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index destroyOnComplete on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_trans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Transform ret = obj.trans;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index trans on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_toTrans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Transform ret = obj.toTrans;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index toTrans on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ltRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LTRect ret = obj.ltRect;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ltRect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_from(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 ret = obj.from;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index from on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_to(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 ret = obj.to;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index to on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_diff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 ret = obj.diff;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index diff on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_point(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 ret = obj.point;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index point on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_axis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 ret = obj.axis;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index axis on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_origRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Quaternion ret = obj.origRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index origRotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LTBezierPath ret = obj.path;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index path on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spline(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LTSpline ret = obj.spline;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index spline on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			TweenAction ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tweenType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LeanTweenType ret = obj.tweenType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tweenType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animationCurve(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.AnimationCurve ret = obj.animationCurve;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationCurve on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LeanTweenType ret = obj.loopType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loopType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasUpdateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool ret = obj.hasUpdateCallback;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hasUpdateCallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateFloat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<float> ret = obj.onUpdateFloat;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateFloat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateFloatRatio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<float,float> ret = obj.onUpdateFloatRatio;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateFloatRatio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateFloatObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<float,object> ret = obj.onUpdateFloatObject;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateFloatObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateVector2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Vector2> ret = obj.onUpdateVector2;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateVector2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateVector3(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Vector3> ret = obj.onUpdateVector3;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateVector3 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateVector3Object(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Vector3,object> ret = obj.onUpdateVector3Object;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateVector3Object on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Color> ret = obj.onUpdateColor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action ret = obj.onComplete;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onComplete on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCompleteObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<object> ret = obj.onCompleteObject;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCompleteParam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			object ret = obj.onCompleteParam;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteParam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateParam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			object ret = obj.onUpdateParam;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateParam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action ret = obj.onStart;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uniqueId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			int ret = obj.uniqueId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uniqueId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			int ret = obj.id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.rectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rectTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uiText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.UI.Text arg0 = (UnityEngine.UI.Text)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Text));
			obj.uiText = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uiText on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uiImage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Image));
			obj.uiImage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uiImage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
			obj.sprites = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sprites on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_toggle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.toggle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index toggle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useEstimatedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useEstimatedTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useEstimatedTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useFrames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useFrames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useFrames on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useManualTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useManualTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useManualTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasInitiliazed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasInitiliazed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hasInitiliazed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasPhysics(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasPhysics = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hasPhysics on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCompleteOnRepeat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.onCompleteOnRepeat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteOnRepeat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCompleteOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.onCompleteOnStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useRecursion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useRecursion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index useRecursion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_passed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.passed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index passed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_delay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.delay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index delay on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index time on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastVal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lastVal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lastVal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loopCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.loopCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loopCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_counter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.counter = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index counter on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_direction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.direction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index direction on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_directionLast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.directionLast = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index directionLast on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_overshoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.overshoot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index overshoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_period(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.period = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index period on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_destroyOnComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.destroyOnComplete = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index destroyOnComplete on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_trans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.trans = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index trans on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_toTrans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.toTrans = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index toTrans on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ltRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LTRect arg0 = (LTRect)ToLua.CheckObject(L, 2, typeof(LTRect));
			obj.ltRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ltRect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_from(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.from = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index from on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_to(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.to = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index to on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_diff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.diff = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index diff on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_point(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.point = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index point on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_axis(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.axis = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index axis on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_origRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.origRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index origRotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LTBezierPath arg0 = (LTBezierPath)ToLua.CheckObject(L, 2, typeof(LTBezierPath));
			obj.path = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index path on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spline(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LTSpline arg0 = (LTSpline)ToLua.CheckObject(L, 2, typeof(LTSpline));
			obj.spline = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index spline on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			TweenAction arg0 = (TweenAction)ToLua.CheckObject(L, 2, typeof(TweenAction));
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tweenType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LeanTweenType arg0 = (LeanTweenType)ToLua.CheckObject(L, 2, typeof(LeanTweenType));
			obj.tweenType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tweenType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animationCurve(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			obj.animationCurve = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index animationCurve on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			LeanTweenType arg0 = (LeanTweenType)ToLua.CheckObject(L, 2, typeof(LeanTweenType));
			obj.loopType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index loopType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasUpdateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasUpdateCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hasUpdateCallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateFloat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<float> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float>)ToLua.CheckObject(L, 2, typeof(System.Action<float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
			}

			obj.onUpdateFloat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateFloat on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateFloatRatio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<float,float> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float,float>)ToLua.CheckObject(L, 2, typeof(System.Action<float,float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float,float>), func) as System.Action<float,float>;
			}

			obj.onUpdateFloatRatio = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateFloatRatio on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateFloatObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<float,object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<float,object>)ToLua.CheckObject(L, 2, typeof(System.Action<float,object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<float,object>), func) as System.Action<float,object>;
			}

			obj.onUpdateFloatObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateFloatObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateVector2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Vector2> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector2>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector2>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector2>), func) as System.Action<UnityEngine.Vector2>;
			}

			obj.onUpdateVector2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateVector2 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateVector3(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Vector3> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector3>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3>), func) as System.Action<UnityEngine.Vector3>;
			}

			obj.onUpdateVector3 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateVector3 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateVector3Object(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Vector3,object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Vector3,object>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Vector3,object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Vector3,object>), func) as System.Action<UnityEngine.Vector3,object>;
			}

			obj.onUpdateVector3Object = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateVector3Object on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateColor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<UnityEngine.Color> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Color>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Color>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Color>), func) as System.Action<UnityEngine.Color>;
			}

			obj.onUpdateColor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateColor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.onComplete = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onComplete on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCompleteObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action<object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<object>)ToLua.CheckObject(L, 2, typeof(System.Action<object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
			}

			obj.onCompleteObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteObject on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCompleteParam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.onCompleteParam = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onCompleteParam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateParam(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.onUpdateParam = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onUpdateParam on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescrImpl obj = (LTDescrImpl)o;
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.onStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index onStart on a nil value" : e.Message);
		}
	}
}

